openapi: 3.0.0
info:
  title: Xero Accounting API
  version: 9.0.0
  termsOfService: https://developer.xero.com/xero-developer-platform-terms-conditions/
  contact:
    name: Xero Platform Team
    email: api@xero.com
    url: https://developer.xero.com
servers:
- description: The Xero Accounting API exposes accounting and related functions of
    the main Xero application and can be used for a variety of purposes such as creating
    transactions like invoices and credit notes, right through to extracting accounting
    data via our reports endpoint.
  url: https://api.xero.com/api.xro/2.0
paths:
  /Accounts:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
      type: string
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getAccounts
      summary: Retrieves the full chart of accounts
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"ACTIVE\"
        x-example-java: Status==&quot;&apos; + Account.StatusEnum.ACTIVE+ &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\Account::STATUS_ACTIVE
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::Account::ACTIVE}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type Accounts array with 0 to
            n Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
    put:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: createAccount
      summary: Creates a new chart of accounts
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: account
        keyPascal: Account
      - key: code
        keyPascal: Code
        default: 123456
        object: account
      - key: name
        keyPascal: Name
        default: FooBar
        object: account
      - key: type
        keyPascal: Type
        default: EXPENSE
        nonString: true
        php: XeroAPI\XeroPHP\Models\Accounting\AccountType::EXPENSE
        node: AccountType.EXPENSE
        ruby: XeroRuby::Accounting::AccountType::EXPENSE
        python: AccountType.EXPENSE
        java: com.xero.models.accounting.AccountType.EXPENSE
        csharp: AccountType.EXPENSE
        object: account
      - is_last: true
        key: description
        keyPascal: Description
        default: Hello World
        object: account
      responses:
        '200':
          description: Success - created new Account and return response of type Accounts
            array with new Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
        '400':
          description: Validation Error - some data was incorrect returns response
            of type Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        description: Account object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
  /Accounts/{AccountID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getAccount
      summary: Retrieves a single chart of accounts by using a unique account Id
      parameters:
      - $ref: '#/components/parameters/AccountID'
      responses:
        '200':
          description: Success - return response of type Accounts array with one Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
    post:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: updateAccount
      summary: Updates a chart of accounts
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: account
        keyPascal: Account
      - key: code
        keyPascal: Code
        default: 123456
        object: account
      - key: name
        keyPascal: Name
        default: BarFoo
        object: account
      - key: type
        keyPascal: Type
        default: EXPENSE
        nonString: true
        php: XeroAPI\XeroPHP\Models\Accounting\AccountType::EXPENSE
        node: AccountType.EXPENSE
        ruby: XeroRuby::Accounting::AccountType::EXPENSE
        python: AccountType.EXPENSE
        java: com.xero.models.accounting.AccountType.EXPENSE
        csharp: AccountType.EXPENSE
        object: account
      - key: description
        keyPascal: Description
        default: Hello World
        object: account
      - is_last: true
        key: taxType
        keyPascal: TaxType
        keySnake: tax_type
        default: NONE
        object: account
      - is_object: true
        key: accounts
        keyPascal: Accounts
      - is_last: true
        is_array_add: true
        key: accounts
        keyPascal: Accounts
        java: Accounts
        csharp: Account
        object: account
      parameters:
      - $ref: '#/components/parameters/AccountID'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - update existing Account and return response of type
            Accounts array with updated Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
        '400':
          description: Validation Error - some data was incorrect returns response
            of type Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        description: Request of type Accounts array with one Account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Accounts'
    delete:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: deleteAccount
      x-hasAccountingValidationError: true
      summary: Deletes a chart of accounts
      parameters:
      - $ref: '#/components/parameters/AccountID'
      responses:
        '200':
          description: Success - delete existing Account and return response of type
            Accounts array with deleted Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
        '400':
          description: Validation Error - some data was incorrect returns response
            of type Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /Accounts/{AccountID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getAccountAttachments
      summary: Retrieves attachments for a specific accounts by using a unique account
        Id
      parameters:
      - $ref: '#/components/parameters/AccountID'
      responses:
        '200':
          description: Success - return response of type Attachments array of Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
  /Accounts/{AccountID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getAccountAttachmentById
      summary: Retrieves a specific attachment from a specific account using a unique
        attachment Id
      parameters:
      - $ref: '#/components/parameters/AccountID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Account as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /Accounts/{AccountID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getAccountAttachmentByFileName
      summary: Retrieves an attachment for a specific account by filename
      parameters:
      - $ref: '#/components/parameters/AccountID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Account as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updateAccountAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Updates attachment on a specific account by filename
      parameters:
      - $ref: '#/components/parameters/AccountID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Attachments array of Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          description: Validation Error - some data was incorrect returns response
            of type Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createAccountAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Creates an attachment on a specific account
      parameters:
      - $ref: '#/components/parameters/AccountID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Attachments array of Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /BatchPayments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    description: Batch payments allow you to bundle multiple bills or invoices into
      one payment transaction. This means a single payment in Xero can be reconciled
      with a single transaction on the bank statement making for a much simpler bank
      reconciliation experience.
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getBatchPayments
      summary: Retrieves either one or many batch payments for invoices
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\&quot;AUTHORISED\&quot;
        x-example-java: Status==&quot;&apos; + BatchPayment.StatusEnum.AUTHORISED
          + &apos;&quot;
        x-example-php: Status==&quot;&apos; . XeroAPI\XeroPHP\Models\Accounting\BatchPayment::STATUS_AUTHORISED
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::BatchPayment::AUTHORISED}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type BatchPayments array of BatchPayment
            objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPayments'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createBatchPayment
      summary: Creates one or many batch payments for invoices
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: currDate
        keyPascal: CurrDate
        keySnake: curr_date
        java_datatype: LocalDate
        default: LocalDate.now()
        java: LocalDate.now()
        csharp: DateTime.Now
        node: '''2020-12-10'''
        php: new DateTime('2020-12-10')
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: paymentAccount
        keyPascal: Account
        keySnake: payment_account
      - is_last: true
        is_uuid: true
        key: accountID
        keyPascal: AccountID
        keySnake: account_id
        default: 00000000-0000-0000-0000-000000000000
        object: paymentAccount
      - is_object: true
        key: bankAccount
        keyPascal: Account
        keySnake: bank_account
      - is_last: true
        is_uuid: true
        key: accountID
        keyPascal: AccountID
        keySnake: account_id
        default: 00000000-0000-0000-0000-000000000000
        object: bankAccount
      - is_object: true
        key: invoice
        keyPascal: Invoice
      - is_last: true
        is_uuid: true
        key: invoiceID
        keyPascal: InvoiceID
        keySnake: invoice_id
        default: 00000000-0000-0000-0000-000000000000
        object: invoice
      - is_object: true
        key: payment
        keyPascal: Payment
      - is_variable: true
        nonString: true
        key: account
        keyPascal: Account
        default: bankAccount
        python: bank_account
        ruby: bank_account
        object: payment
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: currDate
        python: curr_date
        ruby: curr_date
        object: payment
      - nonString: true
        key: amount
        keyPascal: Amount
        default: 1.0
        is_money: true
        object: payment
      - is_last: true
        is_variable: true
        nonString: true
        key: invoice
        keyPascal: Invoice
        default: invoice
        object: payment
      - is_list: true
        key: payments
        keyPascal: Payment
      - is_last: true
        is_list_add: true
        key: payments
        keyPascal: Payments
        object: payment
      - is_object: true
        key: batchPayment
        keyPascal: BatchPayment
        keySnake: batch_payment
      - is_variable: true
        nonString: true
        key: account
        keyPascal: Account
        default: paymentAccount
        python: payment_account
        ruby: payment_account
        object: batchPayment
      - key: reference
        keyPascal: Reference
        default: hello foobar
        object: batchPayment
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: currDate
        python: curr_date
        ruby: curr_date
        object: batchPayment
      - is_last: true
        is_variable: true
        nonString: true
        key: payments
        keyPascal: Payments
        default: payments
        object: batchPayment
      - is_object: true
        key: batchPayments
        keyPascal: BatchPayments
      - is_last: true
        is_array_add: true
        key: batchPayments
        keyPascal: BatchPayments
        keySnake: batch_payments
        java: BatchPayments
        python: batch_payment
        ruby: batch_payment
        csharp: BatchPayment
        object: batchPayment
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type BatchPayments array of BatchPayment
            objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPayments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: BatchPayments with an array of Payments in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchPayments'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: deleteBatchPayment
      summary: Updates a specific batch payment for invoices and credit notes
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: batchPaymentDelete
        keyPascal: BatchPaymentDelete
      - is_last: true
        key: status
        keyPascal: Status
        default: DELETED
        object: batchPaymentDelete
      - is_last: true
        is_uuid: true
        key: batchPaymentID
        keyPascal: BatchPaymentID
        keySnake: batch_payment_id
        default: 00000000-0000-0000-0000-000000000000
        object: batchPaymentDelete
      responses:
        '200':
          description: Success - return response of type BatchPayments array for updated
            BatchPayment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPayments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchPaymentDelete'
  /BatchPayments/{BatchPaymentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getBatchPayment
      summary: Retrieves a specific batch payment using a unique batch payment Id
      parameters:
      - $ref: '#/components/parameters/BatchPaymentID'
      responses:
        '200':
          description: Success - return response of type BatchPayments array with
            matching batch payment Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPayments'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: deleteBatchPaymentByUrlParam
      summary: Updates a specific batch payment for invoices and credit notes
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/BatchPaymentID'
      responses:
        '200':
          description: Success - return response of type BatchPayments array for updated
            BatchPayment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPayments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchPaymentDeleteByUrlParam'
  /BatchPayments/{BatchPaymentID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getBatchPaymentHistory
      summary: Retrieves history from a specific batch payment
      parameters:
      - $ref: '#/components/parameters/BatchPaymentID'
      responses:
        '200':
          description: Success - return response of HistoryRecords array of 0 to N
            HistoryRecord
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryRecords'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createBatchPaymentHistoryRecord
      summary: Creates a history record for a specific batch payment
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/BatchPaymentID'
      responses:
        '200':
          description: Success - return response of type HistoryRecords array of HistoryRecord
            objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryRecords'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /BankTransactions:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getBankTransactions
      summary: Retrieves any spent or received money transactions
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-java: Status==&quot;&apos; + BankTransaction.StatusEnum.AUTHORISED
          + &apos;&quot;
        x-example-csharp: Status==\"AUTHORISED\"
        x-example-php: Status==&quot;&apos; . XeroAPI\XeroPHP\Models\Accounting\BankTransaction::STATUS_AUTHORISED
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::BankTransaction::AUTHORISED}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: page
        description: Up to 100 bank transactions will be returned in a single API
          call with line items details
        schema:
          type: integer
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success - return response of type BankTransactions array with
            0 to n BankTransaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankTransactions'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createBankTransactions
      summary: Creates one or more spent or received money transaction
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_uuid: true
        is_last: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: bankAccount
        keyPascal: Account
        keySnake: bank_account
      - is_last: true
        is_uuid: true
        key: accountID
        keyPascal: AccountID
        keySnake: account_id
        default: 00000000-0000-0000-0000-000000000000
        object: bankAccount
      - is_object: true
        key: bankTransaction
        keyPascal: BankTransaction
        keySnake: bank_transaction
      - nonString: true
        key: type
        keyPascal: Type
        default: RECEIVE
        php: XeroAPI\XeroPHP\Models\Accounting\BankTransaction::TYPE_RECEIVE
        node: BankTransaction.TypeEnum.RECEIVE
        ruby: XeroRuby::Accounting::BankTransaction::RECEIVE
        python_string: RECEIVE
        java: com.xero.models.accounting.BankTransaction.TypeEnum.RECEIVE
        csharp: BankTransaction.TypeEnum.RECEIVE
        object: bankTransaction
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: bankTransaction
      - is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        object: bankTransaction
        default: lineItems
      - is_last: true
        is_variable: true
        nonString: true
        key: bankAccount
        keyPascal: BankAccount
        keySnake: bank_account
        python: bank_account
        ruby: bank_account
        default: bankAccount
        object: bankTransaction
      - is_object: true
        key: bankTransactions
        keyPascal: BankTransactions
      - is_last: true
        is_array_add: true
        key: bankTransactions
        keyPascal: BankTransactions
        keySnake: bank_transactions
        java: BankTransactions
        python: bank_transaction
        ruby: bank_transaction
        csharp: BankTransaction
        object: bankTransaction
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type BankTransactions array with
            new BankTransaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankTransactions'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: BankTransactions with an array of BankTransaction objects in
          body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankTransactions'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateOrCreateBankTransactions
      summary: Updates or creates one or more spent or received money transaction
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_uuid: true
        is_last: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: bankAccount
        keyPascal: Account
        keySnake: bank_account
      - is_last: true
        is_uuid: true
        key: accountID
        keyPascal: AccountID
        keySnake: account_id
        default: 00000000-0000-0000-0000-000000000000
        object: bankAccount
      - is_object: true
        key: bankTransaction
        keyPascal: BankTransaction
        keySnake: bank_transaction
      - nonString: true
        key: type
        keyPascal: Type
        default: RECEIVE
        php: XeroAPI\XeroPHP\Models\Accounting\BankTransaction::TYPE_RECEIVE
        node: BankTransaction.TypeEnum.RECEIVE
        ruby: XeroRuby::Accounting::BankTransaction::RECEIVE
        python_string: RECEIVE
        java: com.xero.models.accounting.BankTransaction.TypeEnum.RECEIVE
        csharp: BankTransaction.TypeEnum.RECEIVE
        object: bankTransaction
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: bankTransaction
      - is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        object: bankTransaction
        default: lineItems
      - is_last: true
        is_variable: true
        nonString: true
        key: bankAccount
        keyPascal: BankAccount
        keySnake: bank_account
        python: bank_account
        ruby: bank_account
        default: bankAccount
        object: bankTransaction
      - is_object: true
        key: bankTransactions
        keyPascal: BankTransactions
      - is_last: true
        is_array_add: true
        key: bankTransactions
        keyPascal: BankTransactions
        keySnake: bank_transactions
        java: BankTransactions
        python: bank_transaction
        ruby: bank_transaction
        csharp: BankTransaction
        object: bankTransaction
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type BankTransactions array with
            new BankTransaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankTransactions'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankTransactions'
  /BankTransactions/{BankTransactionID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getBankTransaction
      summary: Retrieves a single spent or received money transaction by using a unique
        bank transaction Id
      parameters:
      - $ref: '#/components/parameters/BankTransactionID'
      - $ref: '#/components/parameters/unitdp'
      responses:
        '200':
          description: Success - return response of type BankTransactions array with
            a specific BankTransaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankTransactions'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateBankTransaction
      summary: Updates a single spent or received money transaction
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_uuid: true
        is_last: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: bankAccount
        keyPascal: Account
        keySnake: bank_account
      - is_last: true
        is_uuid: true
        key: accountID
        keyPascal: AccountID
        keySnake: account_id
        default: 00000000-0000-0000-0000-000000000000
        object: bankAccount
      - is_object: true
        key: bankTransaction
        keyPascal: BankTransaction
        keySnake: bank_transaction
      - key: reference
        keyPascal: Reference
        default: You just updated
        object: bankTransaction
      - nonString: true
        key: type
        keyPascal: Type
        default: RECEIVE
        php: XeroAPI\XeroPHP\Models\Accounting\BankTransaction::TYPE_RECEIVE
        node: BankTransaction.TypeEnum.RECEIVE
        ruby: XeroRuby::Accounting::BankTransaction::RECEIVE
        python_string: RECEIVE
        java: com.xero.models.accounting.BankTransaction.TypeEnum.RECEIVE
        csharp: BankTransaction.TypeEnum.RECEIVE
        object: bankTransaction
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: bankTransaction
      - is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        object: bankTransaction
        default: lineItems
      - is_last: true
        is_variable: true
        nonString: true
        key: bankAccount
        keyPascal: BankAccount
        keySnake: bank_account
        python: bank_account
        ruby: bank_account
        default: bankAccount
        object: bankTransaction
      - is_object: true
        key: bankTransactions
        keyPascal: BankTransactions
      - is_last: true
        is_array_add: true
        key: bankTransactions
        keyPascal: BankTransactions
        keySnake: bank_transactions
        java: BankTransactions
        python: bank_transaction
        ruby: bank_transaction
        csharp: BankTransaction
        object: bankTransaction
      parameters:
      - $ref: '#/components/parameters/BankTransactionID'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type BankTransactions array with
            updated BankTransaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankTransactions'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankTransactions'
  /BankTransactions/{BankTransactionID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getBankTransactionAttachments
      summary: Retrieves any attachments from a specific bank transactions
      parameters:
      - $ref: '#/components/parameters/BankTransactionID'
      responses:
        '200':
          description: Success - return response of type Attachments array with 0
            to n Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
  /BankTransactions/{BankTransactionID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getBankTransactionAttachmentById
      summary: Retrieves specific attachments from a specific BankTransaction using
        a unique attachment Id
      parameters:
      - $ref: '#/components/parameters/BankTransactionID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for BankTransaction
            as binary data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /BankTransactions/{BankTransactionID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getBankTransactionAttachmentByFileName
      summary: Retrieves a specific attachment from a specific bank transaction by
        filename
      parameters:
      - $ref: '#/components/parameters/BankTransactionID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for BankTransaction
            as binary data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updateBankTransactionAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Updates a specific attachment from a specific bank transaction by filename
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/BankTransactionID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of Attachments array of Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createBankTransactionAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Creates an attachment for a specific bank transaction by filename
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/BankTransactionID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of Attachments array of Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /BankTransactions/{BankTransactionID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getBankTransactionsHistory
      summary: Retrieves history from a specific bank transaction using a unique bank
        transaction Id
      parameters:
      - $ref: '#/components/parameters/BankTransactionID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createBankTransactionHistoryRecord
      summary: Creates a history record for a specific bank transactions
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/BankTransactionID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /BankTransfers:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getBankTransfers
      summary: Retrieves all bank transfers
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of BankTransfers array of 0 to N
            BankTransfer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankTransfers'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createBankTransfer
      summary: Creates a bank transfer
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: fromBankAccount
        keyPascal: Account
      - is_last: true
        is_uuid: true
        key: accountID
        keyPascal: AccountID
        keySnake: account_id
        default: 00000000-0000-0000-0000-000000000000
        object: fromBankAccount
      - is_object: true
        key: toBankAccount
        keyPascal: Account
      - is_last: true
        is_uuid: true
        key: accountID
        keyPascal: AccountID
        keySnake: account_id
        default: 00000000-0000-0000-0000-000000000000
        object: toBankAccount
      - is_object: true
        key: bankTransfer
        keyPascal: BankTransfer
        keySnake: bank_transfer
      - is_variable: true
        nonString: true
        key: fromBankAccount
        keyPascal: FromBankAccount
        keySnake: from_bank_account
        default: fromBankAccount
        object: bankTransfer
      - is_variable: true
        nonString: true
        key: toBankAccount
        keyPascal: ToBankAccount
        keySnake: to_bank_account
        default: toBankAccount
        object: bankTransfer
      - is_last: true
        nonString: true
        key: amount
        keyPascal: Amount
        default: 1.0
        is_money: true
        object: bankTransfer
      - is_object: true
        key: bankTransfers
        keyPascal: BankTransfers
      - is_last: true
        is_array_add: true
        key: bankTransfers
        keyPascal: BankTransfers
        keySnake: bank_transfers
        java: BankTransfers
        python: bank_transfer
        ruby: bank_transfer
        csharp: BankTransfer
        object: bankTransfer
      responses:
        '200':
          description: Success - return response of BankTransfers array of one BankTransfer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankTransfers'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: BankTransfers with array of BankTransfer objects in request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankTransfers'
  /BankTransfers/{BankTransferID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getBankTransfer
      summary: Retrieves specific bank transfers by using a unique bank transfer Id
      parameters:
      - $ref: '#/components/parameters/BankTransferID'
      responses:
        '200':
          description: Success - return response of BankTransfers array with one BankTransfer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankTransfers'
  /BankTransfers/{BankTransferID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getBankTransferAttachments
      summary: Retrieves attachments from a specific bank transfer
      parameters:
      - $ref: '#/components/parameters/BankTransferID'
      responses:
        '200':
          description: Success - return response of Attachments array of 0 to N Attachment
            for a Bank Transfer
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
  /BankTransfers/{BankTransferID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getBankTransferAttachmentById
      summary: Retrieves a specific attachment from a specific bank transfer using
        a unique attachment ID
      parameters:
      - $ref: '#/components/parameters/BankTransferID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of binary data from the Attachment
            to a Bank Transfer
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /BankTransfers/{BankTransferID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getBankTransferAttachmentByFileName
      summary: Retrieves a specific attachment on a specific bank transfer by file
        name
      parameters:
      - $ref: '#/components/parameters/BankTransferID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of binary data from the Attachment
            to a Bank Transfer
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updateBankTransferAttachmentByFileName
      x-hasAccountingValidationError: true
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/BankTransferID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of Attachments array of 0 to N Attachment
            for a Bank Transfer
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createBankTransferAttachmentByFileName
      x-hasAccountingValidationError: true
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/BankTransferID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of Attachments array of 0 to N Attachment
            for a Bank Transfer
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /BankTransfers/{BankTransferID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getBankTransferHistory
      summary: Retrieves history from a specific bank transfer using a unique bank
        transfer Id
      parameters:
      - $ref: '#/components/parameters/BankTransferID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createBankTransferHistoryRecord
      summary: Creates a history record for a specific bank transfer
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/BankTransferID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /BrandingThemes:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getBrandingThemes
      summary: Retrieves all the branding themes
      responses:
        '200':
          description: Success - return response of type BrandingThemes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandingThemes'
  /BrandingThemes/{BrandingThemeID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getBrandingTheme
      summary: Retrieves a specific branding theme using a unique branding theme Id
      parameters:
      - $ref: '#/components/parameters/BrandingThemeID'
      responses:
        '200':
          description: Success - return response of type BrandingThemes with one BrandingTheme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandingThemes'
  /BrandingThemes/{BrandingThemeID}/PaymentServices:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - paymentservices
      tags:
      - Accounting
      operationId: getBrandingThemePaymentServices
      summary: Retrieves the payment services for a specific branding theme
      x-excludeFromPreview: true
      parameters:
      - $ref: '#/components/parameters/BrandingThemeID'
      responses:
        '200':
          description: Success - return response of type PaymentServices array with
            0 to N PaymentService
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServices'
    post:
      security:
      - OAuth2:
        - paymentservices
      tags:
      - Accounting
      operationId: createBrandingThemePaymentServices
      summary: Creates a new custom payment service for a specific branding theme
      x-excludeFromPreview: true
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: paymentService
        keyPascal: PaymentService
        keySnake: payment_service
      - is_uuid: true
        key: paymentServiceID
        keyPascal: PaymentServiceID
        keySnake: payment_service_id
        default: 00000000-0000-0000-0000-000000000000
        object: paymentService
      - key: paymentServiceName
        keyPascal: PaymentServiceName
        keySnake: payment_service_name
        default: ACME Payments
        object: paymentService
      - key: paymentServiceUrl
        keyPascal: PaymentServiceUrl
        keySnake: payment_service_url
        default: https://www.payupnow.com/
        object: paymentService
      - is_last: true
        key: payNowText
        keyPascal: PayNowText
        keySnake: pay_now_text
        default: Pay Now
        object: paymentService
      - is_object: true
        key: paymentServices
        keyPascal: PaymentServices
      - is_last: true
        is_array_add: true
        key: paymentServices
        keyPascal: PaymentServices
        java: PaymentServices
        csharp: PaymentService
        object: paymentService
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/BrandingThemeID'
      responses:
        '200':
          description: Success - return response of type PaymentServices array with
            newly created PaymentService
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServices'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: PaymentServices array with PaymentService object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentServices'
  /Budgets:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.budgets.read
      tags:
      - Accounting
      operationId: getBudgets
      summary: Retrieve a list of budgets
      parameters:
      - in: query
        name: IDs
        x-snake: ids
        description: Filter by BudgetID. Allows you to retrieve a specific individual
          budget.
        style: form
        explode: false
        x-example-java: UUID.fromString("00000000-0000-0000-0000-000000000000")
        x-example-php: '&quot;00000000-0000-0000-0000-000000000000&quot;'
        x-example-csharp: Guid.Parse("00000000-0000-0000-0000-000000000000");
        schema:
          type: string
          items:
            type: string
            format: uuid
      - in: query
        name: DateTo
        x-snake: date_to
        description: Filter by start date
        schema:
          type: string
          format: date
      - in: query
        name: DateFrom
        x-snake: date_from
        description: Filter by end date
        schema:
          type: string
          format: date
      responses:
        '200':
          description: Success - return response of type Budgets array with 0 to N
            Budgets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budgets'
  /Budgets/{BudgetID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.budgets.read
      tags:
      - Accounting
      operationId: getBudget
      summary: Retrieves a specific budget, which includes budget lines
      parameters:
      - $ref: '#/components/parameters/BudgetID'
      - in: query
        name: DateTo
        x-snake: date_to
        description: Filter by start date
        schema:
          type: string
          format: date
      - in: query
        name: DateFrom
        x-snake: date_from
        description: Filter by end date
        schema:
          type: string
          format: date
      responses:
        '200':
          description: Success - return response of type Invoices array with specified
            Invoices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budgets'
  /Contacts:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.contacts
        - accounting.contacts.read
      tags:
      - Accounting
      operationId: getContacts
      summary: Retrieves all contacts in a Xero organisation
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: ContactStatus==\&quot;ACTIVE\&quot;
        x-example-java: ContactStatus==&quot;&apos; + Contact.ContactStatusEnum.ACTIVE
          + &apos;&quot;
        x-example-php: ContactStatus==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\Contact::CONTACT_STATUS_ACTIVE
          . &apos;&quot;
        x-example-ruby: ContactStatus==#{XeroRuby::Accounting::Contact::ACTIVE}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: IDs
        x-snake: ids
        description: Filter by a comma separated list of ContactIDs. Allows you to
          retrieve a specific set of contacts in a single call.
        style: form
        explode: false
        x-example-java: Arrays.asList(UUID.fromString("00000000-0000-0000-0000-000000000000"))
        x-example-php: '&quot;00000000-0000-0000-0000-000000000000&quot;'
        x-example-csharp: new List&lt;Guid&gt;{Guid.Parse("00000000-0000-0000-0000-000000000000")};
        schema:
          type: array
          items:
            type: string
            format: uuid
      - in: query
        name: page
        description: e.g. page=1 - Up to 100 contacts will be returned in a single
          API call.
        schema:
          type: integer
      - in: query
        name: includeArchived
        x-snake: include_archived
        description: e.g. includeArchived=true - Contacts with a status of ARCHIVED
          will be included in the response
        x-example-python: 'True'
        schema:
          type: boolean
      - $ref: '#/components/parameters/summaryOnly'
      - in: query
        name: searchTerm
        x-snake: search_term
        description: Search parameter that performs a case-insensitive text search
          across the Name, FirstName, LastName, ContactNumber and EmailAddress fields.
        schema:
          type: string
      - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success - return response of type Contacts array with 0 to
            N Contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
    put:
      security:
      - OAuth2:
        - accounting.contacts
      tags:
      - Accounting
      operationId: createContacts
      summary: Creates multiple contacts (bulk) in a Xero organisation
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: phone
        keyPascal: Phone
      - key: phoneNumber
        keyPascal: PhoneNumber
        keySnake: phone_number
        default: 555-1212
        object: phone
      - is_last: true
        nonString: true
        key: phoneType
        keyPascal: PhoneType
        keySnake: phone_type
        default: MOBILE
        php: XeroAPI\XeroPHP\Models\Accounting\Phone::PHONE_TYPE_MOBILE
        node: Phone.PhoneTypeEnum.MOBILE
        ruby: XeroRuby::Accounting::PhoneType::MOBILE
        python_string: MOBILE
        java: com.xero.models.accounting.Phone.PhoneTypeEnum.MOBILE
        csharp: Phone.PhoneTypeEnum.MOBILE
        object: phone
      - is_list: true
        key: phones
        keyPascal: Phone
      - is_last: true
        is_list_add: true
        key: phones
        keyPascal: Phones
        object: phone
      - is_object: true
        key: contact
        keyPascal: Contact
      - key: name
        keyPascal: Name
        default: Bruce Banner
        object: contact
      - key: emailAddress
        keyPascal: EmailAddress
        keySnake: email_address
        default: hulk@avengers.com
        object: contact
      - is_last: true
        is_variable: true
        nonString: true
        key: phones
        keyPascal: Phones
        default: phones
        object: contact
      - is_object: true
        key: contacts
        keyPascal: Contacts
      - is_last: true
        is_array_add: true
        key: contacts
        keyPascal: Contacts
        java: Contacts
        csharp: Contact
        object: contact
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Contacts array with newly
            created Contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
        '400':
          description: Validation Error - some data was incorrect returns response
            of type Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        description: Contacts with an array of Contact objects to create in body of
          request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contacts'
    post:
      security:
      - OAuth2:
        - accounting.contacts
      tags:
      - Accounting
      operationId: updateOrCreateContacts
      summary: Updates or creates one or more contacts in a Xero organisation
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: phone
        keyPascal: Phone
      - key: phoneNumber
        keyPascal: PhoneNumber
        keySnake: phone_number
        default: 555-1212
        object: phone
      - is_last: true
        nonString: true
        key: phoneType
        keyPascal: PhoneType
        keySnake: phone_type
        default: MOBILE
        php: XeroAPI\XeroPHP\Models\Accounting\Phone::PHONE_TYPE_MOBILE
        node: Phone.PhoneTypeEnum.MOBILE
        ruby: XeroRuby::Accounting::PhoneType::MOBILE
        python_string: MOBILE
        java: com.xero.models.accounting.Phone.PhoneTypeEnum.MOBILE
        csharp: Phone.PhoneTypeEnum.MOBILE
        object: phone
      - is_list: true
        key: phones
        keyPascal: Phone
      - is_last: true
        is_list_add: true
        key: phones
        keyPascal: Phones
        object: phone
      - is_object: true
        key: contact
        keyPascal: Contact
      - key: name
        keyPascal: Name
        default: Bruce Banner
        object: contact
      - key: emailAddress
        keyPascal: EmailAddress
        keySnake: email_address
        default: hulk@avengers.com
        object: contact
      - is_last: true
        is_variable: true
        nonString: true
        key: phones
        keyPascal: Phones
        default: phones
        object: contact
      - is_object: true
        key: contacts
        keyPascal: Contacts
      - is_last: true
        is_array_add: true
        key: contacts
        keyPascal: Contacts
        java: Contacts
        csharp: Contact
        object: contact
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Contacts array with newly
            created Contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
        '400':
          description: Validation Error - some data was incorrect returns response
            of type Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contacts'
  /Contacts/{ContactNumber}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.contacts
        - accounting.contacts.read
      tags:
      - Accounting
      operationId: getContactByContactNumber
      summary: Retrieves a specific contact by contact number in a Xero organisation
      parameters:
      - required: true
        in: path
        name: ContactNumber
        x-snake: contact_number
        description: This field is read only on the Xero contact screen, used to identify
          contacts in external systems (max length = 50).
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type Contacts array with a unique
            Contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
  /Contacts/{ContactID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.contacts
        - accounting.contacts.read
      tags:
      - Accounting
      operationId: getContact
      summary: Retrieves a specific contacts in a Xero organisation using a unique
        contact Id
      parameters:
      - $ref: '#/components/parameters/ContactID'
      responses:
        '200':
          description: Success - return response of type Contacts array with a unique
            Contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
    post:
      security:
      - OAuth2:
        - accounting.contacts
      tags:
      - Accounting
      operationId: updateContact
      summary: Updates a specific contact in a Xero organisation
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: contact
        keyPascal: Contact
      - key: name
        keyPascal: Name
        default: Thanos
        object: contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: contacts
        keyPascal: Contacts
      - is_last: true
        is_array_add: true
        key: contacts
        keyPascal: Contacts
        java: Contacts
        csharp: Contact
        object: contact
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ContactID'
      responses:
        '200':
          description: Success - return response of type Contacts array with an updated
            Contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        description: an array of Contacts containing single Contact object with properties
          to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contacts'
  /Contacts/{ContactID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getContactAttachments
      x-hasAccountingValidationError: true
      summary: Retrieves attachments for a specific contact in a Xero organisation
      responses:
        '200':
          description: Success - return response of type Attachments array with 0
            to N Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
      parameters:
      - $ref: '#/components/parameters/ContactID'
  /Contacts/{ContactID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getContactAttachmentById
      summary: Retrieves a specific attachment from a specific contact using a unique
        attachment Id
      parameters:
      - $ref: '#/components/parameters/ContactID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Contact as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /Contacts/{ContactID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getContactAttachmentByFileName
      summary: Retrieves a specific attachment from a specific contact by file name
      parameters:
      - $ref: '#/components/parameters/ContactID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Contact as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updateContactAttachmentByFileName
      x-hasAccountingValidationError: true
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ContactID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array with an
            updated Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createContactAttachmentByFileName
      x-hasAccountingValidationError: true
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ContactID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array with an
            newly created Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /Contacts/{ContactID}/CISSettings:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getContactCISSettings
      summary: Retrieves CIS settings for a specific contact in a Xero organisation
      parameters:
      - $ref: '#/components/parameters/ContactID'
      responses:
        '200':
          description: Success - return response of type CISSettings for a specific
            Contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CISSettings'
  /Contacts/{ContactID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.contacts
        - accounting.contacts.read
      tags:
      - Accounting
      operationId: getContactHistory
      summary: Retrieves history records for a specific contact
      parameters:
      - $ref: '#/components/parameters/ContactID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.contacts
      tags:
      - Accounting
      operationId: createContactHistory
      summary: Creates a new history record for a specific contact
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ContactID'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          $ref: '#/components/responses/400Error'
  /ContactGroups:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.contacts
        - accounting.contacts.read
      tags:
      - Accounting
      operationId: getContactGroups
      summary: Retrieves the contact Id and name of each contact group
      parameters:
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"ACTIVE\"
        x-example-java: Status==&quot;&apos; + ContactGroup.StatusEnum.ACTIVE + &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\ContactGroup::STATUS_ACTIVE
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::ContactGroup::ACTIVE}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type Contact Groups array of Contact
            Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactGroups'
    put:
      security:
      - OAuth2:
        - accounting.contacts
      tags:
      - Accounting
      operationId: createContactGroup
      summary: Creates a contact group
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: contactGroup
        keyPascal: ContactGroup
        keySnake: contact_group
      - is_last: true
        key: name
        keyPascal: Name
        default: VIPs
        object: contactGroup
      - is_object: true
        key: contactGroups
        keyPascal: ContactGroups
      - is_last: true
        is_array_add: true
        key: contactGroups
        keyPascal: ContactGroups
        keySnake: contact_groups
        java: ContactGroups
        python: contact_group
        ruby: contact_group
        csharp: ContactGroup
        object: contactGroup
      responses:
        '200':
          description: Success - return response of type Contact Groups array of newly
            created Contact Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactGroups'
        '400':
          description: Validation Error - some data was incorrect returns response
            of type Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: ContactGroups with an array of names in request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactGroups'
  /ContactGroups/{ContactGroupID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.contacts
        - accounting.contacts.read
      tags:
      - Accounting
      operationId: getContactGroup
      summary: Retrieves a specific contact group by using a unique contact group
        Id
      parameters:
      - $ref: '#/components/parameters/ContactGroupID'
      responses:
        '200':
          description: Success - return response of type Contact Groups array with
            a specific Contact Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactGroups'
    post:
      security:
      - OAuth2:
        - accounting.contacts
      tags:
      - Accounting
      operationId: updateContactGroup
      summary: Updates a specific contact group
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: contactGroup
        keyPascal: ContactGroup
        keySnake: contact_group
      - is_last: true
        key: name
        keyPascal: Name
        default: Vendor
        object: contactGroup
      - is_object: true
        key: contactGroups
        keyPascal: ContactGroups
      - is_last: true
        is_array_add: true
        key: contactGroups
        keyPascal: ContactGroups
        keySnake: contact_groups
        java: ContactGroups
        python: contact_group
        ruby: contact_group
        csharp: ContactGroup
        object: contactGroup
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ContactGroupID'
      responses:
        '200':
          description: Success - return response of type Contact Groups array of updated
            Contact Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactGroups'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        description: an array of Contact groups with Name of specific group to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactGroups'
  /ContactGroups/{ContactGroupID}/Contacts:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    put:
      security:
      - OAuth2:
        - accounting.contacts
      tags:
      - Accounting
      operationId: createContactGroupContacts
      summary: Creates contacts to a specific contact group
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: contacts
        keyPascal: Contacts
      - is_last: true
        is_array_add: true
        key: contacts
        keyPascal: Contacts
        java: Contacts
        csharp: Contact
        object: contact
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ContactGroupID'
      responses:
        '200':
          description: Success - return response of type Contacts array of added Contacts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacts'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        description: Contacts with array of contacts specifying the ContactID to be
          added to ContactGroup in body of request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contacts'
    delete:
      security:
      - OAuth2:
        - accounting.contacts
      tags:
      - Accounting
      operationId: deleteContactGroupContacts
      summary: Deletes all contacts from a specific contact group
      parameters:
      - $ref: '#/components/parameters/ContactGroupID'
      responses:
        '204':
          description: Success - return response 204 no content
          x-isEmpty: true
  /ContactGroups/{ContactGroupID}/Contacts/{ContactID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    delete:
      security:
      - OAuth2:
        - accounting.contacts
      tags:
      - Accounting
      operationId: deleteContactGroupContact
      summary: Deletes a specific contact from a contact group using a unique contact
        Id
      parameters:
      - $ref: '#/components/parameters/ContactGroupID'
      - $ref: '#/components/parameters/ContactID'
      responses:
        '204':
          description: Success - return response 204 no content
          x-isEmpty: true
        '400':
          $ref: '#/components/responses/400Error'
  /CreditNotes:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getCreditNotes
      summary: Retrieves any credit notes
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"DRAFT\"
        x-example-java: Status==&quot;&apos; + CreditNote.StatusEnum.DRAFT + &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\CreditNote::STATUS_DRAFT
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::CreditNote::DRAFT}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: page
        description: "e.g. page=1 \u2013 Up to 100 credit notes will be returned in\
          \ a single API call with line items shown for each credit note"
        schema:
          type: integer
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success - return response of type Credit Notes array of CreditNote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNotes'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createCreditNotes
      summary: Creates a new credit note
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: currDate
        keyPascal: CurrDate
        keySnake: curr_date
        java_datatype: LocalDate
        default: LocalDate.now()
        java: LocalDate.now()
        node: '''2020-12-10'''
        csharp: DateTime.Now
        php: new DateTime('2020-12-10')
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: creditNote
        keyPascal: CreditNote
        keySnake: credit_note
      - nonString: true
        key: type
        keyPascal: Type
        default: ACCPAYCREDIT
        php: XeroAPI\XeroPHP\Models\Accounting\CreditNote::TYPE_ACCPAYCREDIT
        node: CreditNote.TypeEnum.ACCPAYCREDIT
        ruby: XeroRuby::Accounting::CreditNote::ACCPAYCREDIT
        python_string: ACCPAYCREDIT
        java: com.xero.models.accounting.CreditNote.TypeEnum.ACCPAYCREDIT
        csharp: CreditNote.TypeEnum.ACCPAYCREDIT
        object: creditNote
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: creditNote
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: currDate
        python: curr_date
        ruby: curr_date
        object: creditNote
      - is_last: true
        is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        default: lineItems
        python: line_items
        ruby: line_items
        object: creditNote
      - is_object: true
        key: creditNotes
        keyPascal: CreditNotes
      - is_last: true
        is_array_add: true
        key: creditNotes
        keyPascal: CreditNotes
        keySnake: credit_notes
        java: CreditNotes
        python: credit_note
        ruby: credit_note
        csharp: CreditNote
        object: creditNote
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Credit Notes array of newly
            created CreditNote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNotes'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        description: Credit Notes with array of CreditNote object in body of request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNotes'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateOrCreateCreditNotes
      summary: Updates or creates one or more credit notes
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: currDate
        keyPascal: CurrDate
        keySnake: curr_date
        java_datatype: LocalDate
        default: LocalDate.now()
        java: LocalDate.now()
        csharp: DateTime.Now
        node: '''2020-12-10'''
        php: new DateTime('2020-12-10')
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: creditNote
        keyPascal: CreditNote
        keySnake: credit_note
      - nonString: true
        key: type
        keyPascal: Type
        default: ACCPAYCREDIT
        php: XeroAPI\XeroPHP\Models\Accounting\CreditNote::TYPE_ACCPAYCREDIT
        node: CreditNote.TypeEnum.ACCPAYCREDIT
        ruby: XeroRuby::Accounting::CreditNote::ACCPAYCREDIT
        python_string: ACCPAYCREDIT
        java: com.xero.models.accounting.CreditNote.TypeEnum.ACCPAYCREDIT
        csharp: CreditNote.TypeEnum.ACCPAYCREDIT
        object: creditNote
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: creditNote
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: currDate
        python: curr_date
        ruby: curr_date
        object: creditNote
      - is_last: true
        is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        default: lineItems
        python: line_items
        ruby: line_items
        object: creditNote
      - is_object: true
        key: creditNotes
        keyPascal: CreditNotes
      - is_last: true
        is_array_add: true
        key: creditNotes
        keyPascal: CreditNotes
        keySnake: credit_notes
        java: CreditNotes
        python: credit_note
        ruby: credit_note
        csharp: CreditNote
        object: creditNote
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Credit Notes array of newly
            created CreditNote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNotes'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        description: an array of Credit Notes with a single CreditNote object.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNotes'
  /CreditNotes/{CreditNoteID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getCreditNote
      summary: Retrieves a specific credit note using a unique credit note Id
      parameters:
      - $ref: '#/components/parameters/CreditNoteID'
      - $ref: '#/components/parameters/unitdp'
      responses:
        '200':
          description: Success - return response of type Credit Notes array with a
            unique CreditNote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNotes'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateCreditNote
      summary: Updates a specific credit note
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: currDate
        keyPascal: CurrDate
        keySnake: curr_date
        java_datatype: LocalDate
        default: LocalDate.now()
        java: LocalDate.now()
        csharp: DateTime.Now
        node: '''2020-12-10'''
        php: new DateTime('2020-12-10')
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: creditNote
        keyPascal: CreditNote
        keySnake: credit_note
      - nonString: true
        key: type
        keyPascal: Type
        default: ACCPAYCREDIT
        php: XeroAPI\XeroPHP\Models\Accounting\CreditNote::TYPE_ACCPAYCREDIT
        node: CreditNote.TypeEnum.ACCPAYCREDIT
        ruby: XeroRuby::Accounting::CreditNote::ACCPAYCREDIT
        python_string: ACCPAYCREDIT
        java: com.xero.models.accounting.CreditNote.TypeEnum.ACCPAYCREDIT
        csharp: CreditNote.TypeEnum.ACCPAYCREDIT
        object: creditNote
      - nonString: true
        key: status
        keyPascal: Status
        default: AUTHORISED
        php: XeroAPI\XeroPHP\Models\Accounting\CreditNote::STATUS_AUTHORISED
        node: CreditNote.StatusEnum.AUTHORISED
        ruby: XeroRuby::Accounting::CreditNote::AUTHORISED
        python_string: AUTHORISED
        java: com.xero.models.accounting.CreditNote.StatusEnum.AUTHORISED
        csharp: CreditNote.StatusEnum.AUTHORISED
        object: creditNote
      - key: reference
        keyPascal: Reference
        default: My ref.
        object: creditNote
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: creditNote
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: currDate
        python: curr_date
        ruby: curr_date
        object: creditNote
      - is_last: true
        is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        default: lineItems
        python: line_items
        ruby: line_items
        object: creditNote
      - is_object: true
        key: creditNotes
        keyPascal: CreditNotes
      - is_last: true
        is_array_add: true
        key: creditNotes
        keyPascal: CreditNotes
        keySnake: credit_notes
        java: CreditNotes
        python: credit_note
        ruby: credit_note
        csharp: CreditNote
        object: creditNote
      parameters:
      - $ref: '#/components/parameters/CreditNoteID'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Credit Notes array with updated
            CreditNote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNotes'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        description: an array of Credit Notes containing credit note details to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNotes'
  /CreditNotes/{CreditNoteID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getCreditNoteAttachments
      summary: Retrieves attachments for a specific credit notes
      parameters:
      - $ref: '#/components/parameters/CreditNoteID'
      responses:
        '200':
          description: Success - return response of type Attachments array with all
            Attachment for specific Credit Note
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
  /CreditNotes/{CreditNoteID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getCreditNoteAttachmentById
      summary: Retrieves a specific attachment from a specific credit note using a
        unique attachment Id
      parameters:
      - $ref: '#/components/parameters/CreditNoteID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Credit Note as
            binary data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /CreditNotes/{CreditNoteID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getCreditNoteAttachmentByFileName
      summary: Retrieves a specific attachment on a specific credit note by file name
      parameters:
      - $ref: '#/components/parameters/CreditNoteID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Credit Note as
            binary data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updateCreditNoteAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Updates attachments on a specific credit note by file name
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/CreditNoteID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array with updated
            Attachment for specific Credit Note
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createCreditNoteAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Creates an attachment for a specific credit note
      parameters:
      - $ref: '#/components/parameters/CreditNoteID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/includeOnline'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Attachments array with newly
            created Attachment for specific Credit Note
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /CreditNotes/{CreditNoteID}/pdf:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getCreditNoteAsPdf
      x-path: /CreditNotes/{CreditNoteID}
      summary: Retrieves credit notes as PDF files
      parameters:
      - $ref: '#/components/parameters/CreditNoteID'
      responses:
        '200':
          description: Success - return response of binary data from the Attachment
            to a Credit Note
          content:
            application/pdf:
              schema:
                type: string
                format: binary
  /CreditNotes/{CreditNoteID}/Allocations:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createCreditNoteAllocation
      summary: Creates allocation for a specific credit note
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: currDate
        keyPascal: CurrDate
        keySnake: curr_date
        java_datatype: LocalDate
        default: LocalDate.now()
        java: LocalDate.now()
        csharp: DateTime.Now
        node: '''2020-12-10'''
        php: new DateTime('2020-12-10')
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: invoice
        keyPascal: Invoice
      - is_last: true
        is_uuid: true
        key: invoiceID
        keyPascal: InvoiceID
        default: 00000000-0000-0000-0000-000000000000
        object: invoice
      - is_object: true
        key: allocation
        keyPascal: Allocation
      - nonString: true
        key: amount
        keyPascal: Amount
        default: 1.0
        is_money: true
        csharp: new decimal(1.0)
        object: allocation
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: currDate
        python: curr_date
        ruby: curr_date
        object: allocation
      - is_last: true
        is_variable: true
        nonString: true
        key: invoice
        keyPascal: Invoice
        default: invoice
        object: allocation
      - is_object: true
        key: allocations
        keyPascal: Allocations
      - is_last: true
        is_array_add: true
        key: allocations
        keyPascal: Allocations
        java: Allocations
        csharp: Allocation
        object: allocation
      parameters:
      - $ref: '#/components/parameters/CreditNoteID'
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Allocations array with newly
            created Allocation for specific Credit Note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Allocations'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        description: Allocations with array of Allocation object in body of request.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Allocations'
  /CreditNotes/{CreditNoteID}/Allocations/{AllocationID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    delete:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: deleteCreditNoteAllocations
      summary: Deletes an Allocation from a Credit Note
      parameters:
      - $ref: '#/components/parameters/CreditNoteID'
      - $ref: '#/components/parameters/AllocationID'
      responses:
        '200':
          description: Success - return response of type Allocation with the isDeleted
            flag as true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Allocation'
  /CreditNotes/{CreditNoteID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getCreditNoteHistory
      summary: Retrieves history records of a specific credit note
      parameters:
      - $ref: '#/components/parameters/CreditNoteID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createCreditNoteHistory
      summary: Retrieves history records of a specific credit note
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/CreditNoteID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /Currencies:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getCurrencies
      summary: Retrieves currencies for your Xero organisation
      parameters:
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Code==\"USD\"
        x-example-php: Code==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\CurrencyCode::USD
          . &apos;&quot;
        x-example-ruby: Code==#{XeroRuby::Accounting::CurrencyCode::USD}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type Currencies array with all
            Currencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currencies'
    put:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: createCurrency
      summary: Create a new currency for a Xero organisation
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: currency
        keyPascal: Currency
      - nonString: true
        key: code
        keyPascal: Code
        default: USD
        php: XeroAPI\XeroPHP\Models\Accounting\CurrencyCode::USD
        node: CurrencyCode.USD
        ruby: XeroRuby::Accounting::CurrencyCode::USD
        python: CurrencyCode.USD
        java: com.xero.models.accounting.CurrencyCode.USD
        csharp: CurrencyCode.USD
        object: currency
      - is_last: true
        key: description
        keyPascal: Description
        default: United States Dollar
        object: currency
      responses:
        '200':
          description: Unsupported - return response incorrect exception, API is not
            able to create new Currency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currencies'
      requestBody:
        required: true
        description: Currency object in the body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
  /Employees:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getEmployees
      summary: Retrieves employees used in Xero payrun
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"ACTIVE\"
        x-example-java: Status==&quot;&apos; + Employee.StatusEnum.ACTIVE + &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\Employee::STATUS_ACTIVE
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::Employee::ACTIVE}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type Employees array with all
            Employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
    put:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: createEmployees
      summary: Creates new employees used in Xero payrun
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: employee
        keyPascal: Employee
      - key: firstName
        keyPascal: FirstName
        keySnake: first_name
        default: Nick
        object: employee
      - is_last: true
        key: lastName
        keyPascal: LastName
        keySnake: last_name
        default: Fury
        object: employee
      - is_object: true
        key: employees
        keyPascal: Employees
      - is_last: true
        is_array_add: true
        key: employees
        keyPascal: Employees
        java: Employees
        csharp: Employee
        object: employee
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Employees array with new
            Employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Employees with array of Employee object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employees'
    post:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: updateOrCreateEmployees
      summary: Creates a single new employees used in Xero payrun
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: employee
        keyPascal: Employee
      - key: firstName
        keyPascal: FirstName
        keySnake: first_name
        default: Nick
        object: employee
      - is_last: true
        key: lastName
        keyPascal: LastName
        keySnake: last_name
        default: Fury
        object: employee
      - is_object: true
        key: employees
        keyPascal: Employees
      - is_last: true
        is_array_add: true
        key: employees
        keyPascal: Employees
        java: Employees
        csharp: Employee
        object: employee
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Employees array with new
            Employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Employees with array of Employee object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employees'
  /Employees/{EmployeeID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getEmployee
      summary: Retrieves a specific employee used in Xero payrun using a unique employee
        Id
      parameters:
      - $ref: '#/components/parameters/EmployeeID'
      responses:
        '200':
          description: Success - return response of type Employees array with specified
            Employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
  /ExpenseClaims:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getExpenseClaims
      summary: Retrieves expense claims
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"SUBMITTED\"
        x-example-java: Status==&quot;&apos; + ExpenseClaim.StatusEnum.SUBMITTED +
          &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\ExpenseClaim::STATUS_SUBMITTED
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::ExpenseClaim::SUBMITTED}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type ExpenseClaims array with
            all ExpenseClaims
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseClaims'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createExpenseClaims
      summary: Creates expense claims
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: currDate
        keyPascal: CurrDate
        keySnake: curr_date
        java_datatype: LocalDate
        default: LocalDate.now()
        java: LocalDate.now()
        csharp: DateTime.Now
        node: '''2020-12-10'''
        php: new DateTime('2020-12-10')
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: user
        keyPascal: User
      - is_last: true
        is_uuid: true
        key: userID
        keyPascal: UserID
        keySnake: user_id
        default: 00000000-0000-0000-0000-000000000000
        object: user
      - is_object: true
        key: receipt
        keyPascal: Receipt
      - is_uuid: true
        key: receiptID
        keyPascal: ReceiptID
        keySnake: receipt_id
        default: 00000000-0000-0000-0000-000000000000
        object: receipt
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: currDate
        python: curr_date
        ruby: curr_date
        object: receipt
      - is_list: true
        key: receipts
        keyPascal: Receipt
      - is_last: true
        is_list_add: true
        key: receipts
        keyPascal: Receipts
        object: receipt
      - is_object: true
        key: expenseClaim
        keyPascal: ExpenseClaim
        keySnake: expense_claim
      - nonString: true
        key: status
        keyPascal: Status
        default: SUBMITTED
        php: XeroAPI\XeroPHP\Models\Accounting\ExpenseClaim::STATUS_SUBMITTED
        node: ExpenseClaim.StatusEnum.SUBMITTED
        ruby: XeroRuby::Accounting::ExpenseClaim::SUBMITTED
        python_string: SUBMITTED
        java: com.xero.models.accounting.ExpenseClaim.StatusEnum.SUBMITTED
        csharp: ExpenseClaim.StatusEnum.SUBMITTED
        object: expenseClaim
      - is_variable: true
        nonString: true
        key: user
        keyPascal: User
        default: user
        object: expenseClaim
      - is_last: true
        is_variable: true
        nonString: true
        key: receipts
        keyPascal: Receipts
        default: receipts
        object: expenseClaim
      - is_object: true
        key: expenseClaims
        keyPascal: ExpenseClaims
      - is_array_add: true
        is_last: true
        key: expenseClaims
        keyPascal: ExpenseClaims
        keySnake: expense_claims
        java: ExpenseClaims
        python: expense_claim
        ruby: expense_claim
        csharp: ExpenseClaim
        object: expenseClaim
      requestBody:
        required: true
        description: ExpenseClaims with array of ExpenseClaim object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseClaims'
      responses:
        '200':
          description: Success - return response of type ExpenseClaims array with
            newly created ExpenseClaim
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseClaims'
        '400':
          $ref: '#/components/responses/400Error'
  /ExpenseClaims/{ExpenseClaimID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getExpenseClaim
      summary: Retrieves a specific expense claim using a unique expense claim Id
      parameters:
      - $ref: '#/components/parameters/ExpenseClaimID'
      responses:
        '200':
          description: Success - return response of type ExpenseClaims array with
            specified ExpenseClaim
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseClaims'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateExpenseClaim
      summary: Updates a specific expense claims
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: currDate
        keyPascal: CurrDate
        keySnake: curr_date
        java_datatype: LocalDate
        default: LocalDate.now()
        java: LocalDate.now()
        csharp: DateTime.Now
        node: '''2020-12-10'''
        php: new DateTime('2020-12-10')
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: user
        keyPascal: User
      - is_last: true
        is_uuid: true
        key: userID
        keyPascal: UserID
        keySnake: user_id
        default: 00000000-0000-0000-0000-000000000000
        object: user
      - is_object: true
        key: receipt
        keyPascal: Receipt
      - is_uuid: true
        key: receiptID
        keyPascal: ReceiptID
        keySnake: receipt_id
        default: 00000000-0000-0000-0000-000000000000
        object: receipt
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: currDate
        python: curr_date
        ruby: curr_date
        object: receipt
      - is_list: true
        key: receipts
        keyPascal: Receipt
      - is_last: true
        is_list_add: true
        key: receipts
        keyPascal: Receipts
        object: receipt
      - is_object: true
        key: expenseClaim
        keyPascal: ExpenseClaim
        keySnake: expense_claim
      - nonString: true
        key: status
        keyPascal: Status
        default: SUBMITTED
        php: XeroAPI\XeroPHP\Models\Accounting\ExpenseClaim::STATUS_SUBMITTED
        node: ExpenseClaim.StatusEnum.SUBMITTED
        ruby: XeroRuby::Accounting::ExpenseClaim::SUBMITTED
        python_string: SUBMITTED
        java: com.xero.models.accounting.ExpenseClaim.StatusEnum.SUBMITTED
        csharp: ExpenseClaim.StatusEnum.SUBMITTED
        object: expenseClaim
      - is_variable: true
        nonString: true
        key: user
        keyPascal: User
        default: user
        object: expenseClaim
      - is_last: true
        is_variable: true
        nonString: true
        key: receipts
        keyPascal: Receipts
        default: receipts
        object: expenseClaim
      - is_object: true
        key: expenseClaims
        keyPascal: ExpenseClaims
      - is_array_add: true
        is_last: true
        key: expenseClaims
        keyPascal: ExpenseClaims
        keySnake: expense_claims
        java: ExpenseClaims
        python: expense_claim
        ruby: expense_claim
        csharp: ExpenseClaim
        object: expenseClaim
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ExpenseClaimID'
      responses:
        '200':
          description: Success - return response of type ExpenseClaims array with
            updated ExpenseClaim
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseClaims'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseClaims'
  /ExpenseClaims/{ExpenseClaimID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getExpenseClaimHistory
      summary: Retrieves history records of a specific expense claim
      parameters:
      - $ref: '#/components/parameters/ExpenseClaimID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createExpenseClaimHistory
      summary: Creates a history record for a specific expense claim
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ExpenseClaimID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /Invoices:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getInvoices
      summary: Retrieves sales invoices or purchase bills
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-java: Status==&quot;&apos; + Invoice.StatusEnum.DRAFT + &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\Invoice::STATUS_DRAFT
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::Invoice::DRAFT}
        x-example-csharp: Status==\"DRAFT\"
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: IDs
        x-snake: ids
        description: Filter by a comma-separated list of InvoicesIDs.
        style: form
        explode: false
        x-example-java: Arrays.asList(UUID.fromString("00000000-0000-0000-0000-000000000000"))
        x-example-php: '&quot;00000000-0000-0000-0000-000000000000&quot;'
        x-example-csharp: new List&lt;Guid&gt;{Guid.Parse("00000000-0000-0000-0000-000000000000")};
        schema:
          type: array
          items:
            type: string
            format: uuid
      - in: query
        name: InvoiceNumbers
        x-snake: invoice_numbers
        description: Filter by a comma-separated list of InvoiceNumbers.
        style: form
        explode: false
        x-example-java: Arrays.asList("INV-001","INV-002")
        x-example-php: '&quot;INV-001&quot;, &quot;INV-002&quot;'
        x-example-csharp: new List&lt;string&gt;{&quotINV-001&quot,&quotINV-002&quot};
        schema:
          type: array
          items:
            type: string
      - in: query
        name: ContactIDs
        x-snake: contact_ids
        description: Filter by a comma-separated list of ContactIDs.
        style: form
        explode: false
        x-example-java: Arrays.asList(UUID.fromString("00000000-0000-0000-0000-000000000000"))
        x-example-php: '&quot;00000000-0000-0000-0000-000000000000&quot;'
        x-example-csharp: new List&lt;Guid&gt;{Guid.Parse(&quot00000000-0000-0000-0000-000000000000&quot)};
        schema:
          type: array
          items:
            type: string
            format: uuid
      - in: query
        name: Statuses
        x-snake: statuses
        description: Filter by a comma-separated list Statuses. For faster response
          times we recommend using these explicit parameters instead of passing OR
          conditions into the Where filter.
        explode: false
        x-example-java: Arrays.asList("DRAFT","SUBMITTED")
        x-example-php: '&quot;DRAFT&quot;, &quot;SUBMITTED&quot;'
        x-example-csharp: new List&lt;string&gt;{&quotDRAFT&quot,&quotSUBMITTED&quot};
        schema:
          type: array
          items:
            type: string
      - in: query
        name: page
        description: "e.g. page=1 \u2013 Up to 100 invoices will be returned in a\
          \ single API call with line items shown for each invoice"
        schema:
          type: integer
      - in: query
        name: includeArchived
        x-snake: include_archived
        description: e.g. includeArchived=true - Invoices with a status of ARCHIVED
          will be included in the response
        x-example-python: 'True'
        schema:
          type: boolean
      - in: query
        name: createdByMyApp
        x-snake: created_by_my_app
        description: When set to true you'll only retrieve Invoices created by your
          app
        x-example-python: 'False'
        schema:
          type: boolean
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/summaryOnly'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/searchTerm'
      responses:
        '200':
          description: Success - return response of type Invoices array with all Invoices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createInvoices
      summary: Creates one or more sales invoices or purchase bills
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.of(2020, Month.OCTOBER, 10)
        csharp: new DateTime(2020, 10, 10)
        php: new DateTime('2020-10-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-10-10T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_date: true
        key: dueDateValue
        keyPascal: Date
        keySnake: due_date_value
        java_datatype: LocalDate
        csharp_datatype: DateTime
        default: LocalDate.of(2020, Month.OCTOBER, 28)
        java: LocalDate.of(2020, Month.OCTOBER, 28)
        csharp: new DateTime(2020, 10, 10)
        php: new DateTime('2020-10-28')
        node: '''2020-10-28'''
        python: dateutil.parser.parse('2020-10-28T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItemTracking
        keyPascal: LineItemTracking
        keySnake: line_item_tracking
      - is_uuid: true
        key: trackingCategoryID
        keyPascal: TrackingCategoryID
        keySnake: tracking_category_id
        default: 00000000-0000-0000-0000-000000000000
        object: lineItemTracking
      - is_last: true
        is_uuid: true
        key: trackingOptionID
        keyPascal: TrackingOptionID
        keySnake: tracking_option_id
        default: 00000000-0000-0000-0000-000000000000
        object: lineItemTracking
      - is_list: true
        key: lineItemTrackings
        keyPascal: LineItemTracking
        keySnake: line_item_trackings
      - is_last: true
        is_list_add: true
        key: lineItemTrackings
        keyPascal: LineItemTrackings
        keySnake: line_item_trackings
        python: line_item_tracking
        ruby: line_item_tracking
        object: lineItemTracking
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_last: true
        nonString: true
        key: tracking
        keyPascal: Tracking
        default: lineItemTrackings
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: invoice
        keyPascal: Invoice
      - nonString: true
        key: type
        keyPascal: Type
        default: ACCREC
        php: XeroAPI\XeroPHP\Models\Accounting\Invoice::TYPE_ACCREC
        node: Invoice.TypeEnum.ACCREC
        ruby: XeroRuby::Accounting::Invoice::ACCREC
        python_string: ACCREC
        java: com.xero.models.accounting.Invoice.TypeEnum.ACCREC
        csharp: Invoice.TypeEnum.ACCREC
        object: invoice
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: invoice
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: invoice
      - is_variable: true
        nonString: true
        key: dueDate
        keyPascal: DueDate
        keySnake: due_date
        default: dueDateValue
        python: due_date_value
        ruby: due_date_value
        object: invoice
      - is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        default: lineItems
        python: line_items
        ruby: line_items
        object: invoice
      - key: reference
        keyPascal: Reference
        default: Website Design
        object: invoice
      - is_last: true
        nonString: true
        key: status
        keyPascal: Status
        default: DRAFT
        php: XeroAPI\XeroPHP\Models\Accounting\Invoice::STATUS_DRAFT
        node: Invoice.StatusEnum.DRAFT
        ruby: XeroRuby::Accounting::Invoice::DRAFT
        python_string: DRAFT
        java: com.xero.models.accounting.Invoice.StatusEnum.DRAFT
        csharp: Invoice.StatusEnum.DRAFT
        object: invoice
      - is_object: true
        key: invoices
        keyPascal: Invoices
      - is_last: true
        is_array_add: true
        key: invoices
        keyPascal: Invoices
        java: Invoices
        csharp: Invoice
        object: invoice
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Invoices array with newly
            created Invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Invoices with an array of invoice objects in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoices'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateOrCreateInvoices
      summary: Updates or creates one or more sales invoices or purchase bills
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.of(2020, Month.OCTOBER, 10)
        csharp: new DateTime(2020, 10, 10)
        php: new DateTime('2020-10-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-10-10T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_date: true
        key: dueDateValue
        keyPascal: Date
        keySnake: due_date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 28)
        java: LocalDate.of(2020, Month.OCTOBER, 28)
        csharp: new DateTime(2020, 10, 10)
        php: new DateTime('2020-10-28')
        node: '''2020-10-28'''
        python: dateutil.parser.parse('2020-10-28T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: invoice
        keyPascal: Invoice
      - nonString: true
        key: type
        keyPascal: Type
        default: ACCREC
        php: XeroAPI\XeroPHP\Models\Accounting\Invoice::TYPE_ACCREC
        node: Invoice.TypeEnum.ACCREC
        ruby: XeroRuby::Accounting::Invoice::ACCREC
        python_string: ACCREC
        java: com.xero.models.accounting.Invoice.TypeEnum.ACCREC
        csharp: Invoice.TypeEnum.ACCREC
        object: invoice
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: invoice
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: invoice
      - is_variable: true
        nonString: true
        key: dueDate
        keyPascal: Date
        keySnake: due_date
        default: dueDateValue
        python: due_date_value
        ruby: due_date_value
        object: invoice
      - is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        default: lineItems
        python: line_items
        ruby: line_items
        object: invoice
      - key: reference
        keyPascal: Reference
        default: Website Design
        object: invoice
      - is_last: true
        nonString: true
        key: status
        keyPascal: Status
        default: DRAFT
        php: XeroAPI\XeroPHP\Models\Accounting\Invoice::STATUS_DRAFT
        node: Invoice.StatusEnum.DRAFT
        ruby: XeroRuby::Accounting::Invoice::DRAFT
        python_string: DRAFT
        java: com.xero.models.accounting.Invoice.StatusEnum.DRAFT
        csharp: Invoice.StatusEnum.DRAFT
        object: invoice
      - is_object: true
        key: invoices
        keyPascal: Invoices
      - is_last: true
        is_array_add: true
        key: invoices
        keyPascal: Invoices
        java: Invoices
        csharp: Invoice
        object: invoice
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Invoices array with newly
            created Invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoices'
  /Invoices/{InvoiceID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getInvoice
      summary: Retrieves a specific sales invoice or purchase bill using a unique
        invoice Id
      parameters:
      - $ref: '#/components/parameters/InvoiceID'
      - $ref: '#/components/parameters/unitdp'
      responses:
        '200':
          description: Success - return response of type Invoices array with specified
            Invoices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateInvoice
      summary: Updates a specific sales invoices or purchase bills
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: invoice
        keyPascal: Invoice
      - is_last: true
        key: reference
        keyPascal: Reference
        default: I am Iron man
        object: invoice
      - is_object: true
        key: invoices
        keyPascal: Invoices
      - is_last: true
        is_array_add: true
        key: invoices
        keyPascal: Invoices
        java: Invoices
        csharp: Invoice
        object: invoice
      parameters:
      - $ref: '#/components/parameters/InvoiceID'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Invoices array with updated
            Invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoices'
  /Invoices/{InvoiceID}/pdf:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getInvoiceAsPdf
      x-path: /Invoices/{InvoiceID}
      summary: Retrieves invoices or purchase bills as PDF files
      parameters:
      - $ref: '#/components/parameters/InvoiceID'
      responses:
        '200':
          description: Success - return response of byte array pdf version of specified
            Invoices
          content:
            application/pdf:
              schema:
                type: string
                format: binary
  /Invoices/{InvoiceID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getInvoiceAttachments
      summary: Retrieves attachments for a specific invoice or purchase bill
      parameters:
      - $ref: '#/components/parameters/InvoiceID'
      responses:
        '200':
          description: Success - return response of type Attachments array of Attachments
            for specified Invoices
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
  /Invoices/{InvoiceID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getInvoiceAttachmentById
      summary: Retrieves a specific attachment from a specific invoices or purchase
        bills by using a unique attachment Id
      parameters:
      - $ref: '#/components/parameters/InvoiceID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Invoice as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /Invoices/{InvoiceID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getInvoiceAttachmentByFileName
      summary: Retrieves an attachment from a specific invoice or purchase bill by
        filename
      parameters:
      - $ref: '#/components/parameters/InvoiceID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Invoice as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updateInvoiceAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Updates an attachment from a specific invoices or purchase bill by
        filename
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/InvoiceID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array with updated
            Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createInvoiceAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Creates an attachment for a specific invoice or purchase bill by filename
      parameters:
      - $ref: '#/components/parameters/InvoiceID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/includeOnline'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Attachments array with newly
            created Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /Invoices/{InvoiceID}/OnlineInvoice:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getOnlineInvoice
      summary: Retrieves a URL to an online invoice
      parameters:
      - $ref: '#/components/parameters/InvoiceID'
      responses:
        '200':
          description: Success - return response of type OnlineInvoice array with
            one OnlineInvoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlineInvoices'
  /Invoices/{InvoiceID}/Email:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: emailInvoice
      summary: Sends a copy of a specific invoice to related contact via email
      x-hasAccountingValidationError: true
      x-example:
      - is_last: true
        is_object: true
        key: requestEmpty
        keyPascal: RequestEmpty
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/InvoiceID'
      responses:
        '204':
          description: Success - return response 204 no content
          x-isEmpty: true
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEmpty'
  /Invoices/{InvoiceID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getInvoiceHistory
      summary: Retrieves history records for a specific invoice
      parameters:
      - $ref: '#/components/parameters/InvoiceID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createInvoiceHistory
      summary: Creates a history record for a specific invoice
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/InvoiceID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /InvoiceReminders/Settings:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getInvoiceReminders
      summary: Retrieves invoice reminder settings
      responses:
        '200':
          description: Success - return response of Invoice Reminders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceReminders'
  /Items:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getItems
      summary: Retrieves items
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - $ref: '#/components/parameters/unitdp'
      responses:
        '200':
          description: Success - return response of type Items array with all Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
    put:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: createItems
      summary: Creates one or more items
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: purchaseDetails
        keyPascal: Purchase
        keySnake: purchase_details
      - is_last: true
        key: cOGSAccountCode
        keyPascal: CoGSAccountCode
        keySnake: cogs_account_code
        keyCsharp: COGSAccountCode
        default: 500
        object: purchaseDetails
      - is_object: true
        key: item
        keyPascal: Item
      - key: code
        keyPascal: Code
        default: abcXYZ123
        object: item
      - key: name
        keyPascal: Name
        default: HelloWorld
        object: item
      - key: description
        keyPascal: Description
        default: Foobar
        object: item
      - key: inventoryAssetAccountCode
        keyPascal: InventoryAssetAccountCode
        keySnake: inventory_asset_account_code
        default: 140
        object: item
      - is_last: true
        is_variable: true
        nonString: true
        key: purchaseDetails
        keyPascal: PurchaseDetails
        keySnake: purchase_details
        default: purchaseDetails
        python: purchase_details
        ruby: purchase_details
        object: item
      - is_object: true
        key: items
        keyPascal: Items
      - is_last: true
        is_array_add: true
        key: items
        keyPascal: Items
        java: Items
        csharp: Item
        object: item
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Items array with newly created
            Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Items with an array of Item objects in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Items'
    post:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: updateOrCreateItems
      summary: Updates or creates one or more items
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: item
        keyPascal: Item
      - key: code
        keyPascal: Code
        default: abcXYZ123
        object: item
      - key: name
        keyPascal: Name
        default: HelloWorld
        object: item
      - is_last: true
        key: description
        keyPascal: Description
        default: Foobar
        object: item
      - is_object: true
        key: items
        keyPascal: Items
      - is_last: true
        is_array_add: true
        key: items
        keyPascal: Items
        java: Items
        csharp: Item
        object: item
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Items array with newly created
            Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Items'
  /Items/{ItemID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getItem
      summary: Retrieves a specific item using a unique item Id
      parameters:
      - $ref: '#/components/parameters/ItemID'
      - $ref: '#/components/parameters/unitdp'
      responses:
        '200':
          description: Success - return response of type Items array with specified
            Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
    post:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: updateItem
      summary: Updates a specific item
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: item
        keyPascal: Item
      - key: code
        keyPascal: Code
        default: ItemCode123
        object: item
      - is_last: true
        key: description
        keyPascal: Description
        default: Goodbye
        object: item
      - is_object: true
        key: items
        keyPascal: Items
      - is_last: true
        is_array_add: true
        key: items
        keyPascal: Items
        java: Items
        csharp: Item
        object: item
      parameters:
      - $ref: '#/components/parameters/ItemID'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Items array with updated
            Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Items'
    delete:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: deleteItem
      summary: Deletes a specific item
      parameters:
      - $ref: '#/components/parameters/ItemID'
      responses:
        '204':
          description: Success - return response 204 no content
          x-isEmpty: true
        '400':
          $ref: '#/components/responses/400Error'
  /Items/{ItemID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getItemHistory
      summary: Retrieves history for a specific item
      parameters:
      - $ref: '#/components/parameters/ItemID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: createItemHistory
      summary: Creates a history record for a specific item
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ItemID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /Journals:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.journals.read
      tags:
      - Accounting
      operationId: getJournals
      summary: Retrieves journals
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: offset
        description: Offset by a specified journal number. e.g. journals with a JournalNumber
          greater than the offset will be returned
        schema:
          type: integer
      - in: query
        name: paymentsOnly
        x-snake: payments_only
        description: Filter to retrieve journals on a cash basis. Journals are returned
          on an accrual basis by default.
        x-example-python: 'True'
        schema:
          type: boolean
      responses:
        '200':
          description: Success - return response of type Journals array with all Journals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journals'
  /Journals/{JournalID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.journals.read
      tags:
      - Accounting
      operationId: getJournal
      summary: Retrieves a specific journal using a unique journal Id.
      parameters:
      - $ref: '#/components/parameters/JournalID'
      responses:
        '200':
          description: Success - return response of type Journals array with specified
            Journal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journals'
  /Journals/{JournalNumber}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.journals.read
      tags:
      - Accounting
      operationId: getJournalByNumber
      summary: Retrieves a specific journal using a unique journal number.
      parameters:
      - $ref: '#/components/parameters/JournalNumber'
      responses:
        '200':
          description: Success - return response of type Journals array with specified
            Journal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journals'
  /LinkedTransactions:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getLinkedTransactions
      summary: Retrieves linked transactions (billable expenses)
      parameters:
      - in: query
        name: page
        description: Up to 100 linked transactions will be returned in a single API
          call. Use the page parameter to specify the page to be returned e.g. page=1.
        schema:
          type: integer
      - in: query
        name: LinkedTransactionID
        x-snake: linked_transaction_id
        description: The Xero identifier for an Linked Transaction
        schema:
          type: string
          format: uuid
      - in: query
        name: SourceTransactionID
        x-snake: source_transaction_id
        description: Filter by the SourceTransactionID. Get the linked transactions
          created from a particular ACCPAY invoice
        schema:
          type: string
          format: uuid
      - in: query
        name: ContactID
        x-snake: contact_id
        description: Filter by the ContactID. Get all the linked transactions that
          have been assigned to a particular customer.
        schema:
          type: string
          format: uuid
      - in: query
        name: Status
        x-snake: status
        description: Filter by the combination of ContactID and Status. Get  the linked
          transactions associated to a  customer and with a status
        schema:
          type: string
      - in: query
        name: TargetTransactionID
        x-snake: target_transaction_id
        description: Filter by the TargetTransactionID. Get all the linked transactions
          allocated to a particular ACCREC invoice
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success - return response of type LinkedTransactions array
            with all LinkedTransaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedTransactions'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createLinkedTransaction
      summary: Creates linked transactions (billable expenses)
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: linkedTransaction
        keyPascal: LinkedTransaction
        keySnake: linked_transaction
      - is_uuid: true
        key: sourceTransactionID
        keyPascal: SourceTransactionID
        keySnake: source_transaction_id
        default: 00000000-0000-0000-0000-000000000000
        object: linkedTransaction
      - is_last: true
        is_uuid: true
        key: sourceLineItemID
        keyPascal: SourceLineItemID
        keySnake: source_line_item_id
        default: 00000000-0000-0000-0000-000000000000
        object: linkedTransaction
      responses:
        '200':
          description: Success - return response of type LinkedTransactions array
            with newly created LinkedTransaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedTransactions'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: LinkedTransaction object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkedTransaction'
  /LinkedTransactions/{LinkedTransactionID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getLinkedTransaction
      summary: Retrieves a specific linked transaction (billable expenses) using a
        unique linked transaction Id
      parameters:
      - $ref: '#/components/parameters/LinkedTransactionID'
      responses:
        '200':
          description: Success - return response of type LinkedTransactions array
            with a specified LinkedTransaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedTransactions'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateLinkedTransaction
      summary: Updates a specific linked transactions (billable expenses)
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: linkedTransaction
        keyPascal: LinkedTransaction
        keySnake: linked_transaction
      - is_uuid: true
        key: sourceLineItemID
        keyPascal: SourceLineItemID
        keySnake: source_line_item_id
        default: 00000000-0000-0000-0000-000000000000
        object: linkedTransaction
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        default: 00000000-0000-0000-0000-000000000000
        object: linkedTransaction
      - is_object: true
        key: linkedTransactions
        keyPascal: LinkedTransactions
      - is_last: true
        is_array_add: true
        key: linkedTransactions
        keyPascal: LinkedTransactions
        keySnake: linked_transactions
        java: LinkedTransactions
        python: linked_transaction
        ruby: linked_transaction
        csharp: LinkedTransaction
        object: linkedTransaction
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/LinkedTransactionID'
      responses:
        '200':
          description: Success - return response of type LinkedTransactions array
            with updated LinkedTransaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedTransactions'
        '400':
          description: Success - return response of type LinkedTransactions array
            with updated LinkedTransaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkedTransactions'
    delete:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: deleteLinkedTransaction
      summary: Deletes a specific linked transactions (billable expenses)
      parameters:
      - $ref: '#/components/parameters/LinkedTransactionID'
      responses:
        '204':
          description: Success - return response 204 no content
          x-isEmpty: true
        '400':
          $ref: '#/components/responses/400Error'
  /ManualJournals:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getManualJournals
      summary: Retrieves manual journals
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"DRAFT\"
        x-example-java: Status==&quot;&apos; + ManualJournal.StatusEnum.DRAFT + &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\ManualJournal::STATUS_DRAFT
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::ManualJournal::DRAFT}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: page
        description: "e.g. page=1 \u2013 Up to 100 manual journals will be returned\
          \ in a single API call with line items shown for each overpayment"
        schema:
          type: integer
      - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success - return response of type ManualJournals array with
            a all ManualJournals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualJournals'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createManualJournals
      summary: Creates one or more manual journals
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.of(2020, Month.OCTOBER, 10)
        csharp: new DateTime(2020, 10, 10)
        php: new DateTime('2019-10-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_list: true
        key: manualJournalLines
        keyPascal: ManualJournalLine
        keySnake: manual_journal_lines
      - is_object: true
        key: credit
        keyPascal: ManualJournalLine
      - nonString: true
        key: lineAmount
        keyPascal: LineAmount
        keySnake: line_amount
        default: -100.0
        is_money: true
        object: credit
      - key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: 400
        object: credit
      - is_last: true
        key: description
        keyPascal: Description
        default: Hello there
        object: credit
      - is_last: true
        is_list_add: true
        key: manualJournalLines
        keyPascal: ManualJournalLine
        keySnake: manual_journal_lines
        object: credit
      - is_object: true
        key: debit
        keyPascal: ManualJournalLine
      - nonString: true
        key: lineAmount
        keyPascal: LineAmount
        keySnake: line_amount
        default: 100.0
        is_money: true
        object: debit
      - key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: 120
        object: debit
      - is_last: true
        key: description
        keyPascal: Description
        default: Hello there
        object: debit
      - is_last: true
        is_list_add: true
        key: manualJournalLines
        keyPascal: ManualJournalLine
        keySnake: manual_journal_lines
        object: debit
      - is_object: true
        key: manualJournal
        keyPascal: ManualJournal
        keySnake: manual_journal
      - key: narration
        keyPascal: Narration
        default: Foobar
        object: manualJournal
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: manualJournal
      - is_last: true
        is_variable: true
        nonString: true
        key: journalLines
        keyPascal: JournalLines
        keySnake: journal_lines
        default: manualJournalLines
        python: manual_journal_lines
        ruby: manual_journal_lines
        object: manualJournal
      - is_object: true
        key: manualJournals
        keyPascal: ManualJournals
      - is_last: true
        is_array_add: true
        key: manualJournals
        keyPascal: ManualJournals
        keySnake: manual_journals
        java: ManualJournals
        php: manualJournals
        python: manual_journal
        ruby: manual_journal
        csharp: ManualJournal
        object: manualJournal
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type ManualJournals array with
            newly created ManualJournal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualJournals'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: ManualJournals array with ManualJournal object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualJournals'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateOrCreateManualJournals
      summary: Updates or creates a single manual journal
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.of(2020, Month.OCTOBER, 10)
        csharp: new DateTime(2020, 10, 10)
        php: new DateTime('2020-10-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_list: true
        key: manualJournalLines
        keyPascal: ManualJournalLine
        keySnake: manual_journal_lines
      - is_object: true
        key: credit
        keyPascal: ManualJournalLine
      - nonString: true
        key: lineAmount
        keyPascal: LineAmount
        keySnake: line_amount
        default: -100.0
        is_money: true
        object: credit
      - key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: 400
        object: credit
      - is_last: true
        key: description
        keyPascal: Description
        default: Hello there
        object: credit
      - is_last: true
        is_list_add: true
        key: manualJournalLines
        keyPascal: ManualJournalLine
        keySnake: manual_journal_lines
        object: credit
      - is_object: true
        key: debit
        keyPascal: ManualJournalLine
      - nonString: true
        key: lineAmount
        keyPascal: LineAmount
        keySnake: line_amount
        default: 100.0
        is_money: true
        object: debit
      - key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: 120
        object: debit
      - is_last: true
        key: description
        keyPascal: Description
        default: Hello there
        object: debit
      - is_last: true
        is_list_add: true
        key: manualJournalLines
        keyPascal: ManualJournalLine
        keySnake: manual_journal_lines
        object: debit
      - is_object: true
        key: manualJournal
        keyPascal: ManualJournal
        keySnake: manual_journal
      - key: narration
        keyPascal: Narration
        default: Foobar
        object: manualJournal
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: manualJournal
      - is_last: true
        is_variable: true
        nonString: true
        key: manualJournalLines
        keyPascal: JournalLines
        keySnake: journal_lines
        default: manualJournalLines
        python: manual_journal_lines
        ruby: manual_journal_lines
        object: manualJournal
      - is_object: true
        key: manualJournals
        keyPascal: ManualJournals
      - is_last: true
        is_array_add: true
        key: manualJournals
        keyPascal: ManualJournals
        keySnake: manual_journals
        java: ManualJournals
        php: manualJournals
        python: manual_journal
        ruby: manual_journal
        csharp: ManualJournal
        object: manualJournal
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type ManualJournals array with
            newly created ManualJournal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualJournals'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: ManualJournals array with ManualJournal object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualJournals'
  /ManualJournals/{ManualJournalID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getManualJournal
      summary: Retrieves a specific manual journal
      parameters:
      - $ref: '#/components/parameters/ManualJournalID'
      responses:
        '200':
          description: Success - return response of type ManualJournals array with
            a specified ManualJournals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualJournals'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateManualJournal
      summary: Updates a specific manual journal
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.of(2020, Month.OCTOBER, 10)
        csharp: new DateTime(2020, 10, 10)
        php: new DateTime('2020-10-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_list: true
        key: manualJournalLines
        keyPascal: ManualJournalLine
        keySnake: manual_journal_lines
      - is_object: true
        key: credit
        keyPascal: ManualJournalLine
      - nonString: true
        key: lineAmount
        keyPascal: LineAmount
        keySnake: line_amount
        default: -100.0
        is_money: true
        object: credit
      - key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: 400
        object: credit
      - is_last: true
        key: description
        keyPascal: Description
        default: Hello there
        object: credit
      - is_last: true
        is_list_add: true
        key: manualJournalLines
        keyPascal: ManualJournalLine
        keySnake: manual_journal_lines
        object: credit
      - is_object: true
        key: debit
        keyPascal: ManualJournalLine
      - nonString: true
        key: lineAmount
        keyPascal: LineAmount
        keySnake: line_amount
        default: 100.0
        is_money: true
        object: debit
      - key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: 120
        object: debit
      - is_last: true
        key: description
        keyPascal: Description
        default: Hello there
        object: debit
      - is_last: true
        is_list_add: true
        key: manualJournalLines
        keyPascal: ManualJournalLine
        keySnake: manual_journal_lines
        object: debit
      - is_object: true
        key: manualJournal
        keyPascal: ManualJournal
        keySnake: manual_journal
      - key: narration
        keyPascal: Narration
        default: Foobar
        object: manualJournal
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: manualJournal
      - is_last: true
        is_variable: true
        nonString: true
        key: manualJournalLines
        keyPascal: JournalLines
        keySnake: journal_lines
        default: manualJournalLines
        python: manual_journal_lines
        ruby: manual_journal_lines
        object: manualJournal
      - is_object: true
        key: manualJournals
        keyPascal: ManualJournals
      - is_last: true
        is_array_add: true
        key: manualJournals
        keyPascal: ManualJournals
        keySnake: manual_journals
        java: ManualJournals
        php: manualJournals
        python: manual_journal
        ruby: manual_journal
        csharp: ManualJournal
        object: manualJournal
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ManualJournalID'
      responses:
        '200':
          description: Success - return response of type ManualJournals array with
            an updated ManualJournal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualJournals'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualJournals'
  /ManualJournals/{ManualJournalID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getManualJournalAttachments
      summary: Retrieves attachment for a specific manual journal
      parameters:
      - $ref: '#/components/parameters/ManualJournalID'
      responses:
        '200':
          description: Success - return response of type Attachments array with all
            Attachments for a ManualJournals
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
  /ManualJournals/{ManualJournalID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getManualJournalAttachmentById
      summary: Allows you to retrieve a specific attachment from a specific manual
        journal using a unique attachment Id
      parameters:
      - $ref: '#/components/parameters/ManualJournalID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Manual Journal
            as binary data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /ManualJournals/{ManualJournalID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getManualJournalAttachmentByFileName
      summary: Retrieves a specific attachment from a specific manual journal by file
        name
      parameters:
      - $ref: '#/components/parameters/ManualJournalID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Manual Journal
            as binary data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updateManualJournalAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Updates a specific attachment from a specific manual journal by file
        name
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ManualJournalID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array with an
            update Attachment for a ManualJournals
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createManualJournalAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Creates a specific attachment for a specific manual journal by file
        name
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ManualJournalID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array with a
            newly created Attachment for a ManualJournals
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /ManualJournals/{ManualJournalID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getManualJournalsHistory
      summary: Retrieves history for a specific manual journal
      parameters:
      - $ref: '#/components/parameters/ManualJournalID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createManualJournalHistoryRecord
      summary: Creates a history record for a specific manual journal
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ManualJournalID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /Organisation:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getOrganisations
      summary: Retrieves Xero organisation details
      responses:
        '200':
          description: Success - return response of type Organisation array with all
            Organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisations'
  /Organisation/Actions:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getOrganisationActions
      summary: Retrieves a list of the key actions your app has permission to perform
        in the connected Xero organisation.
      responses:
        '200':
          description: Success - return response of type Actions array with all key
            actions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actions'
  /Organisation/{OrganisationID}/CISSettings:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getOrganisationCISSettings
      summary: Retrieves the CIS settings for the Xero organistaion.
      parameters:
      - $ref: '#/components/parameters/OrganisationID'
      responses:
        '200':
          description: Success - return response of type Organisation array with specified
            Organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CISOrgSettings'
  /Overpayments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getOverpayments
      summary: Retrieves overpayments
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"AUTHORISED\"
        x-example-java: Status==&quot;&apos; + Overpayment.StatusEnum.AUTHORISED +
          &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\Overpayment::STATUS_AUTHORISED
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::Overpayment::AUTHORISED}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: page
        description: "e.g. page=1 \u2013 Up to 100 overpayments will be returned in\
          \ a single API call with line items shown for each overpayment"
        schema:
          type: integer
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success - return response of type Overpayments array with all
            Overpayments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Overpayments'
  /Overpayments/{OverpaymentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getOverpayment
      summary: Retrieves a specific overpayment using a unique overpayment Id
      parameters:
      - $ref: '#/components/parameters/OverpaymentID'
      responses:
        '200':
          description: Success - return response of type Overpayments array with specified
            Overpayments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Overpayments'
  /Overpayments/{OverpaymentID}/Allocations:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createOverpaymentAllocations
      summary: Creates a single allocation for a specific overpayment
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: currDate
        keyPascal: CurrDate
        keySnake: curr_date
        java_datatype: LocalDate
        default: LocalDate.now()
        java: LocalDate.now()
        csharp: DateTime.Now
        node: '''2020-12-10'''
        php: new DateTime('2020-12-10')
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: invoice
        keyPascal: Invoice
      - is_last: true
        is_uuid: true
        key: invoiceID
        keyPascal: InvoiceID
        keySnake: invoice_id
        default: 00000000-0000-0000-0000-000000000000
        object: invoice
      - is_object: true
        key: allocation
        keyPascal: Allocation
      - nonString: true
        key: amount
        keyPascal: Amount
        default: 1.0
        is_money: true
        object: allocation
      - is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: currDate
        python: curr_date
        ruby: curr_date
        object: allocation
      - is_last: true
        is_variable: true
        nonString: true
        key: invoice
        keyPascal: Invoice
        default: invoice
        object: allocation
      - is_object: true
        key: allocations
        keyPascal: Allocations
      - is_last: true
        is_array_add: true
        key: allocations
        keyPascal: Allocations
        java: Allocations
        csharp: Allocation
        object: allocation
      parameters:
      - $ref: '#/components/parameters/OverpaymentID'
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Allocations array with all
            Allocation for Overpayments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Allocations'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Allocations array with Allocation object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Allocations'
  /Overpayments/{OverpaymentID}/Allocations/{AllocationID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    delete:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: deleteOverpaymentAllocations
      summary: Deletes an Allocation from an overpayment
      parameters:
      - $ref: '#/components/parameters/OverpaymentID'
      - $ref: '#/components/parameters/AllocationID'
      responses:
        '200':
          description: Success - return response of type Allocation with the isDeleted
            flag as true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Allocation'
  /Overpayments/{OverpaymentID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getOverpaymentHistory
      summary: Retrieves history records of a specific overpayment
      parameters:
      - $ref: '#/components/parameters/OverpaymentID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createOverpaymentHistory
      summary: Creates a history record for a specific overpayment
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/OverpaymentID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          description: A failed request due to validation error - API is not able
            to create HistoryRecord for Overpayments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /Payments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPayments
      summary: Retrieves payments for invoices and credit notes
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"AUTHORISED\"
        x-example-java: Status==&quot;&apos; + Payment.StatusEnum.AUTHORISED + &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\Payment::STATUS_AUTHORISED
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::Payment::AUTHORISED}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: page
        description: Up to 100 payments will be returned in a single API call
        schema:
          type: integer
      - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success - return response of type Payments array for all Payments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createPayments
      summary: Creates multiple payments for invoices or credit notes
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.now()
        csharp: DateTime.Now
        php: new DateTime('2020-10-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-10-10T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: invoice
        keyPascal: Invoice
      - is_last: true
        is_uuid: true
        key: invoiceID
        keyPascal: InvoiceID
        keySnake: invoice_id
        default: 00000000-0000-0000-0000-000000000000
        object: invoice
      - is_object: true
        key: account
        keyPascal: Account
      - is_last: true
        is_uuid: true
        key: accountID
        keyPascal: AccountID
        keySnake: account_id
        default: 00000000-0000-0000-0000-000000000000
        object: account
      - is_object: true
        key: payment
        keyPascal: Payment
      - is_variable: true
        nonString: true
        key: invoice
        keyPascal: Invoice
        default: invoice
        object: payment
      - is_variable: true
        nonString: true
        key: account
        keyPascal: Account
        default: account
        object: payment
      - nonString: true
        key: amount
        keyPascal: Amount
        default: 1.0
        is_money: true
        object: payment
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: payment
      - is_object: true
        key: payments
        keyPascal: Payments
      - is_last: true
        is_array_add: true
        key: payments
        keyPascal: Payments
        java: Payments
        csharp: Payment
        object: payment
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Payments array for newly
            created Payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Payments array with Payment object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payments'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createPayment
      summary: Creates a single payment for invoice or credit notes
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.now()
        csharp: DateTime.Now
        php: new DateTime('2020-10-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-10-10T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: invoice
        keyPascal: Invoice
      - is_last: true
        is_uuid: true
        key: invoiceID
        keyPascal: InvoiceID
        keySnake: invoice_id
        default: 00000000-0000-0000-0000-000000000000
        object: invoice
      - is_object: true
        key: account
        keyPascal: Account
      - is_last: true
        is_uuid: true
        key: accountID
        keyPascal: AccountID
        keySnake: account_id
        default: 00000000-0000-0000-0000-000000000000
        object: account
      - is_object: true
        key: payment
        keyPascal: Payment
      - is_variable: true
        nonString: true
        key: invoice
        keyPascal: Invoice
        default: invoice
        object: payment
      - is_variable: true
        nonString: true
        key: account
        keyPascal: Account
        default: account
        object: payment
      - nonString: true
        key: amount
        keyPascal: Amount
        default: 1.0
        is_money: true
        object: payment
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: payment
      - is_object: true
        key: payments
        keyPascal: Payments
      - is_last: true
        is_array_add: true
        key: payments
        keyPascal: Payments
        java: Payments
        csharp: Payment
        object: payment
      responses:
        '200':
          description: Success - return response of type Payments array for newly
            created Payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Request body with a single Payment object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
  /Payments/{PaymentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPayment
      summary: Retrieves a specific payment for invoices and credit notes using a
        unique payment Id
      parameters:
      - $ref: '#/components/parameters/PaymentID'
      responses:
        '200':
          description: Success - return response of type Payments array for specified
            Payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: deletePayment
      summary: Updates a specific payment for invoices and credit notes
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: paymentDelete
        keyPascal: PaymentDelete
      - is_last: true
        key: status
        keyPascal: Status
        default: DELETED
        object: paymentDelete
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/PaymentID'
      responses:
        '200':
          description: Success - return response of type Payments array for updated
            Payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDelete'
  /Payments/{PaymentID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPaymentHistory
      summary: Retrieves history records of a specific payment
      parameters:
      - $ref: '#/components/parameters/PaymentID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createPaymentHistory
      summary: Creates a history record for a specific payment
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/PaymentID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          description: A failed request due to validation error - API is not able
            to create HistoryRecord for Payments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /PaymentServices:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - paymentservices
      tags:
      - Accounting
      operationId: getPaymentServices
      summary: Retrieves payment services
      x-excludeFromPreview: true
      responses:
        '200':
          description: Success - return response of type PaymentServices array for
            all PaymentService
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServices'
    put:
      security:
      - OAuth2:
        - paymentservices
      tags:
      - Accounting
      operationId: createPaymentService
      summary: Creates a payment service
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-excludeFromPreview: true
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: paymentService
        keyPascal: PaymentService
        keySnake: payment_service
      - key: paymentServiceName
        keyPascal: PaymentServiceName
        keySnake: payment_service_name
        default: ACME Payments
        object: paymentService
      - key: paymentServiceUrl
        keyPascal: PaymentServiceUrl
        keySnake: payment_service_url
        default: https://www.payupnow.com/
        object: paymentService
      - is_last: true
        key: payNowText
        keyPascal: PayNowText
        keySnake: pay_now_text
        default: Pay Now
        object: paymentService
      - is_object: true
        key: paymentServices
        keyPascal: PaymentServices
      - is_last: true
        is_array_add: true
        key: paymentServices
        keyPascal: PaymentServices
        java: PaymentServices
        csharp: PaymentService
        object: paymentService
      responses:
        '200':
          description: Success - return response of type PaymentServices array for
            newly created PaymentService
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServices'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: PaymentServices array with PaymentService object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentServices'
  /Prepayments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPrepayments
      summary: Retrieves prepayments
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"AUTHORISED\"
        x-example-java: Status==&quot;&apos; + Prepayment.StatusEnum.AUTHORISED +
          &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\Prepayment::STATUS_AUTHORISED
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::Prepayment::AUTHORISED}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: page
        description: "e.g. page=1 \u2013 Up to 100 prepayments will be returned in\
          \ a single API call with line items shown for each overpayment"
        schema:
          type: integer
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success - return response of type Prepayments array for all
            Prepayment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prepayments'
  /Prepayments/{PrepaymentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPrepayment
      summary: Allows you to retrieve a specified prepayments
      parameters:
      - $ref: '#/components/parameters/PrepaymentID'
      responses:
        '200':
          description: Success - return response of type Prepayments array for a specified
            Prepayment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prepayments'
  /Prepayments/{PrepaymentID}/Allocations:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createPrepaymentAllocations
      summary: Allows you to create an Allocation for prepayments
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: currDate
        keyPascal: CurrDate
        keySnake: curr_date
        java_datatype: LocalDate
        default: LocalDate.now()
        java: LocalDate.now()
        csharp: DateTime.Now
        node: '''2020-12-10'''
        php: new DateTime('2020-12-10')
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: invoice
        keyPascal: Invoice
      - is_last: true
        is_uuid: true
        key: invoiceID
        keyPascal: InvoiceID
        keySnake: invoice_id
        default: 00000000-0000-0000-0000-000000000000
        object: invoice
      - is_object: true
        key: allocation
        keyPascal: Allocation
      - is_variable: true
        nonString: true
        key: invoice
        keyPascal: Invoice
        default: invoice
        object: allocation
      - nonString: true
        key: amount
        keyPascal: Amount
        default: 1.0
        is_money: true
        object: allocation
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: currDate
        python: curr_date
        ruby: curr_date
        object: allocation
      - is_object: true
        key: allocations
        keyPascal: Allocations
      - is_last: true
        is_array_add: true
        key: allocations
        keyPascal: Allocations
        java: Allocations
        csharp: Allocation
        object: allocation
      parameters:
      - $ref: '#/components/parameters/PrepaymentID'
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Allocations array of Allocation
            for all Prepayment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Allocations'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Allocations with an array of Allocation object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Allocations'
  /Prepayments/{PrepaymentID}/Allocations/{AllocationID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    delete:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: deletePrepaymentAllocations
      summary: Deletes an Allocation from a Prepayment
      parameters:
      - $ref: '#/components/parameters/PrepaymentID'
      - $ref: '#/components/parameters/AllocationID'
      responses:
        '200':
          description: Success - return response of type Allocation with the isDeleted
            flag as true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Allocation'
  /Prepayments/{PrepaymentID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPrepaymentHistory
      summary: Retrieves history record for a specific prepayment
      parameters:
      - $ref: '#/components/parameters/PrepaymentID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createPrepaymentHistory
      summary: Creates a history record for a specific prepayment
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/PrepaymentID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          description: Unsupported - return response incorrect exception, API is not
            able to create HistoryRecord for Expense Claims
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /PurchaseOrders:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPurchaseOrders
      summary: Retrieves purchase orders
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: Status
        x-snake: status
        description: Filter by purchase order status
        schema:
          type: string
          enum:
          - DRAFT
          - SUBMITTED
          - AUTHORISED
          - BILLED
          - DELETED
      - in: query
        name: DateFrom
        x-snake: date_from
        description: Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31
        schema:
          type: string
      - in: query
        name: DateTo
        x-snake: date_to
        description: Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: page
        description: To specify a page, append the page parameter to the URL e.g.
          ?page=1. If there are 100 records in the response you will need to check
          if there is any more data by fetching the next page e.g ?page=2 and continuing
          this process until no more results are returned.
        schema:
          type: integer
      - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success - return response of type PurchaseOrder array of all
            PurchaseOrder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrders'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createPurchaseOrders
      summary: Creates one or more purchase orders
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.now()
        csharp: DateTime.Now
        php: new DateTime('2020-12-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: purchaseOrder
        keyPascal: PurchaseOrder
        keySnake: purchase_order
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: purchaseOrder
      - is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        default: lineItems
        python: line_items
        ruby: line_items
        object: purchaseOrder
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: purchaseOrder
      - is_object: true
        key: purchaseOrders
        keyPascal: PurchaseOrders
      - is_last: true
        is_array_add: true
        key: purchaseOrders
        keyPascal: PurchaseOrders
        keySnake: purchase_orders
        java: PurchaseOrders
        python: purchase_order
        ruby: purchase_order
        csharp: PurchaseOrder
        object: purchaseOrder
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type PurchaseOrder array for specified
            PurchaseOrder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrders'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: PurchaseOrders with an array of PurchaseOrder object in body
          of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrders'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateOrCreatePurchaseOrders
      summary: Updates or creates one or more purchase orders
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.now()
        csharp: DateTime.Now
        php: new DateTime('2020-12-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: purchaseOrder
        keyPascal: PurchaseOrder
        keySnake: purchase_order
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: purchaseOrder
      - is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        default: lineItems
        python: line_items
        ruby: line_items
        object: purchaseOrder
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: purchaseOrder
      - is_object: true
        key: purchaseOrders
        keyPascal: PurchaseOrders
      - is_last: true
        is_array_add: true
        key: purchaseOrders
        keyPascal: PurchaseOrders
        keySnake: purchase_orders
        java: PurchaseOrders
        python: purchase_order
        ruby: purchase_order
        csharp: PurchaseOrder
        object: purchaseOrder
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type PurchaseOrder array for specified
            PurchaseOrder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrders'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrders'
  /PurchaseOrders/{PurchaseOrderID}/pdf:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPurchaseOrderAsPdf
      x-path: /PurchaseOrders/{PurchaseOrderID}
      summary: Retrieves specific purchase order as PDF files using a unique purchase
        order Id
      parameters:
      - $ref: '#/components/parameters/PurchaseOrderID'
      responses:
        '200':
          description: Success - return response of byte array pdf version of specified
            Purchase Orders
          content:
            application/pdf:
              schema:
                type: string
                format: binary
  /PurchaseOrders/{PurchaseOrderID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPurchaseOrder
      summary: Retrieves a specific purchase order using a unique purchase order Id
      parameters:
      - $ref: '#/components/parameters/PurchaseOrderID'
      responses:
        '200':
          description: Success - return response of type PurchaseOrder array for specified
            PurchaseOrder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrders'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updatePurchaseOrder
      summary: Updates a specific purchase order
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: purchaseOrder
        keyPascal: PurchaseOrder
        keySnake: purchase_order
      - is_last: true
        key: attentionTo
        keyPascal: AttentionTo
        default: Peter Parker
        object: purchaseOrder
      - is_object: true
        key: purchaseOrders
        keyPascal: PurchaseOrders
      - is_last: true
        is_array_add: true
        key: purchaseOrders
        keyPascal: PurchaseOrders
        keySnake: purchase_orders
        java: PurchaseOrders
        python: purchase_order
        ruby: purchase_order
        csharp: PurchaseOrder
        object: purchaseOrder
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/PurchaseOrderID'
      responses:
        '200':
          description: Success - return response of type PurchaseOrder array for updated
            PurchaseOrder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrders'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrders'
  /PurchaseOrders/{PurchaseOrderNumber}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPurchaseOrderByNumber
      summary: Retrieves a specific purchase order using purchase order number
      parameters:
      - required: true
        in: path
        name: PurchaseOrderNumber
        x-snake: purchase_order_number
        description: Unique identifier for a PurchaseOrder
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type PurchaseOrder array for specified
            PurchaseOrder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrders'
  /PurchaseOrders/{PurchaseOrderID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getPurchaseOrderHistory
      summary: Retrieves history for a specific purchase order
      parameters:
      - $ref: '#/components/parameters/PurchaseOrderID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createPurchaseOrderHistory
      summary: Creates a history record for a specific purchase orders
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/PurchaseOrderID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /PurchaseOrders/{PurchaseOrderID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getPurchaseOrderAttachments
      summary: Retrieves attachments for a specific purchase order
      parameters:
      - $ref: '#/components/parameters/PurchaseOrderID'
      responses:
        '200':
          description: Success - return response of type Attachments array of Purchase
            Orders
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
  /PurchaseOrders/{PurchaseOrderID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getPurchaseOrderAttachmentById
      summary: Retrieves specific attachment for a specific purchase order using a
        unique attachment Id
      parameters:
      - $ref: '#/components/parameters/PurchaseOrderID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Account as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getPurchaseOrderAttachmentByFileName
      summary: Retrieves a specific attachment for a specific purchase order by filename
      parameters:
      - $ref: '#/components/parameters/PurchaseOrderID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Purchase Order
            as binary data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updatePurchaseOrderAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Updates a specific attachment for a specific purchase order by filename
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/PurchaseOrderID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array of Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          description: Validation Error - some data was incorrect returns response
            of type Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createPurchaseOrderAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Creates attachment for a specific purchase order
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/PurchaseOrderID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array of Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /Quotes:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getQuotes
      summary: Retrieves sales quotes
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: DateFrom
        x-snake: date_from
        description: Filter for quotes after a particular date
        schema:
          type: string
          format: date
      - in: query
        name: DateTo
        x-snake: date_to
        description: Filter for quotes before a particular date
        schema:
          type: string
          format: date
      - in: query
        name: ExpiryDateFrom
        x-snake: expiry_date_from
        description: Filter for quotes expiring after a particular date
        schema:
          type: string
          format: date
      - in: query
        name: ExpiryDateTo
        x-snake: expiry_date_to
        description: Filter for quotes before a particular date
        schema:
          type: string
          format: date
      - in: query
        name: ContactID
        x-snake: contact_id
        description: Filter for quotes belonging to a particular contact
        schema:
          type: string
          format: uuid
      - in: query
        name: Status
        x-snake: status
        description: Filter for quotes of a particular Status
        schema:
          type: string
      - in: query
        name: page
        description: "e.g. page=1 \u2013 Up to 100 Quotes will be returned in a single\
          \ API call with line items shown for each quote"
        schema:
          type: integer
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: QuoteNumber
        x-snake: quote_number
        description: Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber=QU-0001)
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type quotes array with all quotes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotes'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createQuotes
      summary: Create one or more quotes
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.now()
        csharp: DateTime.Now
        php: new DateTime('2020-12-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: quote
        keyPascal: Quote
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: quote
      - is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        default: lineItems
        python: line_items
        ruby: line_items
        object: quote
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: quote
      - is_object: true
        key: quotes
        keyPascal: Quotes
      - is_last: true
        is_array_add: true
        key: quotes
        keyPascal: Quotes
        java: Quotes
        csharp: Quote
        object: quote
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Quotes with array with newly
            created Quote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotes'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Quotes with an array of Quote object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quotes'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateOrCreateQuotes
      summary: Updates or creates one or more quotes
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.now()
        csharp: DateTime.Now
        php: new DateTime('2020-12-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: quote
        keyPascal: Quote
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: quote
      - is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        default: lineItems
        python: line_items
        ruby: line_items
        object: quote
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: quote
      - is_object: true
        key: quotes
        keyPascal: Quotes
      - is_last: true
        is_array_add: true
        key: quotes
        keyPascal: Quotes
        java: Quotes
        csharp: Quote
        object: quote
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Quotes array with updated
            or created Quote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotes'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quotes'
  /Quotes/{QuoteID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getQuote
      summary: Retrieves a specific quote using a unique quote Id
      parameters:
      - $ref: '#/components/parameters/QuoteID'
      responses:
        '200':
          description: Success - return response of type Quotes array with specified
            Quote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotes'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateQuote
      summary: Updates a specific quote
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        keySnake: date_value
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.now()
        csharp: DateTime.Now
        php: new DateTime('2020-12-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-12-03T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: quote
        keyPascal: Quote
      - key: reference
        keyPascal: Reference
        default: I am an update
        object: quote
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: quote
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        python: date_value
        ruby: date_value
        object: quote
      - is_object: true
        key: quotes
        keyPascal: Quotes
      - is_last: true
        is_array_add: true
        key: quotes
        keyPascal: Quotes
        java: Quotes
        csharp: Quote
        object: quote
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/QuoteID'
      responses:
        '200':
          description: Success - return response of type Quotes array with updated
            Quote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotes'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quotes'
  /Quotes/{QuoteID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getQuoteHistory
      summary: Retrieves history records of a specific quote
      parameters:
      - $ref: '#/components/parameters/QuoteID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createQuoteHistory
      summary: Creates a history record for a specific quote
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/QuoteID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /Quotes/{QuoteID}/pdf:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getQuoteAsPdf
      x-path: /Quotes/{QuoteID}
      summary: Retrieves a specific quote as a PDF file using a unique quote Id
      parameters:
      - $ref: '#/components/parameters/QuoteID'
      responses:
        '200':
          description: Success - return response of byte array pdf version of specified
            Quotes
          content:
            application/pdf:
              schema:
                type: string
                format: binary
  /Quotes/{QuoteID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getQuoteAttachments
      summary: Retrieves attachments for a specific quote
      parameters:
      - $ref: '#/components/parameters/QuoteID'
      responses:
        '200':
          description: Success - return response of type Attachments array of Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
  /Quotes/{QuoteID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getQuoteAttachmentById
      summary: Retrieves a specific attachment from a specific quote using a unique
        attachment Id
      parameters:
      - $ref: '#/components/parameters/QuoteID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Quote as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /Quotes/{QuoteID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getQuoteAttachmentByFileName
      summary: Retrieves a specific attachment from a specific quote by filename
      parameters:
      - $ref: '#/components/parameters/QuoteID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Quote as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updateQuoteAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Updates a specific attachment from a specific quote by filename
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/QuoteID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array of Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          description: Validation Error - some data was incorrect returns response
            of type Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createQuoteAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Creates attachment for a specific quote
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/QuoteID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array of Attachment
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /Receipts:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getReceipts
      summary: Retrieves draft expense claim receipts for any user
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"DRAFT\"
        x-example-java: Status==&quot;&apos; + Receipt.StatusEnum.DRAFT + &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\Receipt::STATUS_DRAFT
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::Receipt::DRAFT}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - $ref: '#/components/parameters/unitdp'
      responses:
        '200':
          description: Success - return response of type Receipts array for all Receipt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipts'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createReceipt
      summary: Creates draft expense claim receipts for any user
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: contact
        keyPascal: Contact
      - is_last: true
        is_uuid: true
        key: contactID
        keyPascal: ContactID
        keySnake: contact_id
        default: 00000000-0000-0000-0000-000000000000
        object: contact
      - is_object: true
        key: user
        keyPascal: User
      - is_last: true
        is_uuid: true
        key: userID
        keyPascal: UserID
        keySnake: user_id
        default: 00000000-0000-0000-0000-000000000000
        object: user
      - is_object: true
        key: lineItem
        keyPascal: LineItem
        keySnake: line_item
      - key: description
        keyPascal: Description
        default: Foobar
        object: lineItem
      - nonString: true
        key: quantity
        keyPascal: Quantity
        default: 1.0
        is_money: true
        object: lineItem
      - nonString: true
        key: unitAmount
        keyPascal: UnitAmount
        keySnake: unit_amount
        default: 20.0
        is_money: true
        object: lineItem
      - is_last: true
        key: accountCode
        keyPascal: AccountCode
        keySnake: account_code
        default: '000'
        object: lineItem
      - is_list: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        csharp: LineItem
        java: LineItem
      - is_last: true
        is_list_add: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        java: LineItems
        python: line_item
        ruby: line_item
        csharp: LineItem
        object: lineItem
      - is_object: true
        key: receipt
        keyPascal: Receipt
      - is_variable: true
        nonString: true
        key: contact
        keyPascal: Contact
        default: contact
        object: receipt
      - is_variable: true
        nonString: true
        key: user
        keyPascal: User
        default: user
        object: receipt
      - is_variable: true
        nonString: true
        key: lineItems
        keyPascal: LineItems
        keySnake: line_items
        default: lineItems
        python: line_items
        ruby: line_items
        object: receipt
      - nonString: true
        key: lineAmountTypes
        keyPascal: LineAmountTypes
        keySnake: line_amount_types
        default: INCLUSIVE
        php: XeroAPI\XeroPHP\Models\Accounting\LineAmountTypes::INCLUSIVE
        node: LineAmountTypes.Inclusive
        ruby: XeroRuby::Accounting::INCLUSIVE
        python: LineAmountTypes.INCLUSIVE
        java: com.xero.models.accounting.LineAmountTypes.INCLUSIVE
        csharp: LineAmountTypes.Exclusive
        object: receipt
      - is_last: true
        nonString: true
        key: status
        keyPascal: Status
        default: DRAFT
        php: XeroAPI\XeroPHP\Models\Accounting\Receipt::STATUS_DRAFT
        node: Receipt.StatusEnum.DRAFT
        ruby: XeroRuby::Accounting::Receipt::DRAFT
        python_string: DRAFT
        java: com.xero.models.accounting.Receipt.StatusEnum.DRAFT
        csharp: Receipt.StatusEnum.DRAFT
        object: receipt
      - is_object: true
        key: receipts
        keyPascal: Receipts
      - is_last: true
        is_array_add: true
        key: receipts
        keyPascal: Receipts
        java: Receipts
        csharp: Receipt
        object: receipt
      parameters:
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Receipts array for newly
            created Receipt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipts'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Receipts with an array of Receipt object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Receipts'
  /Receipts/{ReceiptID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getReceipt
      summary: Retrieves a specific draft expense claim receipt by using a unique
        receipt Id
      parameters:
      - $ref: '#/components/parameters/ReceiptID'
      - $ref: '#/components/parameters/unitdp'
      responses:
        '200':
          description: Success - return response of type Receipts array for a specified
            Receipt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipts'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateReceipt
      summary: Updates a specific draft expense claim receipts
      x-hasAccountingValidationError: true
      x-example:
      - is_date: true
        key: dateValue
        keyPascal: Date
        java_datatype: LocalDate
        default: LocalDate.of(2020, Month.OCTOBER, 10)
        java: LocalDate.now()
        csharp: DateTime.Now
        php: new DateTime('2020-12-10')
        node: '''2020-10-10'''
        python: dateutil.parser.parse('2020-10-10T00:00:00Z')
        ruby: '''YYYY-MM-DD'''
      - is_object: true
        key: user
        keyPascal: User
      - is_last: true
        is_uuid: true
        key: userID
        keyPascal: UserID
        keySnake: user_id
        default: 00000000-0000-0000-0000-000000000000
        object: user
      - is_object: true
        key: receipt
        keyPascal: Receipt
      - is_variable: true
        nonString: true
        key: user
        keyPascal: User
        default: user
        object: receipt
      - key: reference
        keyPascal: Reference
        default: Foobar
        object: receipt
      - is_last: true
        is_variable: true
        nonString: true
        key: date
        keyPascal: Date
        default: dateValue
        object: receipt
      - is_object: true
        key: receipts
        keyPascal: Receipts
      - is_last: true
        is_array_add: true
        key: receipts
        keyPascal: Receipts
        java: Receipts
        csharp: Receipt
        object: receipt
      parameters:
      - $ref: '#/components/parameters/ReceiptID'
      - $ref: '#/components/parameters/unitdp'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type Receipts array for updated
            Receipt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipts'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Receipts'
  /Receipts/{ReceiptID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getReceiptAttachments
      summary: Retrieves attachments for a specific expense claim receipt
      parameters:
      - $ref: '#/components/parameters/ReceiptID'
      responses:
        '200':
          description: Success - return response of type Attachments array of Attachments
            for a specified Receipt
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
  /Receipts/{ReceiptID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getReceiptAttachmentById
      summary: Retrieves a specific attachments from a specific expense claim receipts
        by using a unique attachment Id
      parameters:
      - $ref: '#/components/parameters/ReceiptID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Receipt as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /Receipts/{ReceiptID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getReceiptAttachmentByFileName
      summary: Retrieves a specific attachment from a specific expense claim receipts
        by file name
      parameters:
      - $ref: '#/components/parameters/ReceiptID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Receipt as binary
            data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updateReceiptAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Updates a specific attachment on a specific expense claim receipts
        by file name
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ReceiptID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array with updated
            Attachment for a specified Receipt
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createReceiptAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Creates an attachment on a specific expense claim receipts by file
        name
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ReceiptID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array with newly
            created Attachment for a specified Receipt
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /Receipts/{ReceiptID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getReceiptHistory
      summary: Retrieves a history record for a specific receipt
      parameters:
      - $ref: '#/components/parameters/ReceiptID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createReceiptHistory
      summary: Creates a history record for a specific receipt
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/ReceiptID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          description: Unsupported - return response incorrect exception, API is not
            able to create HistoryRecord for Receipts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /RepeatingInvoices:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getRepeatingInvoices
      summary: Retrieves repeating invoices
      parameters:
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"DRAFT\"
        x-example-java: Status==&quot;&apos; + RepeatingInvoice.StatusEnum.DRAFT +
          &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\RepeatingInvoice::STATUS_DRAFT
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::RepeatingInvoice::DRAFT}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type Repeating Invoices array
            for all Repeating Invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatingInvoices'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createRepeatingInvoices
      summary: Creates one or more repeating invoice templates
      x-hasAccountingValidationError: true
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type RepeatingInvoices array with
            newly created RepeatingInvoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatingInvoices'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: RepeatingInvoices with an array of repeating invoice objects
          in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatingInvoices'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateOrCreateRepeatingInvoices
      summary: Creates or deletes one or more repeating invoice templates
      x-hasAccountingValidationError: true
      parameters:
      - $ref: '#/components/parameters/summarizeErrors'
      - $ref: '#/components/parameters/idempotencyKey'
      responses:
        '200':
          description: Success - return response of type RepeatingInvoices array with
            newly created RepeatingInvoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatingInvoices'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: RepeatingInvoices with an array of repeating invoice objects
          in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatingInvoices'
  /RepeatingInvoices/{RepeatingInvoiceID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getRepeatingInvoice
      summary: Retrieves a specific repeating invoice by using a unique repeating
        invoice Id
      parameters:
      - $ref: '#/components/parameters/RepeatingInvoiceID'
      responses:
        '200':
          description: Success - return response of type Repeating Invoices array
            with a specified Repeating Invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatingInvoices'
    post:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: updateRepeatingInvoice
      summary: Deletes a specific repeating invoice template
      x-hasAccountingValidationError: true
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/RepeatingInvoiceID'
      responses:
        '200':
          description: Success - return response of type RepeatingInvoices array with
            deleted Invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatingInvoices'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatingInvoices'
  /RepeatingInvoices/{RepeatingInvoiceID}/Attachments:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getRepeatingInvoiceAttachments
      summary: Retrieves attachments from a specific repeating invoice
      parameters:
      - $ref: '#/components/parameters/RepeatingInvoiceID'
      responses:
        '200':
          description: Success - return response of type Attachments array with all
            Attachments for a specified Repeating Invoice
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
  /RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{AttachmentID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getRepeatingInvoiceAttachmentById
      summary: Retrieves a specific attachment from a specific repeating invoice
      parameters:
      - $ref: '#/components/parameters/RepeatingInvoiceID'
      - $ref: '#/components/parameters/AttachmentID'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Repeating Invoice
            as binary data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.attachments
        - accounting.attachments.read
      tags:
      - Accounting
      operationId: getRepeatingInvoiceAttachmentByFileName
      summary: Retrieves a specific attachment from a specific repeating invoices
        by file name
      parameters:
      - $ref: '#/components/parameters/RepeatingInvoiceID'
      - $ref: '#/components/parameters/FileName'
      - $ref: '#/components/parameters/ContentType'
      responses:
        '200':
          description: Success - return response of attachment for Repeating Invoice
            as binary data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: updateRepeatingInvoiceAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Updates a specific attachment from a specific repeating invoices by
        file name
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/RepeatingInvoiceID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array with specified
            Attachment for a specified Repeating Invoice
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
    put:
      security:
      - OAuth2:
        - accounting.attachments
      tags:
      - Accounting
      operationId: createRepeatingInvoiceAttachmentByFileName
      x-hasAccountingValidationError: true
      summary: Creates an attachment from a specific repeating invoices by file name
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/RepeatingInvoiceID'
      - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          description: Success - return response of type Attachments array with updated
            Attachment for a specified Repeating Invoice
          x-isAttachment: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: Byte array of file in body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
  /RepeatingInvoices/{RepeatingInvoiceID}/History:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.transactions
        - accounting.transactions.read
      tags:
      - Accounting
      operationId: getRepeatingInvoiceHistory
      summary: Retrieves history record for a specific repeating invoice
      parameters:
      - $ref: '#/components/parameters/RepeatingInvoiceID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRetrieved'
    put:
      security:
      - OAuth2:
        - accounting.transactions
      tags:
      - Accounting
      operationId: createRepeatingInvoiceHistory
      summary: Creates a  history record for a specific repeating invoice
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: historyRecord
        keyPascal: HistoryRecord
        keySnake: history_record
      - is_last: true
        key: details
        keyPascal: Details
        default: Hello World
        object: historyRecord
      - is_object: true
        key: historyRecords
        keyPascal: HistoryRecords
      - is_last: true
        is_array_add: true
        key: historyRecords
        keyPascal: HistoryRecords
        keySnake: history_records
        java: HistoryRecords
        python: history_record
        ruby: history_record
        csharp: HistoryRecord
        object: historyRecord
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/RepeatingInvoiceID'
      responses:
        '200':
          $ref: '#/components/responses/HistoryRecordCreated'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        $ref: '#/components/requestBodies/historyRecords'
  /Reports/TenNinetyNine:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
        - accounting.reports.tenninetynine.read
      tags:
      - Accounting
      operationId: getReportTenNinetyNine
      summary: Retrieve reports for 1099
      parameters:
      - in: query
        name: reportYear
        x-snake: report_year
        description: The year of the 1099 report
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type Reports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
  /Reports/AgedPayablesByContact:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
      tags:
      - Accounting
      operationId: getReportAgedPayablesByContact
      summary: Retrieves report for aged payables by contact
      parameters:
      - in: query
        required: true
        name: contactId
        x-snake: contact_id
        description: Unique identifier for a Contact
        schema:
          type: string
          format: uuid
      - in: query
        name: date
        description: The date of the Aged Payables By Contact report
        schema:
          type: string
          format: date
      - $ref: '#/components/parameters/FromDate'
      - $ref: '#/components/parameters/ToDate'
      responses:
        '200':
          description: Success - return response of type ReportWithRows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWithRows'
  /Reports/AgedReceivablesByContact:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
      tags:
      - Accounting
      operationId: getReportAgedReceivablesByContact
      summary: Retrieves report for aged receivables by contact
      parameters:
      - in: query
        required: true
        name: contactId
        x-snake: contact_id
        description: Unique identifier for a Contact
        schema:
          type: string
          format: uuid
      - in: query
        name: date
        description: The date of the Aged Receivables By Contact report
        schema:
          type: string
          format: date
      - $ref: '#/components/parameters/FromDate'
      - $ref: '#/components/parameters/ToDate'
      responses:
        '200':
          description: Success - return response of type ReportWithRows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWithRows'
  /Reports/BalanceSheet:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
      tags:
      - Accounting
      operationId: getReportBalanceSheet
      summary: Retrieves report for balancesheet
      parameters:
      - in: query
        name: date
        description: The date of the Balance Sheet report
        schema:
          type: string
          format: date
      - in: query
        name: periods
        description: The number of periods for the Balance Sheet report
        schema:
          type: integer
      - in: query
        name: timeframe
        description: The period size to compare to (MONTH, QUARTER, YEAR)
        schema:
          type: string
          enum:
          - MONTH
          - QUARTER
          - YEAR
      - in: query
        name: trackingOptionID1
        x-snake: tracking_option_id_1
        description: The tracking option 1 for the Balance Sheet report
        schema:
          type: string
      - in: query
        name: trackingOptionID2
        x-snake: tracking_option_id_2
        description: The tracking option 2 for the Balance Sheet report
        schema:
          type: string
      - in: query
        name: standardLayout
        x-snake: standard_layout
        description: The standard layout boolean for the Balance Sheet report
        x-example-python: 'True'
        schema:
          type: boolean
      - in: query
        name: paymentsOnly
        x-snake: payments_only
        description: return a cash basis for the Balance Sheet report
        x-example-python: 'False'
        schema:
          type: boolean
      responses:
        '200':
          description: Success - return response of type ReportWithRows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWithRows'
  /Reports/BankSummary:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
      tags:
      - Accounting
      operationId: getReportBankSummary
      summary: Retrieves report for bank summary
      parameters:
      - $ref: '#/components/parameters/FromDate'
      - $ref: '#/components/parameters/ToDate'
      responses:
        '200':
          description: Success - return response of type ReportWithRows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWithRows'
  /Reports/{ReportID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
      tags:
      - Accounting
      operationId: getReportFromId
      summary: Retrieves a specific report using a unique ReportID
      parameters:
      - in: path
        required: true
        name: ReportID
        x-snake: report_id
        description: Unique identifier for a Report
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type ReportWithRows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWithRows'
  /Reports/BudgetSummary:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
      tags:
      - Accounting
      operationId: getReportBudgetSummary
      summary: Retrieves report for budget summary
      parameters:
      - in: query
        name: date
        description: The date for the Bank Summary report e.g. 2018-03-31
        schema:
          type: string
          format: date
      - in: query
        name: periods
        description: The number of periods to compare (integer between 1 and 12)
        schema:
          type: integer
      - in: query
        name: timeframe
        description: The period size to compare to (1=month, 3=quarter, 12=year)
        schema:
          type: integer
      responses:
        '200':
          description: success- return a Report with Rows object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWithRows'
  /Reports/ExecutiveSummary:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
      tags:
      - Accounting
      operationId: getReportExecutiveSummary
      summary: Retrieves report for executive summary
      parameters:
      - in: query
        name: date
        description: The date for the Bank Summary report e.g. 2018-03-31
        schema:
          type: string
          format: date
      responses:
        '200':
          description: Success - return response of type ReportWithRows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWithRows'
  /Reports:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
      tags:
      - Accounting
      operationId: getReportsList
      summary: Retrieves a list of the organistaions unique reports that require a
        uuid to fetch
      responses:
        '200':
          description: Success - return response of type ReportWithRows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWithRows'
  /Reports/ProfitAndLoss:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
      tags:
      - Accounting
      operationId: getReportProfitAndLoss
      summary: Retrieves report for profit and loss
      parameters:
      - $ref: '#/components/parameters/FromDate'
      - $ref: '#/components/parameters/ToDate'
      - in: query
        name: periods
        description: The number of periods to compare (integer between 1 and 12)
        schema:
          type: integer
      - in: query
        name: timeframe
        description: The period size to compare to (MONTH, QUARTER, YEAR)
        schema:
          type: string
          enum:
          - MONTH
          - QUARTER
          - YEAR
      - in: query
        name: trackingCategoryID
        x-snake: tracking_category_id
        description: The trackingCategory 1 for the ProfitAndLoss report
        schema:
          type: string
      - in: query
        name: trackingCategoryID2
        x-snake: tracking_category_id_2
        description: The trackingCategory 2 for the ProfitAndLoss report
        schema:
          type: string
      - in: query
        name: trackingOptionID
        x-snake: tracking_option_id
        description: The tracking option 1 for the ProfitAndLoss report
        schema:
          type: string
      - in: query
        name: trackingOptionID2
        x-snake: tracking_option_id_2
        description: The tracking option 2 for the ProfitAndLoss report
        schema:
          type: string
      - in: query
        name: standardLayout
        x-snake: standard_layout
        description: Return the standard layout for the ProfitAndLoss report
        x-example-python: 'True'
        schema:
          type: boolean
      - in: query
        name: paymentsOnly
        x-snake: payments_only
        description: Return cash only basis for the ProfitAndLoss report
        x-example-python: 'False'
        schema:
          type: boolean
      responses:
        '200':
          description: Success - return response of type ReportWithRows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWithRows'
  /Reports/TrialBalance:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.reports.read
      tags:
      - Accounting
      operationId: getReportTrialBalance
      summary: Retrieves report for trial balance
      parameters:
      - in: query
        name: date
        description: The date for the Trial Balance report e.g. 2018-03-31
        schema:
          type: string
          format: date
      - in: query
        name: paymentsOnly
        x-snake: payments_only
        description: Return cash only basis for the Trial Balance report
        x-example-python: 'True'
        schema:
          type: boolean
      responses:
        '200':
          description: Success - return response of type ReportWithRows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWithRows'
  /Setup:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    post:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: postSetup
      summary: Sets the chart of accounts, the conversion date and conversion balances
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-example:
      - is_object: true
        key: account
        keyPascal: Account
      - key: code
        keyPascal: Code
        default: 123
        object: account
      - key: name
        keyPascal: Name
        default: Business supplies
        object: account
      - is_last: true
        key: type
        keyPascal: Type
        default: EXPENSE
        nonString: true
        php: XeroAPI\XeroPHP\Models\Accounting\AccountType::EXPENSE
        node: AccountType.EXPENSE
        ruby: XeroRuby::Accounting::AccountType::EXPENSE
        python: AccountType.EXPENSE
        java: com.xero.models.accounting.AccountType.EXPENSE
        csharp: AccountType.EXPENSE
        object: account
      - is_list: true
        key: accounts
        keyPascal: Account
      - is_last: true
        is_list_add: true
        key: accounts
        keyPascal: Accounts
        object: account
      - is_object: true
        key: conversionDate
        keyPascal: ConversionDate
        keySnake: conversion_date
      - nonString: true
        key: month
        keyPascal: Month
        default: 10
        object: conversionDate
      - is_last: true
        nonString: true
        key: year
        keyPascal: Year
        default: 2020
        object: conversionDate
      - is_list: true
        key: conversionBalances
        keyPascal: ConversionBalances
        keySnake: conversion_balances
      - is_object: true
        key: setup
        keyPascal: Setup
      - is_variable: true
        nonString: true
        key: accounts
        keyPascal: Accounts
        default: accounts
        object: setup
      - is_variable: true
        nonString: true
        key: conversionDate
        keyPascal: ConversionDate
        keySnake: conversion_date
        default: conversionDate
        python: conversion_date
        ruby: conversion_date
        object: setup
      - is_last: true
        is_variable: true
        nonString: true
        key: conversionBalances
        keyPascal: ConversionBalances
        keySnake: conversion_balances
        default: conversionBalances
        python: conversion_balances
        ruby: conversion_balances
        object: setup
      responses:
        '200':
          description: Success - returns a summary of the chart of accounts updates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportSummaryObject'
      requestBody:
        required: true
        description: Object including an accounts array, a conversion balances array
          and a conversion date object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Setup'
  /TaxRates:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getTaxRates
      summary: Retrieves tax rates
      parameters:
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"ACTIVE\"
        x-example-java: Status==&quot;&apos; + TaxRate.StatusEnum.ACTIVE + &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\TaxRate::STATUS_ACTIVE
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::TaxRate::ACTIVE}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type TaxRates array with TaxRates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRates'
    put:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: createTaxRates
      summary: Creates one or more tax rates
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: taxComponent
        keyPascal: TaxComponent
        keySnake: tax_component
      - key: name
        keyPascal: Name
        default: State Tax
        object: taxComponent
      - is_last: true
        nonString: true
        key: rate
        keyPascal: Rate
        default: 2.25
        is_money: true
        object: taxComponent
      - is_list: true
        key: taxComponent
        keyPascal: TaxComponent
        csharp: TaxComponent
      - is_last: true
        is_list_add: true
        key: taxComponents
        keyPascal: TaxComponents
        keySnake: tax_components
        java: TaxComponents
        python: tax_component
        ruby: tax_component
        csharp: TaxComponent
        object: taxComponent
      - is_object: true
        key: taxRate
        keyPascal: TaxRate
        keySnake: tax_rate
      - key: name
        keyPascal: Name
        default: CA State Tax
        object: taxRate
      - is_variable: true
        nonString: true
        key: taxComponents
        keyPascal: TaxComponents
        object: taxRate
        default: taxComponents
      - is_object: true
        key: taxRates
        keyPascal: TaxRates
      - is_last: true
        is_array_add: true
        key: taxRates
        keyPascal: TaxRates
        keySnake: tax_rates
        java: TaxRates
        python: tax_rate
        ruby: tax_rate
        csharp: TaxRate
        object: taxRate
      responses:
        '200':
          description: Success - return response of type TaxRates array newly created
            TaxRate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRates'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: TaxRates array with TaxRate object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRates'
    post:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: updateTaxRate
      summary: Updates tax rates
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: taxComponent
        keyPascal: TaxComponent
        keySnake: tax_component
      - key: name
        keyPascal: Name
        default: State Tax
        object: taxComponent
      - is_last: true
        nonString: true
        key: rate
        keyPascal: Rate
        default: 2.25
        is_money: true
        object: taxComponent
      - is_list: true
        key: taxComponents
        keyPascal: TaxComponents
        csharp: TaxComponent
      - is_last: true
        is_list_add: true
        key: taxComponents
        keyPascal: TaxComponents
        keySnake: tax_components
        java: TaxComponents
        python: tax_component
        ruby: tax_component
        csharp: TaxComponent
        object: taxComponent
      - is_object: true
        key: taxRate
        keyPascal: TaxRate
        keySnake: tax_rate
      - key: name
        keyPascal: Name
        default: CA State Tax
        object: taxRate
      - is_variable: true
        nonString: true
        key: taxComponents
        keyPascal: TaxComponents
        object: taxRate
        default: taxComponents
      - is_object: true
        key: taxRates
        keyPascal: TaxRates
      - is_last: true
        is_array_add: true
        key: taxRates
        keyPascal: TaxRates
        keySnake: tax_rates
        java: TaxRates
        python: tax_rate
        ruby: tax_rate
        csharp: TaxRate
        object: taxRate
      responses:
        '200':
          description: Success - return response of type TaxRates array updated TaxRate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRates'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRates'
  /TaxRates/{TaxType}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getTaxRateByTaxType
      summary: Retrieves a specific tax rate according to given TaxType code
      parameters:
      - $ref: '#/components/parameters/TaxType'
      responses:
        '200':
          description: Success - return response of type TaxRates array with one TaxRate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRates'
  /TrackingCategories:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getTrackingCategories
      summary: Retrieves tracking categories and options
      parameters:
      - in: query
        name: where
        description: Filter by an any element
        x-example-csharp: Status==\"ACTIVE\"
        x-example-java: Status==&quot;&apos; + TrackingCategory.StatusEnum.ACTIVE
          + &apos;&quot;
        x-example-php: Status==&quot;&apos; . \XeroAPI\XeroPHP\Models\Accounting\TrackingCategory::STATUS_ACTIVE
          . &apos;&quot;
        x-example-ruby: Status==#{XeroRuby::Accounting::TrackingCategory::ACTIVE}
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      - in: query
        name: includeArchived
        x-snake: include_archived
        description: e.g. includeArchived=true - Categories and options with a status
          of ARCHIVED will be included in the response
        x-example-python: 'True'
        schema:
          type: boolean
      responses:
        '200':
          description: Success - return response of type TrackingCategories array
            of TrackingCategory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingCategories'
    put:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: createTrackingCategory
      summary: Create tracking categories
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: trackingCategory
        keyPascal: TrackingCategory
      - is_last: true
        key: name
        keyPascal: Name
        default: Foobar
        object: trackingCategory
      responses:
        '200':
          description: Success - return response of type TrackingCategories array
            of newly created TrackingCategory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingCategories'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: TrackingCategory object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackingCategory'
  /TrackingCategories/{TrackingCategoryID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getTrackingCategory
      summary: Retrieves specific tracking categories and options using a unique tracking
        category Id
      parameters:
      - $ref: '#/components/parameters/TrackingCategoryID'
      responses:
        '200':
          description: Success - return response of type TrackingCategories array
            of specified TrackingCategory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingCategories'
    post:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: updateTrackingCategory
      summary: Updates a specific tracking category
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: trackingCategory
        keyPascal: TrackingCategory
      - is_last: true
        key: name
        keyPascal: Name
        default: Foobar
        object: trackingCategory
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/TrackingCategoryID'
      responses:
        '200':
          description: Success - return response of type TrackingCategories array
            of updated TrackingCategory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingCategories'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackingCategory'
    delete:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: deleteTrackingCategory
      summary: Deletes a specific tracking category
      parameters:
      - $ref: '#/components/parameters/TrackingCategoryID'
      responses:
        '200':
          description: Success - return response of type TrackingCategories array
            of deleted TrackingCategory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingCategories'
        '400':
          $ref: '#/components/responses/400Error'
  /TrackingCategories/{TrackingCategoryID}/Options:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    put:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: createTrackingOptions
      summary: Creates options for a specific tracking category
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: trackingOption
        keyPascal: TrackingOption
      - is_last: true
        key: name
        keyPascal: Name
        default: Foobar
        object: trackingOption
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/TrackingCategoryID'
      responses:
        '200':
          description: Success - return response of type TrackingOptions array of
            options for a specified category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingOptions'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        description: TrackingOption object in body of request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackingOption'
  /TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    post:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: updateTrackingOptions
      summary: Updates a specific option for a specific tracking category
      x-hasAccountingValidationError: true
      x-example:
      - is_object: true
        key: trackingOption
        keyPascal: TrackingOption
      - is_last: true
        key: name
        keyPascal: Name
        default: Foobar
        object: trackingOption
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
      - $ref: '#/components/parameters/TrackingCategoryID'
      - $ref: '#/components/parameters/TrackingOptionID'
      responses:
        '200':
          description: Success - return response of type TrackingOptions array of
            options for a specified category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingOptions'
        '400':
          $ref: '#/components/responses/400Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackingOption'
    delete:
      security:
      - OAuth2:
        - accounting.settings
      tags:
      - Accounting
      operationId: deleteTrackingOptions
      summary: Deletes a specific option for a specific tracking category
      parameters:
      - $ref: '#/components/parameters/TrackingCategoryID'
      - $ref: '#/components/parameters/TrackingOptionID'
      responses:
        '200':
          description: Success - return response of type TrackingOptions array of
            remaining options for a specified category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingOptions'
        '400':
          $ref: '#/components/responses/400Error'
  /Users:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getUsers
      summary: Retrieves users
      parameters:
      - $ref: '#/components/parameters/ifModifiedSince'
      - in: query
        name: where
        description: Filter by an any element
        schema:
          type: string
      - in: query
        name: order
        description: Order by an any element
        schema:
          type: string
      responses:
        '200':
          description: Success - return response of type Users array of all User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
  /Users/{UserID}:
    parameters:
    - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
      - OAuth2:
        - accounting.settings
        - accounting.settings.read
      tags:
      - Accounting
      operationId: getUser
      summary: Retrieves a specific user
      parameters:
      - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: Success - return response of type Users array of specified
            User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: For more information
      flows:
        authorizationCode:
          authorizationUrl: https://login.xero.com/identity/connect/authorize
          tokenUrl: https://identity.xero.com/connect/token
          scopes:
            email: Grant read-only access to your email
            openid: Grant read-only access to your open id
            profile: your profile information
            accounting.attachments: Grant read-write access to attachments
            accounting.attachments.read: Grant read-only access to attachments
            accounting.contacts: Grant read-write access to contacts and contact groups
            accounting.contacts.read: Grant read-only access to contacts and contact
              groups
            accounting.journals.read: Grant read-only access to journals
            accounting.reports.read: Grant read-only access to accounting reports
            accounting.reports.tenninetynine.read: Grant read-only access to 1099
              reports
            accounting.settings: Grant read-write access to organisation and account
              settings
            accounting.settings.read: Grant read-only access to organisation and account
              settings
            accounting.transactions: Grant read-write access to bank transactions,
              credit notes, invoices, repeating invoices
            accounting.transactions.read: Grant read-only access to invoices
            paymentservices: Grant read-write access to payment services
  requestBodies:
    historyRecords:
      required: true
      description: HistoryRecords containing an array of HistoryRecord objects in
        body of request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HistoryRecords'
  parameters:
    requiredHeader:
      in: header
      name: xero-tenant-id
      x-snake: xero_tenant_id
      description: Xero identifier for Tenant
      schema:
        type: string
      required: true
    summarizeErrors:
      in: query
      name: summarizeErrors
      x-snake: summarize_errors
      description: If false return 200 OK and mix of successfully created objects
        and any with validation errors
      x-example-python: 'True'
      schema:
        type: boolean
        default: false
    unitdp:
      in: query
      name: unitdp
      description: "e.g. unitdp=4 \u2013 (Unit Decimal Places) You can opt in to use\
        \ four decimal places for unit amounts"
      schema:
        type: integer
    ifModifiedSince:
      in: header
      name: If-Modified-Since
      x-snake: if_modified_since
      description: Only records created or modified since this timestamp will be returned
      schema:
        type: string
        format: date-time
    idempotencyKey:
      in: header
      name: Idempotency-Key
      x-snake: idempotency_key
      description: This allows you to safely retry requests without the risk of duplicate
        processing. 128 character max.
      schema:
        type: string
    includeOnline:
      in: query
      name: IncludeOnline
      x-snake: include_online
      description: Allows an attachment to be seen by the end customer within their
        online invoice
      x-example-python: 'True'
      schema:
        type: boolean
        default: false
    summaryOnly:
      in: query
      name: summaryOnly
      x-snake: summary_only
      description: Use summaryOnly=true in GET Contacts and Invoices endpoint to retrieve
        a smaller version of the response object. This returns only lightweight fields,
        excluding computation-heavy fields from the response, making the API calls
        quick and efficient.
      x-example-python: 'True'
      schema:
        type: boolean
        default: false
    searchTerm:
      in: query
      name: searchTerm
      x-snake: search_term
      description: Search parameter that performs a case-insensitive text search across
        the fields e.g. InvoiceNumber, Reference.
      x-example-python: 'True'
      schema:
        type: string
    FromDate:
      in: query
      name: fromDate
      x-snake: from_date
      description: filter by the from date of the report e.g. 2021-02-01
      schema:
        type: string
        format: date
    ToDate:
      in: query
      name: toDate
      x-snake: to_date
      description: filter by the to date of the report e.g. 2021-02-28
      schema:
        type: string
        format: date
    pageSize:
      in: query
      name: pageSize
      description: Number of records to retrieve per page
      schema:
        type: integer
    AccountID:
      required: true
      in: path
      name: AccountID
      x-snake: account_id
      description: Unique identifier for Account object
      schema:
        type: string
        format: uuid
    AllocationID:
      required: true
      in: path
      name: AllocationID
      x-snake: allocation_id
      description: Unique identifier for Allocation object
      schema:
        type: string
        format: uuid
    AttachmentID:
      required: true
      in: path
      name: AttachmentID
      x-snake: attachment_id
      description: Unique identifier for Attachment object
      schema:
        type: string
        format: uuid
    ContentType:
      required: true
      in: header
      name: contentType
      x-snake: content_type
      description: The mime type of the attachment file you are retrieving i.e image/jpg,
        application/pdf
      schema:
        type: string
    FileName:
      required: true
      in: path
      name: FileName
      x-snake: file_name
      description: Name of the attachment
      schema:
        type: string
    BatchPaymentID:
      required: true
      in: path
      name: BatchPaymentID
      x-snake: batch_payment_id
      description: Unique identifier for BatchPayment
      schema:
        type: string
        format: uuid
    BankTransactionID:
      required: true
      in: path
      name: BankTransactionID
      x-snake: bank_transaction_id
      description: Xero generated unique identifier for a bank transaction
      schema:
        type: string
        format: uuid
    BankTransferID:
      required: true
      in: path
      name: BankTransferID
      x-snake: bank_transfer_id
      description: Xero generated unique identifier for a bank transfer
      schema:
        type: string
        format: uuid
    BrandingThemeID:
      required: true
      in: path
      name: BrandingThemeID
      x-snake: branding_theme_id
      description: Unique identifier for a Branding Theme
      schema:
        type: string
        format: uuid
    BudgetID:
      required: true
      in: path
      name: BudgetID
      x-snake: budget_id
      description: Unique identifier for Budgets
      schema:
        type: string
        format: uuid
    ContactID:
      required: true
      in: path
      name: ContactID
      x-snake: contact_id
      description: Unique identifier for a Contact
      schema:
        type: string
        format: uuid
    ContactGroupID:
      required: true
      in: path
      name: ContactGroupID
      x-snake: contact_group_id
      description: Unique identifier for a Contact Group
      schema:
        type: string
        format: uuid
    CreditNoteID:
      required: true
      in: path
      name: CreditNoteID
      x-snake: credit_note_id
      description: Unique identifier for a Credit Note
      schema:
        type: string
        format: uuid
    EmployeeID:
      required: true
      in: path
      name: EmployeeID
      x-snake: employee_id
      description: Unique identifier for a Employee
      schema:
        type: string
        format: uuid
    ExpenseClaimID:
      required: true
      in: path
      name: ExpenseClaimID
      x-snake: expense_claim_id
      description: Unique identifier for a ExpenseClaim
      schema:
        type: string
        format: uuid
    InvoiceID:
      required: true
      in: path
      name: InvoiceID
      x-snake: invoice_id
      description: Unique identifier for an Invoice
      schema:
        type: string
        format: uuid
    ItemID:
      required: true
      in: path
      name: ItemID
      x-snake: item_id
      description: Unique identifier for an Item
      schema:
        type: string
        format: uuid
    JournalID:
      required: true
      in: path
      name: JournalID
      x-snake: journal_id
      description: Unique identifier for a Journal
      schema:
        type: string
        format: uuid
    JournalNumber:
      required: true
      in: path
      name: JournalNumber
      x-snake: journal_number
      description: Number of a Journal
      schema:
        type: integer
    LinkedTransactionID:
      required: true
      in: path
      name: LinkedTransactionID
      x-snake: linked_transaction_id
      description: Unique identifier for a LinkedTransaction
      schema:
        type: string
        format: uuid
    ManualJournalID:
      required: true
      in: path
      name: ManualJournalID
      x-snake: manual_journal_id
      description: Unique identifier for a ManualJournal
      schema:
        type: string
        format: uuid
    OrganisationID:
      required: true
      in: path
      name: OrganisationID
      x-snake: organisation_id
      description: The unique Xero identifier for an organisation
      schema:
        type: string
        format: uuid
    OverpaymentID:
      required: true
      in: path
      name: OverpaymentID
      x-snake: overpayment_id
      description: Unique identifier for a Overpayment
      schema:
        type: string
        format: uuid
    PaymentID:
      required: true
      in: path
      name: PaymentID
      x-snake: payment_id
      description: Unique identifier for a Payment
      schema:
        type: string
        format: uuid
    PrepaymentID:
      required: true
      in: path
      name: PrepaymentID
      x-snake: prepayment_id
      description: Unique identifier for a PrePayment
      schema:
        type: string
        format: uuid
    PurchaseOrderID:
      required: true
      in: path
      name: PurchaseOrderID
      x-snake: purchase_order_id
      description: Unique identifier for an Purchase Order
      schema:
        type: string
        format: uuid
    QuoteID:
      required: true
      in: path
      name: QuoteID
      x-snake: quote_id
      description: Unique identifier for an Quote
      schema:
        type: string
        format: uuid
    ReceiptID:
      required: true
      in: path
      name: ReceiptID
      x-snake: receipt_id
      description: Unique identifier for a Receipt
      schema:
        type: string
        format: uuid
    RepeatingInvoiceID:
      required: true
      in: path
      name: RepeatingInvoiceID
      x-snake: repeating_invoice_id
      description: Unique identifier for a Repeating Invoice
      schema:
        type: string
        format: uuid
    TrackingCategoryID:
      required: true
      in: path
      name: TrackingCategoryID
      x-snake: tracking_category_id
      description: Unique identifier for a TrackingCategory
      schema:
        type: string
        format: uuid
    TrackingOptionID:
      required: true
      in: path
      name: TrackingOptionID
      x-snake: tracking_option_id
      description: Unique identifier for a Tracking Option
      schema:
        type: string
        format: uuid
    UserID:
      required: true
      in: path
      name: UserID
      x-snake: user_id
      description: Unique identifier for a User
      schema:
        type: string
        format: uuid
    TaxType:
      required: true
      in: path
      name: TaxType
      description: A valid TaxType code
      schema:
        type: string
  responses:
    400Error:
      description: A failed request due to validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    HistoryRecordCreated:
      description: Success - return response of type HistoryRecords array of HistoryRecord
        objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HistoryRecords'
    HistoryRetrieved:
      description: Success - return response of HistoryRecords array of 0 to N HistoryRecord
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HistoryRecords'
  schemas:
    AddressForOrganisation:
      externalDocs:
        url: http://developer.xero.com/documentation/api/types
      properties:
        AddressType:
          description: define the type of address
          type: string
          enum:
          - POBOX
          - STREET
          - DELIVERY
        AddressLine1:
          description: max length = 500
          maxLength: 500
          type: string
        AddressLine2:
          description: max length = 500
          maxLength: 500
          type: string
        AddressLine3:
          description: max length = 500
          maxLength: 500
          type: string
        AddressLine4:
          description: max length = 500
          maxLength: 500
          type: string
        City:
          description: max length = 255
          maxLength: 255
          type: string
        Region:
          description: max length = 255
          maxLength: 255
          type: string
        PostalCode:
          description: max length = 50
          maxLength: 50
          type: string
        Country:
          description: max length = 50, [A-Z], [a-z] only
          maxLength: 50
          type: string
        AttentionTo:
          description: max length = 255
          maxLength: 255
          type: string
      type: object
    Address:
      externalDocs:
        url: http://developer.xero.com/documentation/api/types
      properties:
        AddressType:
          description: define the type of address
          type: string
          enum:
          - POBOX
          - STREET
        AddressLine1:
          description: max length = 500
          maxLength: 500
          type: string
        AddressLine2:
          description: max length = 500
          maxLength: 500
          type: string
        AddressLine3:
          description: max length = 500
          maxLength: 500
          type: string
        AddressLine4:
          description: max length = 500
          maxLength: 500
          type: string
        City:
          description: max length = 255
          maxLength: 255
          type: string
        Region:
          description: max length = 255
          maxLength: 255
          type: string
        PostalCode:
          description: max length = 50
          maxLength: 50
          type: string
        Country:
          description: max length = 50, [A-Z], [a-z] only
          maxLength: 50
          type: string
        AttentionTo:
          description: max length = 255
          maxLength: 255
          type: string
      type: object
    Phone:
      externalDocs:
        url: http://developer.xero.com/documentation/api/types
      properties:
        PhoneType:
          type: string
          enum:
          - DEFAULT
          - DDI
          - MOBILE
          - FAX
          - OFFICE
        PhoneNumber:
          description: max length = 50
          maxLength: 50
          type: string
        PhoneAreaCode:
          description: max length = 10
          maxLength: 10
          type: string
        PhoneCountryCode:
          description: max length = 20
          maxLength: 20
          type: string
      type: object
    Accounts:
      type: object
      x-objectArrayKey: accounts
      properties:
        Accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    Account:
      type: object
      externalDocs:
        url: http://developer.xero.com/documentation/api/accounts/
      properties:
        Code:
          description: Customer defined alpha numeric account code e.g 200 or SALES
            (max length = 10)
          type: string
        Name:
          description: Name of account (max length = 150)
          maxLength: 150
          type: string
        AccountID:
          description: "The Xero identifier for an account \u2013 specified as a string\
            \ following  the endpoint name   e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9"
          type: string
          format: uuid
        Type:
          $ref: '#/components/schemas/AccountType'
          type: string
        BankAccountNumber:
          description: For bank accounts only (Account Type BANK)
          type: string
        Status:
          description: Accounts with a status of ACTIVE can be updated to ARCHIVED.
            See Account Status Codes
          type: string
          enum:
          - ACTIVE
          - ARCHIVED
          - DELETED
        Description:
          description: Description of the Account. Valid for all types of accounts
            except bank accounts (max length = 4000)
          type: string
        BankAccountType:
          description: For bank accounts only. See Bank Account types
          type: string
          enum:
          - BANK
          - CREDITCARD
          - PAYPAL
          - NONE
        CurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        TaxType:
          description: The tax type from taxRates
          type: string
        EnablePaymentsToAccount:
          description: "Boolean \u2013 describes whether account can have payments\
            \ applied to it"
          type: boolean
        ShowInExpenseClaims:
          description: "Boolean \u2013 describes whether account code is available\
            \ for use with expense claims"
          type: boolean
        Class:
          description: See Account Class Types
          readOnly: true
          type: string
          enum:
          - ASSET
          - EQUITY
          - EXPENSE
          - LIABILITY
          - REVENUE
        SystemAccount:
          description: "If this is a system account then this element is returned.\
            \ See System Account types. Note that non-system accounts may have this\
            \ element set as either \u201C\u201D or null."
          readOnly: true
          type: string
          enum:
          - DEBTORS
          - CREDITORS
          - BANKCURRENCYGAIN
          - GST
          - GSTONIMPORTS
          - HISTORICAL
          - REALISEDCURRENCYGAIN
          - RETAINEDEARNINGS
          - ROUNDING
          - TRACKINGTRANSFERS
          - UNPAIDEXPCLM
          - UNREALISEDCURRENCYGAIN
          - WAGEPAYABLES
          - CISASSETS
          - CISASSET
          - CISLABOUR
          - CISLABOUREXPENSE
          - CISLABOURINCOME
          - CISLIABILITY
          - CISMATERIALS
        ReportingCode:
          description: Shown if set
          type: string
        ReportingCodeName:
          description: Shown if set
          readOnly: true
          type: string
        HasAttachments:
          description: boolean to indicate if an account has an attachment (read only)
          readOnly: true
          type: boolean
          default: 'false'
        UpdatedDateUTC:
          description: Last modified date UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        AddToWatchlist:
          description: "Boolean \u2013 describes whether the account is shown in the\
            \ watchlist widget on the dashboard"
          type: boolean
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    AccountType:
      description: See Account Types
      type: string
      enum:
      - BANK
      - CURRENT
      - CURRLIAB
      - DEPRECIATN
      - DIRECTCOSTS
      - EQUITY
      - EXPENSE
      - FIXED
      - INVENTORY
      - LIABILITY
      - NONCURRENT
      - OTHERINCOME
      - OVERHEADS
      - PREPAYMENT
      - REVENUE
      - SALES
      - TERMLIAB
      - PAYG
    Attachments:
      type: object
      x-objectArrayKey: attachments
      properties:
        Attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    Attachment:
      type: object
      externalDocs:
        url: http://developer.xero.com/documentation/api/attachments/
      properties:
        AttachmentID:
          description: Unique ID for the file
          type: string
          format: uuid
        FileName:
          description: Name of the file
          type: string
        Url:
          description: URL to the file on xero.com
          type: string
        MimeType:
          description: Type of file
          type: string
        ContentLength:
          description: Length of the file content
          type: integer
        IncludeOnline:
          description: Include the file with the online invoice
          type: boolean
    BankTransactions:
      type: object
      x-objectArrayKey: bank_transactions
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        BankTransactions:
          type: array
          items:
            $ref: '#/components/schemas/BankTransaction'
    BankTransaction:
      externalDocs:
        url: http://developer.xero.com/documentation/api/banktransactions/
      properties:
        Type:
          description: See Bank Transaction Types
          type: string
          enum:
          - RECEIVE
          - RECEIVE-OVERPAYMENT
          - RECEIVE-PREPAYMENT
          - SPEND
          - SPEND-OVERPAYMENT
          - SPEND-PREPAYMENT
          - RECEIVE-TRANSFER
          - SPEND-TRANSFER
        Contact:
          $ref: '#/components/schemas/Contact'
        LineItems:
          description: See LineItems
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        BankAccount:
          $ref: '#/components/schemas/Account'
        IsReconciled:
          description: Boolean to show if transaction is reconciled
          type: boolean
        Date:
          description: "Date of transaction \u2013 YYYY-MM-DD"
          type: string
          x-is-msdate: true
        Reference:
          description: Reference for the transaction. Only supported for SPEND and
            RECEIVE transactions.
          type: string
        CurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        CurrencyRate:
          description: "Exchange rate to base currency when money is spent or received.\
            \ e.g.0.7500 Only used for bank transactions in non base currency. If\
            \ this isn\u2019t specified for non base currency accounts then either\
            \ the user-defined rate (preference) or the XE.com day rate will be used.\
            \ Setting currency is only supported on overpayments."
          type: number
          format: double
          x-is-money: true
        Url:
          description: "URL link to a source document \u2013 shown as \u201CGo to\
            \ App Name\u201D"
          type: string
        Status:
          description: See Bank Transaction Status Codes
          type: string
          enum:
          - AUTHORISED
          - DELETED
          - VOIDED
        LineAmountTypes:
          $ref: '#/components/schemas/LineAmountTypes'
          type: string
        SubTotal:
          description: Total of bank transaction excluding taxes
          type: number
          format: double
          x-is-money: true
        TotalTax:
          description: Total tax on bank transaction
          type: number
          format: double
          x-is-money: true
        Total:
          description: Total of bank transaction tax inclusive
          type: number
          format: double
          x-is-money: true
        BankTransactionID:
          description: Xero generated unique identifier for bank transaction
          type: string
          format: uuid
        PrepaymentID:
          description: Xero generated unique identifier for a Prepayment. This will
            be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT
          readOnly: true
          type: string
          format: uuid
        OverpaymentID:
          description: Xero generated unique identifier for an Overpayment. This will
            be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT
          readOnly: true
          type: string
          format: uuid
        UpdatedDateUTC:
          description: Last modified date UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        HasAttachments:
          description: Boolean to indicate if a bank transaction has an attachment
          readOnly: true
          type: boolean
          default: 'false'
        StatusAttributeString:
          description: A string to indicate if a invoice status
          type: string
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      required:
      - Type
      - LineItems
      - BankAccount
      type: object
    LineAmountTypes:
      description: "Line amounts are exclusive of tax by default if you don\u2019\
        t specify this element. See Line Amount Types"
      type: string
      enum:
      - Exclusive
      - Inclusive
      - NoTax
    LineItem:
      externalDocs:
        url: https://developer.xero.com/documentation/api/invoices#post
      properties:
        LineItemID:
          description: LineItem unique ID
          type: string
          format: uuid
        Description:
          description: Description needs to be at least 1 char long. A line item with
            just a description (i.e no unit amount or quantity) can be created by
            specifying just a <Description> element that contains at least 1 character
          type: string
        Quantity:
          description: LineItem Quantity
          type: number
          format: double
          x-is-money: true
        UnitAmount:
          description: LineItem Unit Amount
          type: number
          format: double
          x-is-money: true
        ItemCode:
          description: See Items
          type: string
        AccountCode:
          description: See Accounts
          type: string
        AccountID:
          description: The associated account ID related to this line item
          type: string
          format: uuid
        TaxType:
          description: The tax type from TaxRates
          type: string
        TaxAmount:
          description: The tax amount is auto calculated as a percentage of the line
            amount (see below) based on the tax rate. This value can be overriden
            if the calculated <TaxAmount> is not correct.
          type: number
          format: double
          x-is-money: true
        Item:
          $ref: '#/components/schemas/LineItemItem'
        LineAmount:
          description: If you wish to omit either the Quantity or UnitAmount you can
            provide a LineAmount and Xero will calculate the missing amount for you.
            The line amount reflects the discounted price if either a DiscountRate
            or DiscountAmount has been used i.e. LineAmount = Quantity * Unit Amount
            * ((100 - DiscountRate)/100) or LineAmount = (Quantity * UnitAmount) -
            DiscountAmount
          type: number
          format: double
          x-is-money: true
        Tracking:
          description: "Optional Tracking Category \u2013 see Tracking.  Any LineItem\
            \ can have a  maximum of 2 <TrackingCategory> elements."
          type: array
          items:
            $ref: '#/components/schemas/LineItemTracking'
        DiscountRate:
          description: "Percentage discount being applied to a line item (only supported\
            \ on  ACCREC invoices \u2013 ACC PAY invoices and credit notes in Xero\
            \ do not support discounts"
          type: number
          format: double
          x-is-money: true
        DiscountAmount:
          description: Discount amount being applied to a line item. Only supported
            on ACCREC invoices and quotes. ACCPAY invoices and credit notes in Xero
            do not support discounts.
          type: number
          format: double
          x-is-money: true
        RepeatingInvoiceID:
          description: The Xero identifier for a Repeating Invoice
          type: string
          format: uuid
        Taxability:
          description: The type of taxability
          type: string
          enum:
          - TAXABLE
          - NON_TAXABLE
          - EXEMPT
          - PART_TAXABLE
          - NOT_APPLICABLE
        SalesTaxCodeId:
          description: The ID of the sales tax code
          type: number
        TaxBreakdown:
          description: An array of tax components defined for this line item
          type: array
          items:
            $ref: '#/components/schemas/TaxBreakdownComponent'
      type: object
    LineItemItem:
      properties:
        Code:
          description: User defined item code (max length = 30)
          maxLength: 30
          type: string
        Name:
          description: The name of the item (max length = 50)
          maxLength: 50
          type: string
        ItemID:
          description: The Xero identifier for an Item
          type: string
          format: uuid
    LineItemTracking:
      externalDocs:
        url: https://developer.xero.com/documentation/api/invoices#post
      properties:
        TrackingCategoryID:
          description: The Xero identifier for a tracking category
          type: string
          format: uuid
        TrackingOptionID:
          description: The Xero identifier for a tracking category option
          type: string
          format: uuid
        Name:
          description: The name of the tracking category
          maxLength: 100
          type: string
        Option:
          description: See Tracking Options
          type: string
      type: object
    BankTransfers:
      type: object
      x-objectArrayKey: bank_transfers
      properties:
        BankTransfers:
          type: array
          items:
            $ref: '#/components/schemas/BankTransfer'
    BankTransfer:
      externalDocs:
        url: http://developer.xero.com/documentation/api/bank-transfers/
      properties:
        FromBankAccount:
          $ref: '#/components/schemas/Account'
        ToBankAccount:
          $ref: '#/components/schemas/Account'
        Amount:
          description: amount of the transaction
          type: number
          format: double
          x-is-money: true
        Date:
          description: The date of the Transfer YYYY-MM-DD
          type: string
          x-is-msdate: true
        BankTransferID:
          description: The identifier of the Bank Transfer
          readOnly: true
          type: string
          format: uuid
        CurrencyRate:
          description: The currency rate
          readOnly: true
          type: number
          format: double
          x-is-money: true
        FromBankTransactionID:
          description: The Bank Transaction ID for the source account
          readOnly: true
          type: string
          format: uuid
        ToBankTransactionID:
          description: The Bank Transaction ID for the destination account
          readOnly: true
          type: string
          format: uuid
        FromIsReconciled:
          description: The Bank Transaction boolean to show if it is reconciled for
            the source account
          type: boolean
          default: 'false'
        ToIsReconciled:
          description: The Bank Transaction boolean to show if it is reconciled for
            the destination account
          type: boolean
          default: 'false'
        Reference:
          description: Reference for the transactions.
          type: string
        HasAttachments:
          description: Boolean to indicate if a Bank Transfer has an attachment
          readOnly: true
          type: boolean
          default: 'false'
        CreatedDateUTC:
          description: UTC timestamp of creation date of bank transfer
          type: string
          x-is-msdate-time: true
          readOnly: true
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      required:
      - FromBankAccount
      - ToBankAccount
      - Amount
      type: object
    BatchPayments:
      type: object
      x-objectArrayKey: batch_payments
      properties:
        BatchPayments:
          type: array
          items:
            $ref: '#/components/schemas/BatchPayment'
    BatchPayment:
      externalDocs:
        url: http://developer.xero.com/documentation/api/BatchPayments/
      properties:
        Account:
          $ref: '#/components/schemas/Account'
        Reference:
          description: (NZ Only) Optional references for the batch payment transaction.
            It will also show with the batch payment transaction in the bank reconciliation
            Find & Match screen. Depending on your individual bank, the detail may
            also show on the bank statement you import into Xero.
          type: string
          maxLength: 255
        Particulars:
          description: (NZ Only) Optional references for the batch payment transaction.
            It will also show with the batch payment transaction in the bank reconciliation
            Find & Match screen. Depending on your individual bank, the detail may
            also show on the bank statement you import into Xero.
          type: string
          maxLength: 12
        Code:
          description: (NZ Only) Optional references for the batch payment transaction.
            It will also show with the batch payment transaction in the bank reconciliation
            Find & Match screen. Depending on your individual bank, the detail may
            also show on the bank statement you import into Xero.
          type: string
          maxLength: 12
        Details:
          description: "(Non-NZ Only) These details are sent to the org\u2019s bank\
            \ as a reference for the batch payment transaction. They will also show\
            \ with the batch payment transaction in the bank reconciliation Find &\
            \ Match screen. Depending on your individual bank, the detail may also\
            \ show on the bank statement imported into Xero. Maximum field length\
            \ = 18"
          type: string
        Narrative:
          description: (UK Only) Only shows on the statement line in Xero. Max length
            =18
          type: string
          maxLength: 18
        BatchPaymentID:
          description: The Xero generated unique identifier for the bank transaction
            (read-only)
          readOnly: true
          type: string
          format: uuid
        DateString:
          description: Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
          type: string
        Date:
          description: Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
          type: string
          x-is-msdate: true
        Amount:
          description: The amount of the payment. Must be less than or equal to the
            outstanding amount owing on the invoice e.g. 200.00
          type: number
          format: double
          x-is-money: true
        Payments:
          description: An array of payments
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        Type:
          description: PAYBATCH for bill payments or RECBATCH for sales invoice payments
            (read-only)
          readOnly: true
          type: string
          enum:
          - PAYBATCH
          - RECBATCH
        Status:
          description: AUTHORISED or DELETED (read-only). New batch payments will
            have a status of AUTHORISED. It is not possible to delete batch payments
            via the API.
          readOnly: true
          type: string
          enum:
          - AUTHORISED
          - DELETED
        TotalAmount:
          description: The total of the payments that make up the batch (read-only)
          type: number
          format: double
          x-is-money: true
          readOnly: true
        UpdatedDateUTC:
          description: UTC timestamp of last update to the payment
          type: string
          x-is-msdate-time: true
          readOnly: true
        IsReconciled:
          description: Booelan that tells you if the batch payment has been reconciled
            (read-only)
          readOnly: true
          type: boolean
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      type: object
    BatchPaymentDetails:
      description: Bank details for use on a batch payment stored with each contact
      externalDocs:
        url: http://developer.xero.com/documentation/api/Contact/
      properties:
        BankAccountNumber:
          description: Bank account number for use with Batch Payments
          type: string
        BankAccountName:
          description: Name of bank for use with Batch Payments
          type: string
        Details:
          description: "(Non-NZ Only) These details are sent to the org\u2019s bank\
            \ as a reference for the batch payment transaction. They will also show\
            \ with the batch payment transaction in the bank reconciliation Find &\
            \ Match screen. Depending on your individual bank, the detail may also\
            \ show on the bank statement imported into Xero. Maximum field length\
            \ = 18"
          type: string
        Code:
          description: (NZ Only) Optional references for the batch payment transaction.
            It will also show with the batch payment transaction in the bank reconciliation
            Find & Match screen. Depending on your individual bank, the detail may
            also show on the bank statement you import into Xero.
          type: string
          maxLength: 12
        Reference:
          description: (NZ Only) Optional references for the batch payment transaction.
            It will also show with the batch payment transaction in the bank reconciliation
            Find & Match screen. Depending on your individual bank, the detail may
            also show on the bank statement you import into Xero.
          type: string
          maxLength: 12
    BatchPaymentDelete:
      externalDocs:
        url: http://developer.xero.com/documentation/api/accounting/batchpayments
      properties:
        BatchPaymentID:
          description: The Xero generated unique identifier for the bank transaction
            (read-only)
          type: string
          format: uuid
        Status:
          description: The status of the batch payment.
          type: string
          default: DELETED
      required:
      - Status
      - BatchPaymentID
      type: object
    BatchPaymentDeleteByUrlParam:
      externalDocs:
        url: http://developer.xero.com/documentation/api/accounting/batchpayments
      properties:
        Status:
          description: The status of the batch payment.
          type: string
          default: DELETED
      required:
      - Status
      type: object
    BrandingThemes:
      type: object
      x-objectArrayKey: branding_themes
      properties:
        BrandingThemes:
          type: array
          items:
            $ref: '#/components/schemas/BrandingTheme'
    BrandingTheme:
      externalDocs:
        url: http://developer.xero.com/documentation/api/branding-themes/
      properties:
        BrandingThemeID:
          description: Xero identifier
          type: string
          format: uuid
        Name:
          description: Name of branding theme
          type: string
        LogoUrl:
          description: The location of the image file used as the logo on this branding
            theme
          type: string
        Type:
          description: Always INVOICE
          type: string
          enum:
          - INVOICE
        SortOrder:
          description: "Integer \u2013 ranked order of branding theme. The default\
            \ branding theme has a value of 0"
          type: integer
        CreatedDateUTC:
          description: UTC timestamp of creation date of branding theme
          type: string
          x-is-msdate-time: true
          readOnly: true
      type: object
    PaymentServices:
      type: object
      x-objectArrayKey: payment_services
      properties:
        PaymentServices:
          type: array
          items:
            $ref: '#/components/schemas/PaymentService'
    PaymentService:
      externalDocs:
        url: http://developer.xero.com/documentation/api/branding-themes/
      properties:
        PaymentServiceID:
          description: Xero identifier
          type: string
          format: uuid
        PaymentServiceName:
          description: Name of payment service
          type: string
        PaymentServiceUrl:
          description: The custom payment URL
          type: string
        PayNowText:
          description: The text displayed on the Pay Now button in Xero Online Invoicing.
            If this is not set it will default to Pay by credit card
          type: string
        PaymentServiceType:
          description: This will always be CUSTOM for payment services created via
            the API.
          type: string
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    Contacts:
      type: object
      x-objectArrayKey: contacts
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
    Contact:
      externalDocs:
        url: http://developer.xero.com/documentation/api/contacts/
      properties:
        ContactID:
          description: Xero identifier
          type: string
          format: uuid
        MergedToContactID:
          description: ID for the destination of a merged contact. Only returned when
            using paging or when fetching a contact by ContactId or ContactNumber.
          type: string
          format: uuid
        ContactNumber:
          description: This can be updated via the API only i.e. This field is read
            only on the Xero contact screen, used to identify contacts in external
            systems (max length = 50). If the Contact Number is used, this is displayed
            as Contact Code in the Contacts UI in Xero.
          maxLength: 50
          type: string
        AccountNumber:
          description: A user defined account number. This can be updated via the
            API and the Xero UI (max length = 50)
          maxLength: 50
          type: string
        ContactStatus:
          description: "Current status of a contact \u2013 see contact status types"
          type: string
          enum:
          - ACTIVE
          - ARCHIVED
          - GDPRREQUEST
        Name:
          description: Full name of contact/organisation (max length = 255)
          maxLength: 255
          type: string
        FirstName:
          description: First name of contact person (max length = 255)
          maxLength: 255
          type: string
        LastName:
          description: Last name of contact person (max length = 255)
          maxLength: 255
          type: string
        CompanyNumber:
          description: Company registration number (max length = 50)
          maxLength: 50
          type: string
        EmailAddress:
          description: Email address of contact person (umlauts not supported) (max
            length  = 255)
          maxLength: 255
          type: string
        ContactPersons:
          description: See contact persons
          type: array
          items:
            $ref: '#/components/schemas/ContactPerson'
        BankAccountDetails:
          description: Bank account number of contact
          type: string
        TaxNumber:
          description: "Tax number of contact \u2013 this is also known as the ABN\
            \ (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number\
            \ (US and global) in the Xero UI depending on which regionalized version\
            \ of Xero you are using (max length = 50)"
          maxLength: 50
          type: string
        AccountsReceivableTaxType:
          description: The tax type from TaxRates
          type: string
        AccountsPayableTaxType:
          description: The tax type from TaxRates
          type: string
        Addresses:
          description: "Store certain address types for a contact \u2013 see address\
            \ types"
          type: array
          items:
            $ref: '#/components/schemas/Address'
        Phones:
          description: "Store certain phone types for a contact \u2013 see phone types"
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        IsSupplier:
          description: "true or false \u2013 Boolean that describes if a contact that\
            \ has any AP  invoices entered against them. Cannot be set via PUT or\
            \ POST \u2013 it is automatically set when an accounts payable invoice\
            \ is generated against this contact."
          type: boolean
        IsCustomer:
          description: "true or false \u2013 Boolean that describes if a contact has\
            \ any AR invoices entered against them. Cannot be set via PUT or POST\
            \ \u2013 it is automatically set when an accounts receivable invoice is\
            \ generated against this contact."
          type: boolean
        SalesDefaultLineAmountType:
          description: The default sales line amount type for a contact. Only available
            when summaryOnly parameter or paging is used, or when fetch by ContactId
            or ContactNumber.
          type: string
          enum:
          - INCLUSIVE
          - EXCLUSIVE
          - NONE
        PurchasesDefaultLineAmountType:
          description: The default purchases line amount type for a contact Only available
            when summaryOnly parameter or paging is used, or when fetch by ContactId
            or ContactNumber.
          type: string
          enum:
          - INCLUSIVE
          - EXCLUSIVE
          - NONE
        DefaultCurrency:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        XeroNetworkKey:
          description: Store XeroNetworkKey for contacts.
          type: string
        SalesDefaultAccountCode:
          description: The default sales account code for contacts
          type: string
        PurchasesDefaultAccountCode:
          description: The default purchases account code for contacts
          type: string
        SalesTrackingCategories:
          description: The default sales tracking categories for contacts
          type: array
          items:
            $ref: '#/components/schemas/SalesTrackingCategory'
        PurchasesTrackingCategories:
          description: The default purchases tracking categories for contacts
          type: array
          items:
            $ref: '#/components/schemas/SalesTrackingCategory'
        TrackingCategoryName:
          description: The name of the Tracking Category assigned to the contact under
            SalesTrackingCategories and PurchasesTrackingCategories
          type: string
        TrackingCategoryOption:
          description: The name of the Tracking Option assigned to the contact under
            SalesTrackingCategories and PurchasesTrackingCategories
          type: string
        PaymentTerms:
          $ref: '#/components/schemas/PaymentTerm'
        UpdatedDateUTC:
          description: UTC timestamp of last update to contact
          type: string
          x-is-msdate-time: true
          readOnly: true
        ContactGroups:
          description: Displays which contact groups a contact is included in
          type: array
          items:
            $ref: '#/components/schemas/ContactGroup'
        Website:
          description: Website address for contact (read only)
          readOnly: true
          type: string
        BrandingTheme:
          $ref: '#/components/schemas/BrandingTheme'
        BatchPayments:
          $ref: '#/components/schemas/BatchPaymentDetails'
        Discount:
          description: The default discount rate for the contact (read only)
          readOnly: true
          type: number
          format: double
          x-is-money: true
        Balances:
          $ref: '#/components/schemas/Balances'
        Attachments:
          description: Displays array of attachments from the API
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        HasAttachments:
          description: A boolean to indicate if a contact has an attachment
          type: boolean
          default: 'false'
        ValidationErrors:
          description: Displays validation errors returned from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        HasValidationErrors:
          description: A boolean to indicate if a contact has an validation errors
          type: boolean
          default: 'false'
        StatusAttributeString:
          description: Status of object
          type: string
      type: object
    Budgets:
      type: object
      x-objectArrayKey: budgets
      properties:
        Budgets:
          type: array
          items:
            $ref: '#/components/schemas/Budget'
    Budget:
      type: object
      externalDocs:
        url: http://developer.xero.com/documentation/api/budgets/
      properties:
        BudgetID:
          description: Xero identifier
          type: string
          format: uuid
        Type:
          description: Type of Budget. OVERALL or TRACKING
          type: string
          enum:
          - OVERALL
          - TRACKING
        Description:
          description: The Budget description
          maxLength: 255
          type: string
        UpdatedDateUTC:
          description: UTC timestamp of last update to budget
          type: string
          x-is-msdate-time: true
          readOnly: true
        BudgetLines:
          type: array
          items:
            $ref: '#/components/schemas/BudgetLine'
        Tracking:
          type: array
          items:
            $ref: '#/components/schemas/TrackingCategory'
    BudgetLine:
      type: object
      externalDocs:
        url: http://developer.xero.com/documentation/api/budgets/
      properties:
        AccountID:
          description: See Accounts
          type: string
          format: uuid
        AccountCode:
          description: See Accounts
          type: string
        BudgetBalances:
          type: array
          items:
            $ref: '#/components/schemas/BudgetBalance'
    BudgetBalance:
      type: object
      properties:
        Period:
          description: "Period the amount applies to (e.g. \u201C2019-08\u201D)"
          type: string
          x-is-msdate: true
        Amount:
          description: LineItem Quantity
          type: number
          format: double
          x-is-money: true
        UnitAmount:
          description: Budgeted amount
          type: number
          format: double
          x-is-money: true
        Notes:
          description: Any footnotes associated with this balance
          maxLength: 255
          type: string
    Balances:
      type: object
      description: The raw AccountsReceivable(sales invoices) and AccountsPayable(bills)
        outstanding and overdue amounts, not converted to base currency (read only)
      properties:
        AccountsReceivable:
          $ref: '#/components/schemas/AccountsReceivable'
        AccountsPayable:
          $ref: '#/components/schemas/AccountsPayable'
    AccountsReceivable:
      type: object
      properties:
        Outstanding:
          type: number
          format: double
          x-is-money: true
        Overdue:
          type: number
          format: double
          x-is-money: true
    AccountsPayable:
      type: object
      properties:
        Outstanding:
          type: number
          format: double
          x-is-money: true
        Overdue:
          type: number
          format: double
          x-is-money: true
    CISSettings:
      type: object
      x-objectArrayKey: cis_settings
      properties:
        CISSettings:
          type: array
          items:
            $ref: '#/components/schemas/CISSetting'
    CISSetting:
      externalDocs:
        url: http://developer.xero.com/documentation/api/contacts/
      properties:
        CISEnabled:
          description: Boolean that describes if the contact is a CIS Subcontractor
          type: boolean
        Rate:
          description: CIS Deduction rate for the contact if he is a subcontractor.
            If the contact is not CISEnabled, then the rate is not returned
          type: number
          format: double
          readOnly: true
          x-is-money: true
    CISOrgSettings:
      type: object
      x-objectArrayKey: cis_settings
      properties:
        CISSettings:
          type: array
          items:
            $ref: '#/components/schemas/CISOrgSetting'
    CISOrgSetting:
      externalDocs:
        url: https://developer.xero.com/documentation/api/organisation
      properties:
        CISContractorEnabled:
          description: true or false - Boolean that describes if the organisation
            is a CIS Contractor
          type: boolean
        CISSubContractorEnabled:
          description: true or false - Boolean that describes if the organisation
            is a CIS SubContractor
          type: boolean
        Rate:
          description: CIS Deduction rate for the organisation
          type: number
          format: double
          readOnly: true
          x-is-money: true
    ContactPerson:
      externalDocs:
        url: http://developer.xero.com/documentation/api/contacts/
      properties:
        FirstName:
          description: First name of person
          type: string
        LastName:
          description: Last name of person
          type: string
        EmailAddress:
          description: Email address of person
          type: string
        IncludeInEmails:
          description: boolean to indicate whether contact should be included on emails
            with invoices etc.
          type: boolean
      type: object
    ContactGroups:
      type: object
      x-objectArrayKey: contact_groups
      properties:
        ContactGroups:
          type: array
          items:
            $ref: '#/components/schemas/ContactGroup'
    ContactGroup:
      externalDocs:
        url: http://developer.xero.com/documentation/api/contactgroups/
      properties:
        Name:
          description: The Name of the contact group. Required when creating a new
            contact  group
          type: string
        Status:
          description: The Status of a contact group. To delete a contact group update
            the status to DELETED. Only contact groups with a status of ACTIVE are
            returned on GETs.
          type: string
          enum:
          - ACTIVE
          - DELETED
        ContactGroupID:
          description: "The Xero identifier for an contact group \u2013 specified\
            \ as a string following the endpoint name. e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9"
          type: string
          format: uuid
        Contacts:
          description: The ContactID and Name of Contacts in a contact group. Returned
            on GETs when the ContactGroupID is supplied in the URL.
          type: array
          items:
            $ref: '#/components/schemas/Contact'
      type: object
    RequestEmpty:
      externalDocs:
        url: http://developer.xero.com/documentation/api/invoice/
      properties:
        Status:
          description: Need at least one field to create an empty JSON payload
          type: string
      type: object
    CreditNotes:
      type: object
      x-objectArrayKey: credit_notes
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        CreditNotes:
          type: array
          items:
            $ref: '#/components/schemas/CreditNote'
    CreditNote:
      externalDocs:
        url: http://developer.xero.com/documentation/api/credit-notes/
      properties:
        Type:
          description: See Credit Note Types
          type: string
          enum:
          - ACCPAYCREDIT
          - ACCRECCREDIT
        Contact:
          $ref: '#/components/schemas/Contact'
        Date:
          description: The date the credit note is issued YYYY-MM-DD. If the Date
            element is not specified then it will default to the current date based
            on the timezone setting of the organisation
          type: string
          x-is-msdate: true
        DueDate:
          description: "Date invoice is due \u2013 YYYY-MM-DD"
          type: string
          x-is-msdate: true
        Status:
          description: See Credit Note Status Codes
          type: string
          enum:
          - DRAFT
          - SUBMITTED
          - DELETED
          - AUTHORISED
          - PAID
          - VOIDED
        LineAmountTypes:
          $ref: '#/components/schemas/LineAmountTypes'
          type: string
        LineItems:
          description: See Invoice Line Items
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        SubTotal:
          description: The subtotal of the credit note excluding taxes
          type: number
          format: double
          x-is-money: true
        TotalTax:
          description: The total tax on the credit note
          type: number
          format: double
          x-is-money: true
        Total:
          description: The total of the Credit Note(subtotal + total tax)
          type: number
          format: double
          x-is-money: true
        CISDeduction:
          description: CIS deduction for UK contractors
          readOnly: true
          type: number
          format: double
          x-is-money: true
        CISRate:
          description: CIS Deduction rate for the organisation
          type: number
          format: double
          readOnly: true
          x-is-money: true
        UpdatedDateUTC:
          description: UTC timestamp of last update to the credit note
          type: string
          x-is-msdate-time: true
          readOnly: true
        CurrencyCode:
          description: The specified currency code
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        FullyPaidOnDate:
          description: Date when credit note was fully paid(UTC format)
          type: string
          x-is-msdate: true
        CreditNoteID:
          description: Xero generated unique identifier
          type: string
          format: uuid
        CreditNoteNumber:
          description: "ACCRECCREDIT \u2013 Unique alpha numeric code identifying\
            \ credit note (when missing will auto-generate from your Organisation\
            \ Invoice Settings)"
          type: string
        Reference:
          description: "ACCRECCREDIT only \u2013 additional reference number"
          type: string
        SentToContact:
          description: "Boolean to set whether the credit note in the Xero app should\
            \ be marked as \u201Csent\u201D. This can be set only on credit notes\
            \ that have been approved"
          readOnly: true
          type: boolean
        CurrencyRate:
          description: The currency rate for a multicurrency invoice. If no rate is
            specified, the XE.com day rate is used
          type: number
          format: double
          x-is-money: true
        RemainingCredit:
          description: The remaining credit balance on the Credit Note
          type: number
          format: double
          x-is-money: true
        Allocations:
          description: See Allocations
          type: array
          items:
            $ref: '#/components/schemas/Allocation'
        AppliedAmount:
          description: The amount of applied to an invoice
          type: number
          format: double
          x-is-money: true
        Payments:
          description: See Payments
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        BrandingThemeID:
          description: See BrandingThemes
          type: string
          format: uuid
        StatusAttributeString:
          description: A string to indicate if a invoice status
          type: string
        HasAttachments:
          description: boolean to indicate if a credit note has an attachment
          type: boolean
          default: 'false'
        HasErrors:
          description: A boolean to indicate if a credit note has an validation errors
          type: boolean
          default: 'false'
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        InvoiceAddresses:
          description: An array of addresses used to auto calculate sales tax
          type: array
          items:
            $ref: '#/components/schemas/InvoiceAddress'
      type: object
    Allocations:
      type: object
      x-objectArrayKey: allocations
      properties:
        Allocations:
          type: array
          items:
            $ref: '#/components/schemas/Allocation'
    Allocation:
      externalDocs:
        url: http://developer.xero.com/documentation/api/prepayments/
      properties:
        AllocationID:
          description: Xero generated unique identifier
          type: string
          format: uuid
        Invoice:
          $ref: '#/components/schemas/Invoice'
        Overpayment:
          $ref: '#/components/schemas/Overpayment'
        Prepayment:
          $ref: '#/components/schemas/Prepayment'
        CreditNote:
          $ref: '#/components/schemas/CreditNote'
        Amount:
          description: the amount being applied to the invoice
          type: number
          format: double
          x-is-money: true
        Date:
          description: the date the allocation is applied YYYY-MM-DD.
          type: string
          x-is-msdate: true
        IsDeleted:
          description: A flag that returns true when the allocation is succesfully
            deleted
          type: boolean
          readOnly: true
        StatusAttributeString:
          description: A string to indicate if a invoice status
          type: string
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      required:
      - Amount
      - Invoice
      - Date
      type: object
    Currencies:
      type: object
      x-objectArrayKey: currencies
      properties:
        Currencies:
          type: array
          items:
            $ref: '#/components/schemas/Currency'
    Currency:
      externalDocs:
        url: http://developer.xero.com/documentation/api/currencies/
      properties:
        Code:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        Description:
          description: Name of Currency
          type: string
      type: object
    CurrencyCode:
      description: "3 letter alpha code for the currency \u2013 see list of currency\
        \ codes"
      type: string
      x-enum-varnames:
      - AED
      - AFN
      - ALL
      - AMD
      - ANG
      - AOA
      - ARS
      - AUD
      - AWG
      - AZN
      - BAM
      - BBD
      - BDT
      - BGN
      - BHD
      - BIF
      - BMD
      - BND
      - BOB
      - BRL
      - BSD
      - BTN
      - BWP
      - BYN
      - BYR
      - BZD
      - CAD
      - CDF
      - CHF
      - CLF
      - CLP
      - CNY
      - COP
      - CRC
      - CUC
      - CUP
      - CVE
      - CZK
      - DJF
      - DKK
      - DOP
      - DZD
      - EEK
      - EGP
      - ERN
      - ETB
      - EUR
      - FJD
      - FKP
      - GBP
      - GEL
      - GHS
      - GIP
      - GMD
      - GNF
      - GTQ
      - GYD
      - HKD
      - HNL
      - HRK
      - HTG
      - HUF
      - IDR
      - ILS
      - INR
      - IQD
      - IRR
      - ISK
      - JMD
      - JOD
      - JPY
      - KES
      - KGS
      - KHR
      - KMF
      - KPW
      - KRW
      - KWD
      - KYD
      - KZT
      - LAK
      - LBP
      - LKR
      - LRD
      - LSL
      - LTL
      - LVL
      - LYD
      - MAD
      - MDL
      - MGA
      - MKD
      - MMK
      - MNT
      - MOP
      - MRO
      - MRU
      - MUR
      - MVR
      - MWK
      - MXN
      - MXV
      - MYR
      - MZN
      - NAD
      - NGN
      - NIO
      - NOK
      - NPR
      - NZD
      - OMR
      - PAB
      - PEN
      - PGK
      - PHP
      - PKR
      - PLN
      - PYG
      - QAR
      - RON
      - RSD
      - RUB
      - RWF
      - SAR
      - SBD
      - SCR
      - SDG
      - SEK
      - SGD
      - SHP
      - SKK
      - SLE
      - SLL
      - SOS
      - SRD
      - STN
      - STD
      - SVC
      - SYP
      - SZL
      - THB
      - TJS
      - TMT
      - TND
      - TOP
      - TRY_LIRA
      - TTD
      - TWD
      - TZS
      - UAH
      - UGX
      - USD
      - UYU
      - UZS
      - VEF
      - VES
      - VND
      - VUV
      - WST
      - XAF
      - XCD
      - XOF
      - XPF
      - YER
      - ZAR
      - ZMW
      - ZMK
      - ZWD
      - EMPTY_CURRENCY
      enum:
      - AED
      - AFN
      - ALL
      - AMD
      - ANG
      - AOA
      - ARS
      - AUD
      - AWG
      - AZN
      - BAM
      - BBD
      - BDT
      - BGN
      - BHD
      - BIF
      - BMD
      - BND
      - BOB
      - BRL
      - BSD
      - BTN
      - BWP
      - BYN
      - BYR
      - BZD
      - CAD
      - CDF
      - CHF
      - CLF
      - CLP
      - CNY
      - COP
      - CRC
      - CUC
      - CUP
      - CVE
      - CZK
      - DJF
      - DKK
      - DOP
      - DZD
      - EEK
      - EGP
      - ERN
      - ETB
      - EUR
      - FJD
      - FKP
      - GBP
      - GEL
      - GHS
      - GIP
      - GMD
      - GNF
      - GTQ
      - GYD
      - HKD
      - HNL
      - HRK
      - HTG
      - HUF
      - IDR
      - ILS
      - INR
      - IQD
      - IRR
      - ISK
      - JMD
      - JOD
      - JPY
      - KES
      - KGS
      - KHR
      - KMF
      - KPW
      - KRW
      - KWD
      - KYD
      - KZT
      - LAK
      - LBP
      - LKR
      - LRD
      - LSL
      - LTL
      - LVL
      - LYD
      - MAD
      - MDL
      - MGA
      - MKD
      - MMK
      - MNT
      - MOP
      - MRO
      - MRU
      - MUR
      - MVR
      - MWK
      - MXN
      - MXV
      - MYR
      - MZN
      - NAD
      - NGN
      - NIO
      - NOK
      - NPR
      - NZD
      - OMR
      - PAB
      - PEN
      - PGK
      - PHP
      - PKR
      - PLN
      - PYG
      - QAR
      - RON
      - RSD
      - RUB
      - RWF
      - SAR
      - SBD
      - SCR
      - SDG
      - SEK
      - SGD
      - SHP
      - SKK
      - SLE
      - SLL
      - SOS
      - SRD
      - STD
      - STN
      - SVC
      - SYP
      - SZL
      - THB
      - TJS
      - TMT
      - TND
      - TOP
      - TRY
      - TTD
      - TWD
      - TZS
      - UAH
      - UGX
      - USD
      - UYU
      - UZS
      - VEF
      - VES
      - VND
      - VUV
      - WST
      - XAF
      - XCD
      - XOF
      - XPF
      - YER
      - ZAR
      - ZMW
      - ZMK
      - ZWD
    Employees:
      type: object
      x-objectArrayKey: employees
      properties:
        Employees:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
    Employee:
      externalDocs:
        url: http://developer.xero.com/documentation/api/employees/
      properties:
        EmployeeID:
          description: The Xero identifier for an employee e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
          type: string
          format: uuid
        Status:
          description: "Current status of an employee \u2013 see contact status types"
          type: string
          enum:
          - ACTIVE
          - ARCHIVED
          - GDPRREQUEST
          - DELETED
        FirstName:
          description: First name of an employee (max length = 255)
          maxLength: 255
          type: string
        LastName:
          description: Last name of an employee (max length = 255)
          maxLength: 255
          type: string
        ExternalLink:
          $ref: '#/components/schemas/ExternalLink'
        UpdatedDateUTC:
          type: string
          x-is-msdate-time: true
          readOnly: true
        StatusAttributeString:
          description: A string to indicate if a invoice status
          type: string
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      type: object
    ExpenseClaims:
      type: object
      x-objectArrayKey: expense_claims
      properties:
        ExpenseClaims:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseClaim'
    ExpenseClaim:
      externalDocs:
        url: http://developer.xero.com/documentation/api/expense-claims/
      properties:
        ExpenseClaimID:
          description: Xero generated unique identifier for an expense claim
          type: string
          format: uuid
        Status:
          description: "Current status of an expense claim \u2013 see status types"
          type: string
          enum:
          - SUBMITTED
          - AUTHORISED
          - PAID
          - VOIDED
          - DELETED
        Payments:
          description: See Payments
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        User:
          $ref: '#/components/schemas/User'
        Receipts:
          type: array
          items:
            $ref: '#/components/schemas/Receipt'
        UpdatedDateUTC:
          description: Last modified date UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        Total:
          description: The total of an expense claim being paid
          readOnly: true
          type: number
          format: double
          x-is-money: true
        AmountDue:
          description: The amount due to be paid for an expense claim
          readOnly: true
          type: number
          format: double
          x-is-money: true
        AmountPaid:
          description: The amount still to pay for an expense claim
          readOnly: true
          type: number
          format: double
          x-is-money: true
        PaymentDueDate:
          description: The date when the expense claim is due to be paid YYYY-MM-DD
          readOnly: true
          type: string
          x-is-msdate: true
        ReportingDate:
          description: The date the expense claim will be reported in Xero YYYY-MM-DD
          readOnly: true
          type: string
          x-is-msdate: true
        ReceiptID:
          description: The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9
          type: string
          format: uuid
      type: object
    HistoryRecords:
      type: object
      x-objectArrayKey: history_records
      properties:
        HistoryRecords:
          type: array
          items:
            $ref: '#/components/schemas/HistoryRecord'
    HistoryRecord:
      externalDocs:
        url: https://developer.xero.com/documentation/api/history-and-notes
      properties:
        Details:
          description: details
          type: string
        Changes:
          description: Name of branding theme
          type: string
        User:
          description: has a value of 0
          type: string
        DateUTC:
          description: UTC timestamp of creation date of branding theme
          type: string
          x-is-msdate-time: true
          readOnly: true
      type: object
    Invoices:
      type: object
      x-objectArrayKey: invoices
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Invoices:
          type: array
          items:
            $ref: '#/components/schemas/Invoice'
    Invoice:
      externalDocs:
        url: http://developer.xero.com/documentation/api/invoices/
      properties:
        Type:
          description: See Invoice Types
          type: string
          enum:
          - ACCPAY
          - ACCPAYCREDIT
          - APOVERPAYMENT
          - APPREPAYMENT
          - ACCREC
          - ACCRECCREDIT
          - AROVERPAYMENT
          - ARPREPAYMENT
        Contact:
          $ref: '#/components/schemas/Contact'
        LineItems:
          description: See LineItems
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        Date:
          description: "Date invoice was issued \u2013 YYYY-MM-DD. If the Date element\
            \ is not specified it will default to the current date based on the timezone\
            \ setting of the organisation"
          type: string
          x-is-msdate: true
        DueDate:
          description: "Date invoice is due \u2013 YYYY-MM-DD"
          type: string
          x-is-msdate: true
        LineAmountTypes:
          $ref: '#/components/schemas/LineAmountTypes'
          type: string
        InvoiceNumber:
          description: "ACCREC \u2013 Unique alpha numeric code identifying invoice\
            \ (when missing will auto-generate from your Organisation Invoice Settings)\
            \ (max length = 255)"
          maxLength: 255
          type: string
        Reference:
          description: "ACCREC only \u2013 additional reference number"
          type: string
        BrandingThemeID:
          description: See BrandingThemes
          type: string
          format: uuid
        Url:
          description: "URL link to a source document \u2013 shown as \u201CGo to\
            \ [appName]\u201D in the Xero app"
          type: string
        CurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        CurrencyRate:
          description: The currency rate for a multicurrency invoice. If no rate is
            specified, the XE.com day rate is used. (max length = [18].[6])
          type: number
          format: double
          x-is-money: true
        Status:
          description: See Invoice Status Codes
          type: string
          enum:
          - DRAFT
          - SUBMITTED
          - DELETED
          - AUTHORISED
          - PAID
          - VOIDED
        SentToContact:
          description: "Boolean to set whether the invoice in the Xero app should\
            \ be marked as \u201Csent\u201D. This can be set only on invoices that\
            \ have been approved"
          type: boolean
        ExpectedPaymentDate:
          description: Shown on sales invoices (Accounts Receivable) when this has
            been set
          type: string
          x-is-msdate: true
        PlannedPaymentDate:
          description: Shown on bills (Accounts Payable) when this has been set
          type: string
          x-is-msdate: true
        CISDeduction:
          description: CIS deduction for UK contractors
          readOnly: true
          type: number
          format: double
          x-is-money: true
        CISRate:
          description: CIS Deduction rate for the organisation
          type: number
          format: double
          readOnly: true
          x-is-money: true
        SubTotal:
          description: Total of invoice excluding taxes
          readOnly: true
          type: number
          format: double
          x-is-money: true
        TotalTax:
          description: Total tax on invoice
          readOnly: true
          type: number
          format: double
          x-is-money: true
        Total:
          description: "Total of Invoice tax inclusive (i.e. SubTotal + TotalTax).\
            \ This will be ignored if it doesn\u2019t equal the sum of the LineAmounts"
          readOnly: true
          type: number
          format: double
          x-is-money: true
        TotalDiscount:
          description: Total of discounts applied on the invoice line items
          readOnly: true
          type: number
          format: double
          x-is-money: true
        InvoiceID:
          description: Xero generated unique identifier for invoice
          type: string
          format: uuid
        RepeatingInvoiceID:
          description: Xero generated unique identifier for repeating invoices
          type: string
          format: uuid
        HasAttachments:
          description: boolean to indicate if an invoice has an attachment
          readOnly: true
          type: boolean
          default: 'false'
        IsDiscounted:
          description: boolean to indicate if an invoice has a discount
          readOnly: true
          type: boolean
        Payments:
          description: See Payments
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        Prepayments:
          description: See Prepayments
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Prepayment'
        Overpayments:
          description: See Overpayments
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Overpayment'
        AmountDue:
          description: Amount remaining to be paid on invoice
          readOnly: true
          type: number
          format: double
          x-is-money: true
        AmountPaid:
          description: Sum of payments received for invoice
          readOnly: true
          type: number
          format: double
          x-is-money: true
        FullyPaidOnDate:
          description: The date the invoice was fully paid. Only returned on fully
            paid invoices
          readOnly: true
          type: string
          x-is-msdate: true
        AmountCredited:
          description: Sum of all credit notes, over-payments and pre-payments applied
            to invoice
          readOnly: true
          type: number
          format: double
          x-is-money: true
        UpdatedDateUTC:
          description: Last modified date UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        CreditNotes:
          description: Details of credit notes that have been applied to an invoice
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/CreditNote'
        Attachments:
          description: Displays array of attachments from the API
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        HasErrors:
          description: A boolean to indicate if a invoice has an validation errors
          type: boolean
          default: 'false'
        StatusAttributeString:
          description: A string to indicate if a invoice status
          type: string
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        InvoiceAddresses:
          description: An array of addresses used to auto calculate sales tax
          type: array
          items:
            $ref: '#/components/schemas/InvoiceAddress'
      type: object
    OnlineInvoices:
      type: object
      x-objectArrayKey: online_invoices
      properties:
        OnlineInvoices:
          type: array
          items:
            $ref: '#/components/schemas/OnlineInvoice'
    OnlineInvoice:
      externalDocs:
        url: http://developer.xero.com/documentation/api/invoices/
      properties:
        OnlineInvoiceUrl:
          description: the URL to an online invoice
          type: string
      type: object
    InvoiceReminders:
      type: object
      x-objectArrayKey: invoice_reminders
      properties:
        InvoiceReminders:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceReminder'
    InvoiceReminder:
      externalDocs:
        url: http://developer.xero.com/documentation/api/invoice-reminders/
      properties:
        Enabled:
          description: setting for on or off
          type: boolean
      type: object
    Items:
      type: object
      x-objectArrayKey: items
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
    Item:
      externalDocs:
        url: http://developer.xero.com/documentation/api/items/
      properties:
        Code:
          description: User defined item code (max length = 30)
          maxLength: 30
          type: string
        InventoryAssetAccountCode:
          description: The inventory asset account for the item. The account must
            be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also
            required to create a tracked item
          type: string
        Name:
          description: The name of the item (max length = 50)
          maxLength: 50
          type: string
        IsSold:
          description: Boolean value, defaults to true. When IsSold is true the item
            will be available on sales transactions in the Xero UI. If IsSold is updated
            to false then Description and SalesDetails values will be nulled.
          type: boolean
        IsPurchased:
          description: Boolean value, defaults to true. When IsPurchased is true the
            item is available for purchase transactions in the Xero UI. If IsPurchased
            is updated to false then PurchaseDescription and PurchaseDetails values
            will be nulled.
          type: boolean
        Description:
          description: The sales description of the item (max length = 4000)
          maxLength: 4000
          type: string
        PurchaseDescription:
          description: The purchase description of the item (max length = 4000)
          maxLength: 4000
          type: string
        PurchaseDetails:
          $ref: '#/components/schemas/Purchase'
        SalesDetails:
          $ref: '#/components/schemas/Purchase'
        IsTrackedAsInventory:
          description: True for items that are tracked as inventory. An item will
            be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode
            are set.
          type: boolean
        TotalCostPool:
          description: The value of the item on hand. Calculated using average cost
            accounting.
          type: number
          format: double
          x-is-money: true
        QuantityOnHand:
          description: The quantity of the item on hand
          type: number
          format: double
          x-is-money: true
        UpdatedDateUTC:
          description: Last modified date in UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        ItemID:
          description: The Xero identifier for an Item
          type: string
          format: uuid
        StatusAttributeString:
          description: Status of object
          type: string
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      required:
      - Code
      type: object
    Purchase:
      externalDocs:
        url: http://developer.xero.com/documentation/api/items/
      properties:
        UnitPrice:
          description: Unit Price of the item. By default UnitPrice is rounded to
            two decimal places. You can use 4 decimal places by adding the unitdp=4
            querystring parameter to your request.
          type: number
          format: double
          x-is-money: true
        AccountCode:
          description: Default account code to be used for purchased/sale. Not applicable
            to the purchase details of tracked items
          type: string
        COGSAccountCode:
          description: Cost of goods sold account. Only applicable to the purchase
            details of tracked items.
          type: string
        TaxType:
          description: The tax type from TaxRates
          type: string
      type: object
    Journals:
      type: object
      x-objectArrayKey: journals
      properties:
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Journals:
          type: array
          items:
            $ref: '#/components/schemas/Journal'
    Journal:
      externalDocs:
        url: http://developer.xero.com/documentation/api/journals/
      properties:
        JournalID:
          description: Xero identifier
          type: string
          format: uuid
        JournalDate:
          description: Date the journal was posted
          type: string
          x-is-msdate: true
        JournalNumber:
          description: Xero generated journal number
          type: integer
        CreatedDateUTC:
          description: Created date UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        Reference:
          description: reference field for additional indetifying information
          type: string
        SourceID:
          description: The identifier for the source transaction (e.g. InvoiceID)
          type: string
          format: uuid
        SourceType:
          description: The journal source type. The type of transaction that created
            the journal
          type: string
          enum:
          - ACCREC
          - ACCPAY
          - ACCRECCREDIT
          - ACCPAYCREDIT
          - ACCRECPAYMENT
          - ACCPAYPAYMENT
          - ARCREDITPAYMENT
          - APCREDITPAYMENT
          - CASHREC
          - CASHPAID
          - TRANSFER
          - ARPREPAYMENT
          - APPREPAYMENT
          - AROVERPAYMENT
          - APOVERPAYMENT
          - EXPCLAIM
          - EXPPAYMENT
          - MANJOURNAL
          - PAYSLIP
          - WAGEPAYABLE
          - INTEGRATEDPAYROLLPE
          - INTEGRATEDPAYROLLPT
          - EXTERNALSPENDMONEY
          - INTEGRATEDPAYROLLPTPAYMENT
          - INTEGRATEDPAYROLLCN
        JournalLines:
          description: See JournalLines
          type: array
          items:
            $ref: '#/components/schemas/JournalLine'
      type: object
    JournalLine:
      externalDocs:
        url: https://developer.xero.com/documentation/api/journals#JournalLines
      properties:
        JournalLineID:
          description: Xero identifier for Journal
          type: string
          format: uuid
        AccountID:
          description: See Accounts
          type: string
          format: uuid
        AccountCode:
          description: See Accounts
          type: string
        AccountType:
          $ref: '#/components/schemas/AccountType'
          type: string
        AccountName:
          description: See AccountCodes
          type: string
        Description:
          description: The description from the source transaction line item. Only
            returned if populated.
          type: string
        NetAmount:
          description: Net amount of journal line. This will be a positive value for
            a debit and negative for a credit
          type: number
          format: double
          x-is-money: true
        GrossAmount:
          description: Gross amount of journal line (NetAmount + TaxAmount).
          type: number
          format: double
          x-is-money: true
        TaxAmount:
          description: Total tax on a journal line
          type: number
          format: double
          x-is-money: true
          readOnly: true
        TaxType:
          description: The tax type from taxRates
          type: string
        TaxName:
          description: see TaxRates
          type: string
        TrackingCategories:
          description: "Optional Tracking Category \u2013 see Tracking. Any JournalLine\
            \ can have a maximum of 2 <TrackingCategory> elements."
          type: array
          items:
            $ref: '#/components/schemas/TrackingCategory'
      type: object
    LinkedTransactions:
      type: object
      x-objectArrayKey: linked_transactions
      properties:
        LinkedTransactions:
          type: array
          items:
            $ref: '#/components/schemas/LinkedTransaction'
    LinkedTransaction:
      externalDocs:
        url: http://developer.xero.com/documentation/api/linked-transactions/
      properties:
        SourceTransactionID:
          description: Filter by the SourceTransactionID. Get all the linked transactions
            created from a particular ACCPAY invoice
          type: string
          format: uuid
        SourceLineItemID:
          description: The line item identifier from the source transaction.
          type: string
          format: uuid
        ContactID:
          description: Filter by the combination of ContactID and Status. Get all
            the linked transactions that have been assigned to a particular customer
            and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.
          type: string
          format: uuid
        TargetTransactionID:
          description: Filter by the TargetTransactionID. Get all the linked transactions  allocated
            to a particular ACCREC invoice
          type: string
          format: uuid
        TargetLineItemID:
          description: The line item identifier from the target transaction. It is
            possible  to link multiple billable expenses to the same TargetLineItemID.
          type: string
          format: uuid
        LinkedTransactionID:
          description: The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9
          type: string
          format: uuid
        Status:
          description: Filter by the combination of ContactID and Status. Get all
            the linked transactions that have been assigned to a particular customer
            and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.
          type: string
          enum:
          - APPROVED
          - DRAFT
          - ONDRAFT
          - BILLED
          - VOIDED
        Type:
          description: This will always be BILLABLEEXPENSE. More types may be added
            in future.
          type: string
          enum:
          - BILLABLEEXPENSE
        UpdatedDateUTC:
          description: The last modified date in UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        SourceTransactionTypeCode:
          description: The Type of the source tranasction. This will be ACCPAY if
            the linked transaction was created from an invoice and SPEND if it was
            created from a bank transaction.
          type: string
          enum:
          - ACCPAY
          - SPEND
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      type: object
    ManualJournals:
      type: object
      x-objectArrayKey: manual_journals
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        ManualJournals:
          type: array
          items:
            $ref: '#/components/schemas/ManualJournal'
    ManualJournal:
      externalDocs:
        url: http://developer.xero.com/documentation/api/manual-journals/
      properties:
        Narration:
          description: Description of journal being posted
          type: string
        JournalLines:
          description: See JournalLines
          type: array
          items:
            $ref: '#/components/schemas/ManualJournalLine'
        Date:
          description: "Date journal was posted \u2013 YYYY-MM-DD"
          type: string
          x-is-msdate: true
        LineAmountTypes:
          $ref: '#/components/schemas/LineAmountTypes'
          type: string
        Status:
          description: See Manual Journal Status Codes
          type: string
          enum:
          - DRAFT
          - POSTED
          - DELETED
          - VOIDED
          - ARCHIVED
        Url:
          description: "Url link to a source document \u2013 shown as \u201CGo to\
            \ [appName]\u201D in the Xero app"
          type: string
        ShowOnCashBasisReports:
          description: "Boolean \u2013 default is true if not specified"
          type: boolean
        HasAttachments:
          description: Boolean to indicate if a manual journal has an attachment
          readOnly: true
          type: boolean
          default: 'false'
        UpdatedDateUTC:
          description: Last modified date UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        ManualJournalID:
          description: The Xero identifier for a Manual Journal
          type: string
          format: uuid
        StatusAttributeString:
          description: A string to indicate if a invoice status
          type: string
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Attachments:
          description: Displays array of attachments from the API
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
      - Narration
      type: object
    ManualJournalLine:
      externalDocs:
        url: http://developer.xero.com/documentation/api/manual-journals/
      properties:
        LineAmount:
          description: total for line. Debits are positive, credits are negative value
          type: number
          format: double
          x-is-money: true
        AccountCode:
          description: See Accounts
          type: string
        AccountID:
          description: See Accounts
          type: string
          format: uuid
        Description:
          description: Description for journal line
          type: string
        TaxType:
          description: The tax type from TaxRates
          type: string
        Tracking:
          description: "Optional Tracking Category \u2013 see Tracking. Any JournalLine\
            \ can have a maximum of 2 <TrackingCategory> elements."
          type: array
          items:
            $ref: '#/components/schemas/TrackingCategory'
        TaxAmount:
          description: The calculated tax amount based on the TaxType and LineAmount
          type: number
          format: double
          x-is-money: true
        IsBlank:
          description: is the line blank
          type: boolean
      type: object
    Actions:
      type: object
      x-objectArrayKey: actions
      properties:
        Actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
    Action:
      externalDocs:
        url: http://developer.xero.com/documentation/api/organisation/
      properties:
        Name:
          description: Name of the actions for this organisation
          type: string
        Status:
          description: Status of the action for this organisation
          type: string
          enum:
          - ALLOWED
          - NOT-ALLOWED
    Organisations:
      type: object
      x-objectArrayKey: organisations
      properties:
        Organisations:
          type: array
          items:
            $ref: '#/components/schemas/Organisation'
    Organisation:
      externalDocs:
        url: http://developer.xero.com/documentation/api/organisation/
      properties:
        OrganisationID:
          description: Unique Xero identifier
          type: string
          format: uuid
        APIKey:
          description: Display a unique key used for Xero-to-Xero transactions
          type: string
        Name:
          description: Display name of organisation shown in Xero
          type: string
        LegalName:
          description: Organisation name shown on Reports
          type: string
        PaysTax:
          description: Boolean to describe if organisation is registered with a local
            tax authority i.e. true, false
          type: boolean
        Version:
          description: See Version Types
          type: string
          enum:
          - AU
          - NZ
          - GLOBAL
          - UK
          - US
          - AUONRAMP
          - NZONRAMP
          - GLOBALONRAMP
          - UKONRAMP
          - USONRAMP
        OrganisationType:
          description: Organisation Type
          type: string
          enum:
          - ACCOUNTING_PRACTICE
          - COMPANY
          - CHARITY
          - CLUB_OR_SOCIETY
          - INDIVIDUAL
          - LOOK_THROUGH_COMPANY
          - NOT_FOR_PROFIT
          - PARTNERSHIP
          - S_CORPORATION
          - SELF_MANAGED_SUPERANNUATION_FUND
          - SOLE_TRADER
          - SUPERANNUATION_FUND
          - TRUST
        BaseCurrency:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        CountryCode:
          $ref: '#/components/schemas/CountryCode'
          type: string
        IsDemoCompany:
          description: Boolean to describe if organisation is a demo company.
          type: boolean
        OrganisationStatus:
          description: Will be set to ACTIVE if you can connect to organisation via
            the Xero API
          type: string
        RegistrationNumber:
          description: Shows for New Zealand, Australian and UK organisations
          type: string
        EmployerIdentificationNumber:
          description: Shown if set. US Only.
          type: string
        TaxNumber:
          description: Shown if set. Displays in the Xero UI as Tax File Number (AU),
            GST Number (NZ), VAT Number (UK) and Tax ID Number (US & Global).
          type: string
        FinancialYearEndDay:
          description: Calendar day e.g. 0-31
          type: integer
        FinancialYearEndMonth:
          description: Calendar Month e.g. 1-12
          type: integer
        SalesTaxBasis:
          description: The accounting basis used for tax returns. See Sales Tax Basis
          type: string
          enum:
          - PAYMENTS
          - INVOICE
          - NONE
          - CASH
          - ACCRUAL
          - FLATRATECASH
          - FLATRATEACCRUAL
          - ACCRUALS
        SalesTaxPeriod:
          description: The frequency with which tax returns are processed. See Sales
            Tax Period
          type: string
          enum:
          - MONTHLY
          - QUARTERLY1
          - QUARTERLY2
          - QUARTERLY3
          - ANNUALLY
          - ONEMONTHS
          - TWOMONTHS
          - SIXMONTHS
          - 1MONTHLY
          - 2MONTHLY
          - 3MONTHLY
          - 6MONTHLY
          - QUARTERLY
          - YEARLY
          - NONE
        DefaultSalesTax:
          description: The default for LineAmountTypes on sales transactions
          type: string
        DefaultPurchasesTax:
          description: The default for LineAmountTypes on purchase transactions
          type: string
        PeriodLockDate:
          description: Shown if set. See lock dates
          type: string
          x-is-msdate: true
        EndOfYearLockDate:
          description: Shown if set. See lock dates
          type: string
          x-is-msdate: true
        CreatedDateUTC:
          description: Timestamp when the organisation was created in Xero
          type: string
          x-is-msdate-time: true
          readOnly: true
        Timezone:
          $ref: '#/components/schemas/TimeZone'
          type: string
        OrganisationEntityType:
          description: Organisation Entity Type
          type: string
          enum:
          - ACCOUNTING_PRACTICE
          - COMPANY
          - CHARITY
          - CLUB_OR_SOCIETY
          - INDIVIDUAL
          - LOOK_THROUGH_COMPANY
          - NOT_FOR_PROFIT
          - PARTNERSHIP
          - S_CORPORATION
          - SELF_MANAGED_SUPERANNUATION_FUND
          - SOLE_TRADER
          - SUPERANNUATION_FUND
          - TRUST
        ShortCode:
          description: A unique identifier for the organisation. Potential uses.
          type: string
        Class:
          description: Organisation Classes describe which plan the Xero organisation
            is on (e.g. DEMO, TRIAL, PREMIUM)
          type: string
          enum:
          - DEMO
          - TRIAL
          - STARTER
          - STANDARD
          - PREMIUM
          - PREMIUM_20
          - PREMIUM_50
          - PREMIUM_100
          - LEDGER
          - GST_CASHBOOK
          - NON_GST_CASHBOOK
          - ULTIMATE
          - LITE
          - ULTIMATE_10
          - ULTIMATE_20
          - ULTIMATE_50
          - ULTIMATE_100
          - IGNITE
          - GROW
          - COMPREHENSIVE
          - SIMPLE
        Edition:
          description: BUSINESS or PARTNER. Partner edition organisations are sold
            exclusively through accounting partners and have restricted functionality
            (e.g. no access to invoicing)
          type: string
          enum:
          - BUSINESS
          - PARTNER
        LineOfBusiness:
          description: Description of business type as defined in Organisation settings
          type: string
        Addresses:
          description: "Address details for organisation \u2013 see Addresses"
          type: array
          items:
            $ref: '#/components/schemas/AddressForOrganisation'
        Phones:
          description: "Phones details for organisation \u2013 see Phones"
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        ExternalLinks:
          description: Organisation profile links for popular services such as Facebook,Twitter,
            GooglePlus and LinkedIn. You can also add link to your website here. Shown
            if Organisation settings  is updated in Xero. See ExternalLinks below
          type: array
          items:
            $ref: '#/components/schemas/ExternalLink'
        PaymentTerms:
          $ref: '#/components/schemas/PaymentTerm'
      type: object
    CountryCode:
      type: string
      enum:
      - AD
      - AE
      - AF
      - AG
      - AI
      - AL
      - AM
      - AN
      - AO
      - AQ
      - AR
      - AS
      - AT
      - AU
      - AW
      - AZ
      - BA
      - BB
      - BD
      - BE
      - BF
      - BG
      - BH
      - BI
      - BJ
      - BL
      - BM
      - BN
      - BO
      - BR
      - BS
      - BT
      - BW
      - BY
      - BZ
      - CA
      - CC
      - CD
      - CF
      - CG
      - CH
      - CI
      - CK
      - CL
      - CM
      - CN
      - CO
      - CR
      - CU
      - CV
      - CW
      - CX
      - CY
      - CZ
      - DE
      - DJ
      - DK
      - DM
      - DO
      - DZ
      - EC
      - EE
      - EG
      - EH
      - ER
      - ES
      - ET
      - FI
      - FJ
      - FK
      - FM
      - FO
      - FR
      - GA
      - GB
      - GD
      - GE
      - GG
      - GH
      - GI
      - GL
      - GM
      - GN
      - GQ
      - GR
      - GT
      - GU
      - GW
      - GY
      - HK
      - HN
      - HR
      - HT
      - HU
      - ID
      - IE
      - IL
      - IM
      - IN
      - IO
      - IQ
      - IR
      - IS
      - IT
      - JE
      - JM
      - JO
      - JP
      - KE
      - KG
      - KH
      - KI
      - KM
      - KN
      - KP
      - KR
      - KW
      - KY
      - KZ
      - LA
      - LB
      - LC
      - LI
      - LK
      - LR
      - LS
      - LT
      - LU
      - LV
      - LY
      - MA
      - MC
      - MD
      - ME
      - MF
      - MG
      - MH
      - MK
      - ML
      - MM
      - MN
      - MO
      - MP
      - MR
      - MS
      - MT
      - MU
      - MV
      - MW
      - MX
      - MY
      - MZ
      - NA
      - NC
      - NE
      - NG
      - NI
      - NL
      - 'NO'
      - NP
      - NR
      - NU
      - NZ
      - OM
      - PA
      - PE
      - PF
      - PG
      - PH
      - PK
      - PL
      - PM
      - PN
      - PR
      - PS
      - PT
      - PW
      - PY
      - QA
      - RE
      - RO
      - RS
      - RU
      - RW
      - SA
      - SB
      - SC
      - SD
      - SE
      - SG
      - SH
      - SI
      - SJ
      - SK
      - SL
      - SM
      - SN
      - SO
      - SR
      - SS
      - ST
      - SV
      - SX
      - SY
      - SZ
      - TC
      - TD
      - TG
      - TH
      - TJ
      - TK
      - TL
      - TM
      - TN
      - TO
      - TR
      - TT
      - TV
      - TW
      - TZ
      - UA
      - UG
      - US
      - UY
      - UZ
      - VA
      - VC
      - VE
      - VG
      - VI
      - VN
      - VU
      - WF
      - WS
      - XK
      - YE
      - YT
      - ZA
      - ZM
      - ZW
    TimeZone:
      description: Timezone specifications
      type: string
      enum:
      - AFGHANISTANSTANDARDTIME
      - ALASKANSTANDARDTIME
      - ALEUTIANSTANDARDTIME
      - ALTAISTANDARDTIME
      - ARABIANSTANDARDTIME
      - ARABICSTANDARDTIME
      - ARABSTANDARDTIME
      - ARGENTINASTANDARDTIME
      - ASTRAKHANSTANDARDTIME
      - ATLANTICSTANDARDTIME
      - AUSCENTRALSTANDARDTIME
      - AUSCENTRALWSTANDARDTIME
      - AUSEASTERNSTANDARDTIME
      - AZERBAIJANSTANDARDTIME
      - AZORESSTANDARDTIME
      - BAHIASTANDARDTIME
      - BANGLADESHSTANDARDTIME
      - BELARUSSTANDARDTIME
      - BOUGAINVILLESTANDARDTIME
      - CANADACENTRALSTANDARDTIME
      - CAPEVERDESTANDARDTIME
      - CAUCASUSSTANDARDTIME
      - CENAUSTRALIASTANDARDTIME
      - CENTRALAMERICASTANDARDTIME
      - CENTRALASIASTANDARDTIME
      - CENTRALBRAZILIANSTANDARDTIME
      - CENTRALEUROPEANSTANDARDTIME
      - CENTRALEUROPESTANDARDTIME
      - CENTRALPACIFICSTANDARDTIME
      - CENTRALSTANDARDTIME
      - CENTRALSTANDARDTIME(MEXICO)
      - CHATHAMISLANDSSTANDARDTIME
      - CHINASTANDARDTIME
      - CUBASTANDARDTIME
      - DATELINESTANDARDTIME
      - EAFRICASTANDARDTIME
      - EASTERISLANDSTANDARDTIME
      - EASTERNSTANDARDTIME
      - EASTERNSTANDARDTIME(MEXICO)
      - EAUSTRALIASTANDARDTIME
      - EEUROPESTANDARDTIME
      - EGYPTSTANDARDTIME
      - EKATERINBURGSTANDARDTIME
      - ESOUTHAMERICASTANDARDTIME
      - FIJISTANDARDTIME
      - FLESTANDARDTIME
      - GEORGIANSTANDARDTIME
      - GMTSTANDARDTIME
      - GREENLANDSTANDARDTIME
      - GREENWICHSTANDARDTIME
      - GTBSTANDARDTIME
      - HAITISTANDARDTIME
      - HAWAIIANSTANDARDTIME
      - INDIASTANDARDTIME
      - IRANSTANDARDTIME
      - ISRAELSTANDARDTIME
      - JORDANSTANDARDTIME
      - KALININGRADSTANDARDTIME
      - KAMCHATKASTANDARDTIME
      - KOREASTANDARDTIME
      - LIBYASTANDARDTIME
      - LINEISLANDSSTANDARDTIME
      - LORDHOWESTANDARDTIME
      - MAGADANSTANDARDTIME
      - MAGALLANESSTANDARDTIME
      - MARQUESASSTANDARDTIME
      - MAURITIUSSTANDARDTIME
      - MIDATLANTICSTANDARDTIME
      - MIDDLEEASTSTANDARDTIME
      - MONTEVIDEOSTANDARDTIME
      - MOROCCOSTANDARDTIME
      - MOUNTAINSTANDARDTIME
      - MOUNTAINSTANDARDTIME(MEXICO)
      - MYANMARSTANDARDTIME
      - NAMIBIASTANDARDTIME
      - NCENTRALASIASTANDARDTIME
      - NEPALSTANDARDTIME
      - NEWFOUNDLANDSTANDARDTIME
      - NEWZEALANDSTANDARDTIME
      - NORFOLKSTANDARDTIME
      - NORTHASIAEASTSTANDARDTIME
      - NORTHASIASTANDARDTIME
      - NORTHKOREASTANDARDTIME
      - OMSKSTANDARDTIME
      - PACIFICSASTANDARDTIME
      - PACIFICSTANDARDTIME
      - PACIFICSTANDARDTIME(MEXICO)
      - PAKISTANSTANDARDTIME
      - PARAGUAYSTANDARDTIME
      - QYZYLORDASTANDARDTIME
      - ROMANCESTANDARDTIME
      - RUSSIANSTANDARDTIME
      - RUSSIATIMEZONE10
      - RUSSIATIMEZONE11
      - RUSSIATIMEZONE3
      - SAEASTERNSTANDARDTIME
      - SAINTPIERRESTANDARDTIME
      - SAKHALINSTANDARDTIME
      - SAMOASTANDARDTIME
      - SAOTOMESTANDARDTIME
      - SAPACIFICSTANDARDTIME
      - SARATOVSTANDARDTIME
      - SAWESTERNSTANDARDTIME
      - SEASIASTANDARDTIME
      - SINGAPORESTANDARDTIME
      - SOUTHAFRICASTANDARDTIME
      - SOUTHSUDANSTANDARDTIME
      - SRILANKASTANDARDTIME
      - SUDANSTANDARDTIME
      - SYRIASTANDARDTIME
      - TAIPEISTANDARDTIME
      - TASMANIASTANDARDTIME
      - TOCANTINSSTANDARDTIME
      - TOKYOSTANDARDTIME
      - TOMSKSTANDARDTIME
      - TONGASTANDARDTIME
      - TRANSBAIKALSTANDARDTIME
      - TURKEYSTANDARDTIME
      - TURKSANDCAICOSSTANDARDTIME
      - ULAANBAATARSTANDARDTIME
      - USEASTERNSTANDARDTIME
      - USMOUNTAINSTANDARDTIME
      - UTC
      - UTC+12
      - UTC+13
      - UTC02
      - UTC08
      - UTC09
      - UTC11
      - VENEZUELASTANDARDTIME
      - VLADIVOSTOKSTANDARDTIME
      - VOLGOGRADSTANDARDTIME
      - WAUSTRALIASTANDARDTIME
      - WCENTRALAFRICASTANDARDTIME
      - WESTASIASTANDARDTIME
      - WESTBANKSTANDARDTIME
      - WESTPACIFICSTANDARDTIME
      - WEUROPESTANDARDTIME
      - WMONGOLIASTANDARDTIME
      - YAKUTSKSTANDARDTIME
      - YUKONSTANDARDTIME
    PaymentTerm:
      externalDocs:
        url: http://developer.xero.com/documentation/api/organisation/
      properties:
        Bills:
          $ref: '#/components/schemas/Bill'
        Sales:
          $ref: '#/components/schemas/Bill'
      type: object
    PaymentTermType:
      type: string
      enum:
      - DAYSAFTERBILLDATE
      - DAYSAFTERBILLMONTH
      - OFCURRENTMONTH
      - OFFOLLOWINGMONTH
    ExternalLink:
      externalDocs:
        url: http://developer.xero.com/documentation/api/organisation/
      properties:
        LinkType:
          description: See External link types
          type: string
          enum:
          - Facebook
          - GooglePlus
          - LinkedIn
          - Twitter
          - Website
        Url:
          description: URL for service e.g. http://twitter.com/xeroapi
          type: string
        Description:
          type: string
      type: object
    Bill:
      externalDocs:
        url: http://developer.xero.com/documentation/api/organisation/
      properties:
        Day:
          description: Day of Month (0-31)
          type: integer
        Type:
          $ref: '#/components/schemas/PaymentTermType'
      type: object
    Overpayments:
      type: object
      x-objectArrayKey: overpayments
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Overpayments:
          type: array
          items:
            $ref: '#/components/schemas/Overpayment'
    Overpayment:
      externalDocs:
        url: http://developer.xero.com/documentation/api/overpayments/
      properties:
        Type:
          description: See Overpayment Types
          type: string
          enum:
          - RECEIVE-OVERPAYMENT
          - SPEND-OVERPAYMENT
          - AROVERPAYMENT
        Contact:
          $ref: '#/components/schemas/Contact'
        Date:
          description: The date the overpayment is created YYYY-MM-DD
          type: string
          x-is-msdate: true
        Status:
          description: See Overpayment Status Codes
          type: string
          enum:
          - AUTHORISED
          - PAID
          - VOIDED
        LineAmountTypes:
          $ref: '#/components/schemas/LineAmountTypes'
          type: string
        LineItems:
          description: See Overpayment Line Items
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        SubTotal:
          description: The subtotal of the overpayment excluding taxes
          type: number
          format: double
          x-is-money: true
        TotalTax:
          description: The total tax on the overpayment
          type: number
          format: double
          x-is-money: true
        Total:
          description: The total of the overpayment (subtotal + total tax)
          type: number
          format: double
          x-is-money: true
        UpdatedDateUTC:
          description: UTC timestamp of last update to the overpayment
          type: string
          x-is-msdate-time: true
          readOnly: true
        CurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        OverpaymentID:
          description: Xero generated unique identifier
          type: string
          format: uuid
        CurrencyRate:
          description: The currency rate for a multicurrency overpayment. If no rate
            is specified, the XE.com day rate is used
          type: number
          format: double
          x-is-money: true
        RemainingCredit:
          description: The remaining credit balance on the overpayment
          type: number
          format: double
          x-is-money: true
        Allocations:
          description: See Allocations
          type: array
          items:
            $ref: '#/components/schemas/Allocation'
        AppliedAmount:
          description: The amount of applied to an invoice
          type: number
          format: double
        Payments:
          description: See Payments
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        HasAttachments:
          description: boolean to indicate if a overpayment has an attachment
          readOnly: true
          type: boolean
          default: 'false'
        Attachments:
          description: See Attachments
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      type: object
    Payments:
      type: object
      x-objectArrayKey: payments
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
    PaymentDelete:
      externalDocs:
        url: http://developer.xero.com/documentation/api/payments/
      properties:
        Status:
          description: The status of the payment.
          type: string
          default: DELETED
      required:
      - Status
      type: object
    Payment:
      externalDocs:
        url: http://developer.xero.com/documentation/api/payments/
      properties:
        Invoice:
          $ref: '#/components/schemas/Invoice'
        CreditNote:
          $ref: '#/components/schemas/CreditNote'
        Prepayment:
          $ref: '#/components/schemas/Prepayment'
        Overpayment:
          $ref: '#/components/schemas/Overpayment'
        InvoiceNumber:
          description: Number of invoice or credit note you are applying payment to
            e.g.INV-4003
          type: string
        CreditNoteNumber:
          description: Number of invoice or credit note you are applying payment to
            e.g. INV-4003
          type: string
        BatchPayment:
          $ref: '#/components/schemas/BatchPayment'
        Account:
          $ref: '#/components/schemas/Account'
        Code:
          description: Code of account you are using to make the payment e.g. 001
            (note- not all accounts have a code value)
          type: string
        Date:
          description: Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
          type: string
          x-is-msdate: true
        CurrencyRate:
          description: Exchange rate when payment is received. Only used for non base
            currency invoices and credit notes e.g. 0.7500
          type: number
          format: double
          x-is-money: true
        Amount:
          description: The amount of the payment. Must be less than or equal to the
            outstanding amount owing on the invoice e.g. 200.00
          type: number
          format: double
          x-is-money: true
        BankAmount:
          description: The amount of the payment in the currency of the bank account.
          type: number
          format: double
          x-is-money: true
        Reference:
          description: An optional description for the payment e.g. Direct Debit
          type: string
        IsReconciled:
          description: An optional parameter for the payment. A boolean indicating
            whether you would like the payment to be created as reconciled when using
            PUT, or whether a payment has been reconciled when using GET
          type: boolean
        Status:
          description: The status of the payment.
          type: string
          enum:
          - AUTHORISED
          - DELETED
        PaymentType:
          description: See Payment Types.
          readOnly: true
          type: string
          enum:
          - ACCRECPAYMENT
          - ACCPAYPAYMENT
          - ARCREDITPAYMENT
          - APCREDITPAYMENT
          - AROVERPAYMENTPAYMENT
          - ARPREPAYMENTPAYMENT
          - APPREPAYMENTPAYMENT
          - APOVERPAYMENTPAYMENT
        UpdatedDateUTC:
          description: UTC timestamp of last update to the payment
          type: string
          x-is-msdate-time: true
          readOnly: true
        PaymentID:
          description: The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
          type: string
          format: uuid
        BatchPaymentID:
          description: Present if the payment was created as part of a batch.
          type: string
          format: uuid
        BankAccountNumber:
          description: The suppliers bank account number the payment is being made
            to
          type: string
        Particulars:
          description: The suppliers bank account number the payment is being made
            to
          type: string
        Details:
          description: The information to appear on the supplier's bank account
          type: string
        HasAccount:
          description: A boolean to indicate if a contact has an validation errors
          type: boolean
          default: 'false'
        HasValidationErrors:
          description: A boolean to indicate if a contact has an validation errors
          type: boolean
          default: 'false'
        StatusAttributeString:
          description: A string to indicate if a invoice status
          type: string
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      type: object
    Prepayments:
      type: object
      x-objectArrayKey: prepayments
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Prepayments:
          type: array
          items:
            $ref: '#/components/schemas/Prepayment'
    Prepayment:
      externalDocs:
        url: http://developer.xero.com/documentation/api/prepayments/
      properties:
        Type:
          description: See Prepayment Types
          type: string
          enum:
          - RECEIVE-PREPAYMENT
          - SPEND-PREPAYMENT
          - ARPREPAYMENT
          - APPREPAYMENT
        Contact:
          $ref: '#/components/schemas/Contact'
        Date:
          description: The date the prepayment is created YYYY-MM-DD
          type: string
          x-is-msdate: true
        Status:
          description: See Prepayment Status Codes
          type: string
          enum:
          - AUTHORISED
          - PAID
          - VOIDED
        LineAmountTypes:
          $ref: '#/components/schemas/LineAmountTypes'
          type: string
        LineItems:
          description: See Prepayment Line Items
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        SubTotal:
          description: The subtotal of the prepayment excluding taxes
          type: number
          format: double
          x-is-money: true
        TotalTax:
          description: The total tax on the prepayment
          type: number
          format: double
          x-is-money: true
        Total:
          description: The total of the prepayment(subtotal + total tax)
          type: number
          format: double
          x-is-money: true
        Reference:
          description: Returns Invoice number field. Reference field isn't available.
          type: string
          readOnly: true
        UpdatedDateUTC:
          description: UTC timestamp of last update to the prepayment
          type: string
          x-is-msdate-time: true
          readOnly: true
        CurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        PrepaymentID:
          description: Xero generated unique identifier
          type: string
          format: uuid
        CurrencyRate:
          description: The currency rate for a multicurrency prepayment. If no rate
            is specified, the XE.com day rate is used
          type: number
          format: double
          x-is-money: true
        RemainingCredit:
          description: The remaining credit balance on the prepayment
          type: number
          format: double
          x-is-money: true
        Allocations:
          description: See Allocations
          type: array
          items:
            $ref: '#/components/schemas/Allocation'
        Payments:
          description: See Payments
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        AppliedAmount:
          description: The amount of applied to an invoice
          type: number
          format: double
        HasAttachments:
          description: boolean to indicate if a prepayment has an attachment
          readOnly: true
          type: boolean
          default: 'false'
        Attachments:
          description: See Attachments
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      type: object
    PurchaseOrders:
      type: object
      x-objectArrayKey: purchase_orders
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        PurchaseOrders:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrder'
    PurchaseOrder:
      externalDocs:
        url: http://developer.xero.com/documentation/api/purchase-orders/
      properties:
        Contact:
          $ref: '#/components/schemas/Contact'
        LineItems:
          description: See LineItems
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        Date:
          description: "Date purchase order was issued \u2013 YYYY-MM-DD. If the Date\
            \ element is not specified then it will default to the current date based\
            \ on the timezone setting of the organisation"
          type: string
          x-is-msdate: true
        DeliveryDate:
          description: "Date the goods are to be delivered \u2013 YYYY-MM-DD"
          type: string
          x-is-msdate: true
        LineAmountTypes:
          $ref: '#/components/schemas/LineAmountTypes'
          type: string
        PurchaseOrderNumber:
          description: Unique alpha numeric code identifying purchase order (when
            missing will auto-generate from your Organisation Invoice Settings)
          type: string
        Reference:
          description: Additional reference number
          type: string
        BrandingThemeID:
          description: See BrandingThemes
          type: string
          format: uuid
        CurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        Status:
          description: See Purchase Order Status Codes
          type: string
          enum:
          - DRAFT
          - SUBMITTED
          - AUTHORISED
          - BILLED
          - DELETED
        SentToContact:
          description: "Boolean to set whether the purchase order should be marked\
            \ as \u201Csent\u201D. This can be set only on purchase orders that have\
            \ been approved or billed"
          type: boolean
        DeliveryAddress:
          description: The address the goods are to be delivered to
          type: string
        AttentionTo:
          description: The person that the delivery is going to
          type: string
        Telephone:
          description: The phone number for the person accepting the delivery
          type: string
        DeliveryInstructions:
          description: A free text feild for instructions (500 characters max)
          type: string
        ExpectedArrivalDate:
          description: The date the goods are expected to arrive.
          type: string
          x-is-msdate: true
        PurchaseOrderID:
          description: Xero generated unique identifier for purchase order
          type: string
          format: uuid
        CurrencyRate:
          description: The currency rate for a multicurrency purchase order. If no
            rate is specified, the XE.com day rate is used.
          type: number
          format: double
          x-is-money: true
        SubTotal:
          description: Total of purchase order excluding taxes
          readOnly: true
          type: number
          format: double
          x-is-money: true
        TotalTax:
          description: Total tax on purchase order
          readOnly: true
          type: number
          format: double
          x-is-money: true
        Total:
          description: Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)
          readOnly: true
          type: number
          format: double
          x-is-money: true
        TotalDiscount:
          description: Total of discounts applied on the purchase order line items
          readOnly: true
          type: number
          format: double
          x-is-money: true
        HasAttachments:
          description: boolean to indicate if a purchase order has an attachment
          readOnly: true
          type: boolean
          default: 'false'
        UpdatedDateUTC:
          description: Last modified date UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        StatusAttributeString:
          description: A string to indicate if a invoice status
          type: string
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Attachments:
          description: Displays array of attachments from the API
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      type: object
    Pagination:
      type: object
      properties:
        page:
          type: integer
        pageSize:
          type: integer
        pageCount:
          type: integer
        itemCount:
          type: integer
    Quotes:
      type: object
      x-objectArrayKey: quotes
      properties:
        Quotes:
          type: array
          items:
            $ref: '#/components/schemas/Quote'
    Quote:
      externalDocs:
        url: http://developer.xero.com/documentation/api/Quotes/
      properties:
        QuoteID:
          description: QuoteID GUID is automatically generated and is returned after
            create or GET.
          type: string
          format: uuid
        QuoteNumber:
          description: Unique alpha numeric code identifying a quote (Max Length =
            255)
          maxLength: 255
          type: string
        Reference:
          description: Additional reference number
          maxLength: 4000
          type: string
        Terms:
          description: Terms of the quote
          maxLength: 4000
          type: string
        Contact:
          $ref: '#/components/schemas/Contact'
          type: string
        LineItems:
          description: See LineItems
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        Date:
          description: "Date quote was issued \u2013 YYYY-MM-DD. If the Date element\
            \ is not specified it will default to the current date based on the timezone\
            \ setting of the organisation"
          type: string
          x-is-msdate: true
        DateString:
          description: Date the quote was issued (YYYY-MM-DD)
          type: string
        ExpiryDate:
          description: "Date the quote expires \u2013 YYYY-MM-DD."
          type: string
          x-is-msdate: true
        ExpiryDateString:
          description: "Date the quote expires \u2013 YYYY-MM-DD."
          type: string
        Status:
          $ref: '#/components/schemas/QuoteStatusCodes'
          type: string
        CurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        CurrencyRate:
          description: The currency rate for a multicurrency quote
          type: number
          format: double
        SubTotal:
          description: Total of quote excluding taxes.
          readOnly: true
          type: number
          format: double
          x-is-money: true
        TotalTax:
          description: Total tax on quote
          readOnly: true
          type: number
          format: double
          x-is-money: true
        Total:
          description: "Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This\
            \ will be ignored if it doesn\u2019t equal the sum of the LineAmounts"
          readOnly: true
          type: number
          format: double
          x-is-money: true
        TotalDiscount:
          description: Total of discounts applied on the quote line items
          readOnly: true
          type: number
          format: double
          x-is-money: true
        Title:
          description: Title text for the quote
          type: string
          maxLength: 100
        Summary:
          description: Summary text for the quote
          type: string
          maxLength: 3000
        BrandingThemeID:
          description: See BrandingThemes
          type: string
          format: uuid
        UpdatedDateUTC:
          description: Last modified date UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        LineAmountTypes:
          $ref: '#/components/schemas/QuoteLineAmountTypes'
          type: string
          description: See Quote Line Amount Types
        StatusAttributeString:
          description: A string to indicate if a invoice status
          type: string
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      type: object
    QuoteLineAmountTypes:
      description: "Line amounts are exclusive of tax by default if you don\u2019\
        t specify this element. See Line Amount Types"
      type: string
      enum:
      - EXCLUSIVE
      - INCLUSIVE
      - NOTAX
    QuoteStatusCodes:
      description: The status of the quote.
      type: string
      enum:
      - DRAFT
      - SENT
      - DECLINED
      - ACCEPTED
      - INVOICED
      - DELETED
    Receipts:
      type: object
      x-objectArrayKey: receipts
      properties:
        Receipts:
          type: array
          items:
            $ref: '#/components/schemas/Receipt'
    Receipt:
      externalDocs:
        url: http://developer.xero.com/documentation/api/receipts/
      properties:
        Date:
          description: "Date of receipt \u2013 YYYY-MM-DD"
          type: string
          x-is-msdate: true
        Contact:
          $ref: '#/components/schemas/Contact'
        LineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        User:
          $ref: '#/components/schemas/User'
        Reference:
          description: Additional reference number
          type: string
        LineAmountTypes:
          $ref: '#/components/schemas/LineAmountTypes'
          type: string
        SubTotal:
          description: Total of receipt excluding taxes
          type: number
          format: double
          x-is-money: true
        TotalTax:
          description: Total tax on receipt
          type: number
          format: double
          x-is-money: true
        Total:
          description: Total of receipt tax inclusive (i.e. SubTotal + TotalTax)
          type: number
          format: double
          x-is-money: true
        ReceiptID:
          description: Xero generated unique identifier for receipt
          type: string
          format: uuid
        Status:
          description: "Current status of receipt \u2013 see status types"
          type: string
          enum:
          - DRAFT
          - SUBMITTED
          - AUTHORISED
          - DECLINED
          - VOIDED
        ReceiptNumber:
          description: Xero generated sequence number for receipt in current claim
            for a given user
          readOnly: true
          type: string
        UpdatedDateUTC:
          description: Last modified date UTC format
          type: string
          x-is-msdate-time: true
          readOnly: true
        HasAttachments:
          description: boolean to indicate if a receipt has an attachment
          readOnly: true
          type: boolean
          default: 'false'
        Url:
          description: "URL link to a source document \u2013 shown as \u201CGo to\
            \ [appName]\u201D in the Xero app"
          readOnly: true
          type: string
        ValidationErrors:
          description: Displays array of validation error messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Warnings:
          description: Displays array of warning messages from the API
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        Attachments:
          description: Displays array of attachments from the API
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      type: object
    RepeatingInvoices:
      type: object
      x-objectArrayKey: repeating_invoices
      properties:
        RepeatingInvoices:
          type: array
          items:
            $ref: '#/components/schemas/RepeatingInvoice'
    RepeatingInvoice:
      externalDocs:
        url: http://developer.xero.com/documentation/api/repeating-invoices/
      properties:
        Type:
          description: See Invoice Types
          type: string
          enum:
          - ACCPAY
          - ACCREC
        Contact:
          $ref: '#/components/schemas/Contact'
        Schedule:
          $ref: '#/components/schemas/Schedule'
        LineItems:
          description: See LineItems
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        LineAmountTypes:
          $ref: '#/components/schemas/LineAmountTypes'
          type: string
        Reference:
          description: "ACCREC only \u2013 additional reference number"
          type: string
        BrandingThemeID:
          description: See BrandingThemes
          type: string
          format: uuid
        CurrencyCode:
          $ref: '#/components/schemas/CurrencyCode'
          type: string
        Status:
          description: "One of the following - DRAFT or AUTHORISED \u2013 See Invoice\
            \ Status Codes"
          type: string
          enum:
          - DRAFT
          - AUTHORISED
          - DELETED
        SubTotal:
          description: Total of invoice excluding taxes
          type: number
          format: double
          x-is-money: true
        TotalTax:
          description: Total tax on invoice
          type: number
          format: double
          x-is-money: true
        Total:
          description: Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)
          type: number
          format: double
          x-is-money: true
        RepeatingInvoiceID:
          description: Xero generated unique identifier for repeating invoice template
          type: string
          format: uuid
        ID:
          description: Xero generated unique identifier for repeating invoice template
          type: string
          format: uuid
        HasAttachments:
          description: Boolean to indicate if an invoice has an attachment
          readOnly: true
          type: boolean
          default: 'false'
        Attachments:
          description: Displays array of attachments from the API
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        ApprovedForSending:
          description: Boolean to indicate whether the invoice has been approved for
            sending
          type: boolean
          default: 'false'
        SendCopy:
          description: Boolean to indicate whether a copy is sent to sender's email
          type: boolean
          default: 'false'
        MarkAsSent:
          description: Boolean to indicate whether the invoice in the Xero app displays
            as "sent"
          type: boolean
          default: 'false'
        IncludePDF:
          description: Boolean to indicate whether to include PDF attachment
          type: boolean
          default: 'false'
      type: object
    ReportWithRows:
      type: object
      properties:
        Reports:
          type: array
          items:
            $ref: '#/components/schemas/ReportWithRow'
    ReportWithRow:
      externalDocs:
        url: http://developer.xero.com/documentation/api/reports/
      properties:
        ReportID:
          description: ID of the Report
          type: string
        ReportName:
          description: Name of the report
          type: string
        ReportTitle:
          description: Title of the report
          type: string
        ReportType:
          description: The type of report (BalanceSheet,ProfitLoss, etc)
          type: string
        ReportTitles:
          description: Report titles array (3 to 4 strings with the report name, orgnisation
            name and time frame of report)
          type: array
          items:
            type: string
        ReportDate:
          description: Date of report
          type: string
        Rows:
          type: array
          items:
            $ref: '#/components/schemas/ReportRows'
        UpdatedDateUTC:
          description: Updated Date
          type: string
          x-is-msdate-time: true
          readOnly: true
        Fields:
          type: array
          items:
            $ref: '#/components/schemas/ReportFields'
    ReportRows:
      type: object
      properties:
        RowType:
          $ref: '#/components/schemas/RowType'
        Title:
          type: string
        Cells:
          type: array
          items:
            $ref: '#/components/schemas/ReportCell'
        Rows:
          type: array
          items:
            $ref: '#/components/schemas/ReportRow'
    RowType:
      type: string
      enum:
      - Header
      - Section
      - Row
      - SummaryRow
    ReportRow:
      type: object
      properties:
        RowType:
          $ref: '#/components/schemas/RowType'
        Title:
          type: string
        Cells:
          type: array
          items:
            $ref: '#/components/schemas/ReportCell'
    ReportCell:
      type: object
      properties:
        Value:
          type: string
        Attributes:
          type: array
          items:
            $ref: '#/components/schemas/ReportAttribute'
    ReportAttribute:
      externalDocs:
        url: http://developer.xero.com/documentation/api/reports/
      properties:
        Id:
          type: string
        Value:
          type: string
    ReportFields:
      type: object
      properties:
        FieldID:
          type: string
        Description:
          type: string
        Value:
          type: string
    Reports:
      type: object
      x-objectArrayKey: reports
      properties:
        Reports:
          type: array
          items:
            $ref: '#/components/schemas/Report'
    Report:
      externalDocs:
        url: http://developer.xero.com/documentation/api/reports/
      properties:
        ReportName:
          description: See Prepayment Types
          type: string
        ReportType:
          description: See Prepayment Types
          type: string
          enum:
          - AgedPayablesByContact
        ReportTitle:
          description: See Prepayment Types
          type: string
        ReportDate:
          description: Date of report
          type: string
        UpdatedDateUTC:
          description: Updated Date
          type: string
          x-is-msdate-time: true
          readOnly: true
        Contacts:
          type: array
          items:
            $ref: '#/components/schemas/TenNinetyNineContact'
    TenNinetyNineContact:
      properties:
        Box1:
          description: Box 1 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box2:
          description: Box 2 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box3:
          description: Box 3 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box4:
          description: Box 4 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box5:
          description: Box 5 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box6:
          description: Box 6 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box7:
          description: Box 7 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box8:
          description: Box 8 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box9:
          description: Box 9 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box10:
          description: Box 10 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box11:
          description: Box 11 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box13:
          description: Box 13 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Box14:
          description: Box 14 on 1099 Form
          type: number
          format: double
          x-is-money: true
        Name:
          description: Contact name on 1099 Form
          type: string
        FederalTaxIDType:
          description: Contact Fed Tax ID type
          type: string
        City:
          description: Contact city on 1099 Form
          type: string
        Zip:
          description: Contact zip on 1099 Form
          type: string
        State:
          description: Contact State on 1099 Form
          type: string
        Email:
          description: Contact email on 1099 Form
          type: string
        StreetAddress:
          description: Contact address on 1099 Form
          type: string
        TaxID:
          description: Contact tax id on 1099 Form
          type: string
        ContactId:
          description: Contact contact id
          type: string
          format: uuid
        LegalName:
          description: Contact legal name
          type: string
        BusinessName:
          description: Contact business name
          type: string
        FederalTaxClassification:
          description: Contact federal tax classification
          type: string
          enum:
          - SOLE_PROPRIETOR
          - PARTNERSHIP
          - TRUST_OR_ESTATE
          - NONPROFIT
          - C_CORP
          - S_CORP
          - OTHER
    Schedule:
      externalDocs:
        url: http://developer.xero.com/documentation/api/repeating-invoices/
      properties:
        Period:
          description: Integer used with the unit e.g. 1 (every 1 week), 2 (every
            2 months)
          type: integer
        Unit:
          description: One of the following - WEEKLY or MONTHLY
          type: string
          enum:
          - WEEKLY
          - MONTHLY
        DueDate:
          description: Integer used with due date type e.g 20 (of following month),
            31 (of current month)
          type: integer
        DueDateType:
          description: the payment terms
          type: string
          enum:
          - DAYSAFTERBILLDATE
          - DAYSAFTERBILLMONTH
          - DAYSAFTERINVOICEDATE
          - DAYSAFTERINVOICEMONTH
          - OFCURRENTMONTH
          - OFFOLLOWINGMONTH
        StartDate:
          description: Date the first invoice of the current version of the repeating
            schedule was generated (changes when repeating invoice is edited)
          type: string
          x-is-msdate: true
        NextScheduledDate:
          description: The calendar date of the next invoice in the schedule to be
            generated
          type: string
          x-is-msdate: true
        EndDate:
          description: "Invoice end date \u2013 only returned if the template has\
            \ an end date set"
          type: string
          x-is-msdate: true
      type: object
    TaxRates:
      type: object
      x-objectArrayKey: tax_rates
      properties:
        TaxRates:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
    TaxType:
      description: "See Tax Types \u2013 can only be used on update calls"
      type: string
      enum:
      - OUTPUT
      - INPUT
      - CAPEXINPUT
      - EXEMPTEXPORT
      - EXEMPTEXPENSES
      - EXEMPTCAPITAL
      - EXEMPTOUTPUT
      - INPUTTAXED
      - BASEXCLUDED
      - GSTONCAPIMPORTS
      - GSTONIMPORTS
      - NONE
      - INPUT2
      - ZERORATED
      - OUTPUT2
      - CAPEXINPUT2
      - CAPEXOUTPUT
      - CAPEXOUTPUT2
      - CAPEXSRINPUT
      - CAPEXSROUTPUT
      - ECACQUISITIONS
      - ECZRINPUT
      - ECZROUTPUT
      - ECZROUTPUTSERVICES
      - EXEMPTINPUT
      - REVERSECHARGES
      - RRINPUT
      - RROUTPUT
      - SRINPUT
      - SROUTPUT
      - ZERORATEDINPUT
      - ZERORATEDOUTPUT
      - BLINPUT
      - DSOUTPUT
      - EPINPUT
      - ES33OUTPUT
      - ESN33OUTPUT
      - IGDSINPUT2
      - IMINPUT2
      - MEINPUT
      - NRINPUT
      - OPINPUT
      - OSOUTPUT
      - TXESSINPUT
      - TXN33INPUT
      - TXPETINPUT
      - TXREINPUT
      - INPUT3
      - INPUT4
      - OUTPUT3
      - OUTPUT4
      - SROUTPUT2
      - TXCA
      - SRCAS
      - BLINPUT2
      - DRCHARGESUPPLY20
      - DRCHARGE20
      - DRCHARGESUPPLY5
      - DRCHARGE5
      - BADDEBTRELIEF
      - IGDSINPUT3
      - SROVR
      - TOURISTREFUND
      - TXRCN33
      - TXRCRE
      - TXRCESS
      - TXRCTS
      - OUTPUTY23
      - DSOUTPUTY23
      - INPUTY23
      - IMINPUT2Y23
      - IGDSINPUT2Y23
      - TXPETINPUTY23
      - TXESSINPUTY23
      - TXN33INPUTY23
      - TXREINPUTY23
      - TXCAY23
      - BADDEBTRELIEFY23
      - IGDSINPUT3Y23
      - SROVRRSY23
      - SROVRLVGY23
      - SRLVGY23
      - TXRCN33Y23
      - TXRCREY23
      - TXRCESSY23
      - TXRCTSY23
      - IM
      - IMY23
      - IMESS
      - IMESSY23
      - IMN33
      - IMN33Y23
      - IMRE
      - IMREY23
      - BADDEBTRECOVERY
      - BADDEBTRECOVERYY23
      - OUTPUTY24
      - DSOUTPUTY24
      - INPUTY24
      - IGDSINPUT2Y24
      - TXPETINPUTY24
      - TXESSINPUTY24
      - TXN33INPUTY24
      - TXREINPUTY24
      - TXCAY24
      - BADDEBTRELIEFY24
      - IGDSINPUT3Y24
      - SROVRRSY24
      - SROVRLVGY24
      - SRLVGY24
      - TXRCTSY24
      - TXRCESSY24
      - TXRCN33Y24
      - TXRCREY24
      - IMY24
      - IMESSY24
      - IMN33Y24
      - IMREY24
      - BADDEBTRECOVERYY24
      - OSOUTPUT2
      - BLINPUT3
      - BLINPUT3Y23
      - BLINPUT3Y24
    Setup:
      externalDocs:
        url: https://developer.xero.com/documentation/api-guides/conversions
      properties:
        ConversionDate:
          $ref: '#/components/schemas/ConversionDate'
        ConversionBalances:
          description: Balance supplied for each account that has a value as at the
            conversion date.
          type: array
          items:
            $ref: '#/components/schemas/ConversionBalances'
        Accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    ConversionDate:
      description: The date when the organisation starts using Xero
      type: object
      properties:
        Month:
          description: The month the organisation starts using Xero. Value is an integer
            between 1 and 12
          type: integer
        Year:
          description: The year the organisation starts using Xero. Value is an integer
            greater than 2006
          type: integer
    ConversionBalances:
      description: Balance supplied for each account that has a value as at the conversion
        date.
      properties:
        AccountCode:
          description: The account code for a account
          type: string
        Balance:
          description: The opening balances of the account. Debits are positive, credits
            are negative values
          type: number
          format: double
        BalanceDetails:
          type: array
          items:
            $ref: '#/components/schemas/BalanceDetails'
      type: object
    BalanceDetails:
      description: An array to specify multiple currency balances of an account
      properties:
        Balance:
          description: The opening balances of the account. Debits are positive, credits
            are negative values
          type: number
          format: double
        CurrencyCode:
          description: The currency of the balance (Not required for base currency)
          type: string
        CurrencyRate:
          description: (Optional) Exchange rate to base currency when money is spent
            or received. If not specified, XE rate for the day is applied
          type: number
          format: double
          x-is-money: true
      type: object
    ImportSummaryObject:
      externalDocs:
        url: https://developer.xero.com/documentation/api-guides/conversions
      properties:
        ImportSummary:
          $ref: '#/components/schemas/ImportSummary'
    ImportSummary:
      externalDocs:
        url: https://developer.xero.com/documentation/api-guides/conversions
      description: A summary of the import from setup endpoint
      type: object
      properties:
        Accounts:
          $ref: '#/components/schemas/ImportSummaryAccounts'
        Organisation:
          $ref: '#/components/schemas/ImportSummaryOrganisation'
    ImportSummaryAccounts:
      description: A summary of the accounts changes
      type: object
      properties:
        Total:
          description: The total number of accounts in the org
          type: integer
          format: int32
        New:
          description: The number of new accounts created
          type: integer
          format: int32
        Updated:
          description: The number of accounts updated
          type: integer
          format: int32
        Deleted:
          description: The number of accounts deleted
          type: integer
          format: int32
        Locked:
          description: The number of locked accounts
          type: integer
          format: int32
        System:
          description: The number of system accounts
          type: integer
          format: int32
        Errored:
          description: The number of accounts that had an error
          type: integer
          format: int32
        Present:
          type: boolean
        NewOrUpdated:
          description: The number of new or updated accounts
          type: integer
          format: int32
    ImportSummaryOrganisation:
      type: object
      properties:
        Present:
          type: boolean
    TaxRate:
      externalDocs:
        url: http://developer.xero.com/documentation/api/tax-rates/
      properties:
        Name:
          description: Name of tax rate
          type: string
        TaxType:
          description: The tax type
          type: string
        TaxComponents:
          description: See TaxComponents
          type: array
          items:
            $ref: '#/components/schemas/TaxComponent'
        Status:
          description: See Status Codes
          type: string
          enum:
          - ACTIVE
          - DELETED
          - ARCHIVED
          - PENDING
        ReportTaxType:
          description: See ReportTaxTypes
          type: string
          enum:
          - AVALARA
          - BASEXCLUDED
          - CAPITALSALESOUTPUT
          - CAPITALEXPENSESINPUT
          - ECOUTPUT
          - ECOUTPUTSERVICES
          - ECINPUT
          - ECACQUISITIONS
          - EXEMPTEXPENSES
          - EXEMPTINPUT
          - EXEMPTOUTPUT
          - GSTONIMPORTS
          - INPUT
          - INPUTTAXED
          - MOSSSALES
          - NONE
          - NONEOUTPUT
          - OUTPUT
          - PURCHASESINPUT
          - SALESOUTPUT
          - EXEMPTCAPITAL
          - EXEMPTEXPORT
          - CAPITALEXINPUT
          - GSTONCAPIMPORTS
          - GSTONCAPITALIMPORTS
          - REVERSECHARGES
          - PAYMENTS
          - INVOICE
          - CASH
          - ACCRUAL
          - FLATRATECASH
          - FLATRATEACCRUAL
          - ACCRUALS
          - TXCA
          - SRCAS
          - DSOUTPUT
          - BLINPUT2
          - EPINPUT
          - IMINPUT2
          - MEINPUT
          - IGDSINPUT2
          - ESN33OUTPUT
          - OPINPUT
          - OSOUTPUT
          - TXN33INPUT
          - TXESSINPUT
          - TXREINPUT
          - TXPETINPUT
          - NRINPUT
          - ES33OUTPUT
          - ZERORATEDINPUT
          - ZERORATEDOUTPUT
          - DRCHARGESUPPLY
          - DRCHARGE
          - CAPINPUT
          - CAPIMPORTS
          - IMINPUT
          - INPUT2
          - CIUINPUT
          - SRINPUT
          - OUTPUT2
          - SROUTPUT
          - CAPOUTPUT
          - SROUTPUT2
          - CIUOUTPUT
          - ZROUTPUT
          - ZREXPORT
          - ACC28PLUS
          - ACCUPTO28
          - OTHEROUTPUT
          - SHOUTPUT
          - ZRINPUT
          - BADDEBT
          - OTHERINPUT
          - BADDEBTRELIEF
          - IGDSINPUT3
          - SROVR
          - TOURISTREFUND
          - TXRCN33
          - TXRCRE
          - TXRCESS
          - TXRCTS
          - CAPEXINPUT
          - UNDEFINED
          - CAPEXOUTPUT
          - ZEROEXPOUTPUT
          - GOODSIMPORT
          - NONEINPUT
          - NOTREPORTED
          - SROVRRS
          - SROVRLVG
          - SRLVG
          - IM
          - IMESS
          - IMN33
          - IMRE
          - BADDEBTRECOVERY
          - USSALESTAX
          - BLINPUT3
        CanApplyToAssets:
          description: Boolean to describe if tax rate can be used for asset accounts
            i.e.  true,false
          readOnly: true
          type: boolean
        CanApplyToEquity:
          description: Boolean to describe if tax rate can be used for equity accounts
            i.e true,false
          readOnly: true
          type: boolean
        CanApplyToExpenses:
          description: Boolean to describe if tax rate can be used for expense accounts  i.e.
            true,false
          readOnly: true
          type: boolean
        CanApplyToLiabilities:
          description: Boolean to describe if tax rate can be used for liability accounts  i.e.
            true,false
          readOnly: true
          type: boolean
        CanApplyToRevenue:
          description: Boolean to describe if tax rate can be used for revenue accounts
            i.e. true,false
          readOnly: true
          type: boolean
        DisplayTaxRate:
          description: Tax Rate (decimal to 4dp) e.g 12.5000
          readOnly: true
          type: number
          format: double
          x-is-money: true
        EffectiveRate:
          description: Effective Tax Rate (decimal to 4dp) e.g 12.5000
          readOnly: true
          type: number
          format: double
          x-is-money: true
      type: object
    TaxComponent:
      externalDocs:
        url: http://developer.xero.com/documentation/api/tax-rates/
      properties:
        Name:
          description: Name of Tax Component
          type: string
        Rate:
          description: Tax Rate (up to 4dp)
          type: number
          format: double
          x-is-money: true
        IsCompound:
          description: Boolean to describe if Tax rate is compounded.
          type: boolean
        IsNonRecoverable:
          description: Boolean to describe if tax rate is non-recoverable. Non-recoverable
            rates are only applicable to Canadian organisations
          type: boolean
      type: object
    TrackingCategories:
      type: object
      x-objectArrayKey: tracking_categories
      properties:
        TrackingCategories:
          type: array
          items:
            $ref: '#/components/schemas/TrackingCategory'
    TrackingCategory:
      externalDocs:
        url: http://developer.xero.com/documentation/api/tracking-categories/
      properties:
        TrackingCategoryID:
          description: The Xero identifier for a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
          type: string
          format: uuid
        TrackingOptionID:
          description: The Xero identifier for a tracking option e.g. dc54c220-0140-495a-b925-3246adc0075f
          type: string
          format: uuid
        Name:
          description: The name of the tracking category e.g. Department, Region (max
            length = 100)
          maxLength: 100
          type: string
        Option:
          description: The option name of the tracking option e.g. East, West (max
            length = 100)
          maxLength: 100
          type: string
        Status:
          description: The status of a tracking category
          type: string
          enum:
          - ACTIVE
          - ARCHIVED
          - DELETED
        Options:
          description: See Tracking Options
          type: array
          items:
            $ref: '#/components/schemas/TrackingOption'
      type: object
    TrackingOptions:
      type: object
      x-objectArrayKey: options
      properties:
        Options:
          type: array
          items:
            $ref: '#/components/schemas/TrackingOption'
    TrackingOption:
      externalDocs:
        url: http://developer.xero.com/documentation/api/tracking-categories/
      properties:
        TrackingOptionID:
          description: The Xero identifier for a tracking option e.g. ae777a87-5ef3-4fa0-a4f0-d10e1f13073a
          type: string
          format: uuid
        Name:
          description: The name of the tracking option e.g. Marketing, East (max length
            = 100)
          maxLength: 100
          type: string
        Status:
          description: The status of a tracking option
          type: string
          enum:
          - ACTIVE
          - ARCHIVED
          - DELETED
        TrackingCategoryID:
          description: Filter by a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
          type: string
          format: uuid
      type: object
    SalesTrackingCategory:
      externalDocs:
        url: http://developer.xero.com/documentation/api/tracking-categories/
      properties:
        TrackingCategoryName:
          description: The default sales tracking category name for contacts
          type: string
        TrackingOptionName:
          description: The default purchase tracking category name for contacts
          type: string
      type: object
    Users:
      type: object
      x-objectArrayKey: users
      properties:
        Users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      externalDocs:
        url: http://developer.xero.com/documentation/api/users/
      properties:
        UserID:
          description: Xero identifier
          type: string
          format: uuid
        EmailAddress:
          description: Email address of user
          type: string
        FirstName:
          description: First name of user
          type: string
        LastName:
          description: Last name of user
          type: string
        UpdatedDateUTC:
          description: Timestamp of last change to user
          type: string
          x-is-msdate-time: true
          readOnly: true
        IsSubscriber:
          description: Boolean to indicate if user is the subscriber
          type: boolean
        OrganisationRole:
          description: User role that defines permissions in Xero and via API (READONLY,
            INVOICEONLY, STANDARD, FINANCIALADVISER, etc)
          type: string
          enum:
          - READONLY
          - INVOICEONLY
          - STANDARD
          - FINANCIALADVISER
          - MANAGEDCLIENT
          - CASHBOOKCLIENT
          - UNKNOWN
          - REMOVED
      type: object
    Error:
      externalDocs:
        url: https://developer.xero.com/documentation/api/http-response-codes
      properties:
        ErrorNumber:
          description: Exception number
          type: integer
        Type:
          description: Exception type
          type: string
        Message:
          description: Exception message
          type: string
        Elements:
          description: Array of Elements of validation Errors
          type: array
          items:
            $ref: '#/components/schemas/Element'
      type: object
    Element:
      externalDocs:
        url: https://developer.xero.com/documentation/api/http-response-codes
      properties:
        ValidationErrors:
          description: Array of Validation Error message
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        BatchPaymentID:
          description: Unique ID for batch payment object with validation error
          type: string
          format: uuid
        BankTransactionID:
          type: string
          format: uuid
        CreditNoteID:
          type: string
          format: uuid
        ContactID:
          type: string
          format: uuid
        InvoiceID:
          type: string
          format: uuid
        ItemID:
          type: string
          format: uuid
        PurchaseOrderID:
          type: string
          format: uuid
      type: object
    ValidationError:
      externalDocs:
        url: https://developer.xero.com/documentation/api/http-response-codes
      properties:
        Message:
          description: Validation error message
          type: string
      type: object
    InvoiceAddress:
      properties:
        InvoiceAddressType:
          description: Indicates whether the address is defined as origin (FROM) or
            destination (TO)
          type: string
          enum:
          - FROM
          - TO
        AddressLine1:
          description: First line of a physical address
          type: string
        AddressLine2:
          description: Second line of a physical address
          type: string
        AddressLine3:
          description: Third line of a physical address
          type: string
        AddressLine4:
          description: Fourth line of a physical address
          type: string
        City:
          description: City of a physical address
          type: string
        Region:
          description: Region or state of a physical address
          type: string
        PostalCode:
          description: Postal code of a physical address
          type: string
        Country:
          description: Country of a physical address
          type: string
      type: object
    TaxBreakdownComponent:
      properties:
        TaxComponentId:
          description: The unique ID number of this component
          type: string
          format: uuid
        Type:
          description: The type of the jurisdiction
          type: string
          enum:
          - SYSGST/USCOUNTRY
          - SYSGST/USSTATE
          - SYSGST/USCOUNTY
          - SYSGST/USCITY
          - SYSGST/USSPECIAL
        Name:
          description: The name of the jurisdiction
          type: string
        TaxPercentage:
          description: The percentage of the tax
          type: number
        TaxAmount:
          description: The amount of the tax
          type: number
        TaxableAmount:
          description: The amount that is taxable
          type: number
        NonTaxableAmount:
          description: The amount that is not taxable
          type: number
        ExemptAmount:
          description: The amount that is exempt
          type: number
        StateAssignedNo:
          description: The state assigned number of the jurisdiction
          type: string
        JurisdictionRegion:
          description: Name identifying the region within the country
          type: string
      type: object
